<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Rain Hu's Workspace</title><link>https://intervalrain.github.io/</link><description>Recent content on Rain Hu's Workspace</description><generator>Hugo -- 0.151.0</generator><language>zh-tw</language><lastBuildDate>Sun, 05 Oct 2025 06:39:57 +0800</lastBuildDate><atom:link href="https://intervalrain.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>[Docker] Docker 指令 以 NATS 為例</title><link>https://intervalrain.github.io/docker/docker-nats-commands/</link><pubDate>Sun, 05 Oct 2025 06:39:57 +0800</pubDate><guid>https://intervalrain.github.io/docker/docker-nats-commands/</guid><description>Docker commands collection</description></item><item><title>[孫子兵法] 無智名，無勇功</title><link>https://intervalrain.github.io/philosophies/no_reputation_no_credit/</link><pubDate>Fri, 19 Sep 2025 12:24:56 +0800</pubDate><guid>https://intervalrain.github.io/philosophies/no_reputation_no_credit/</guid><description>無智名，無勇功</description></item><item><title>[Linux] Screen command summary</title><link>https://intervalrain.github.io/linux/screen/</link><pubDate>Wed, 10 Sep 2025 11:10:58 +0800</pubDate><guid>https://intervalrain.github.io/linux/screen/</guid><description>A simple summary of screen command in linux</description></item><item><title>EdgeSync ServiceFramework AspNetCore.Mvc</title><link>https://intervalrain.github.io/nats/auto-convention/</link><pubDate>Mon, 07 Jul 2025 16:55:57 +0800</pubDate><guid>https://intervalrain.github.io/nats/auto-convention/</guid><description>EdgeSync ServiceFramework AspNetCore.Mvc 提供了一個強大的框架，用於在 ASP.NET Core 應用程式中自動化 NATS 通訊模式的配置。框架支援兩種主要的通訊模式：**Request/Response** 和 **Pub/Sub**，並可搭配 NATS JetStream 或 Classic NATS 使用。</description></item><item><title>Devcontainer</title><link>https://intervalrain.github.io/cs/devcontainer/</link><pubDate>Thu, 10 Apr 2025 13:26:59 +0800</pubDate><guid>https://intervalrain.github.io/cs/devcontainer/</guid><description>在 devcontainer 環境下 172 網段問題</description></item><item><title>[C#] 打包 nuget</title><link>https://intervalrain.github.io/cs/nuget/</link><pubDate>Tue, 08 Apr 2025 16:17:30 +0800</pubDate><guid>https://intervalrain.github.io/cs/nuget/</guid><description>將專案打包成 nuget</description></item><item><title>[.NET] User Secret CLI</title><link>https://intervalrain.github.io/it/user_secrets/</link><pubDate>Sun, 23 Mar 2025 16:00:02 +0800</pubDate><guid>https://intervalrain.github.io/it/user_secrets/</guid><description>How to set user secret using dotnet</description></item><item><title>[AI] 卷積神經網路</title><link>https://intervalrain.github.io/ai/6_1/</link><pubDate>Mon, 03 Feb 2025 00:18:32 +0800</pubDate><guid>https://intervalrain.github.io/ai/6_1/</guid><description>Introduction to CNN</description></item><item><title>[LeetCode] Grid 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/grid/</link><pubDate>Sat, 01 Feb 2025 01:09:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/grid/</guid><description/></item><item><title>[LeetCode] String 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/string/</link><pubDate>Sat, 01 Feb 2025 00:00:08 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/string/</guid><description/></item><item><title>[LeetCode] Greedy 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/greedy/</link><pubDate>Sat, 01 Feb 2025 00:00:07 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/greedy/</guid><description/></item><item><title>[LeetCode] Linked List and Binary Tree 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/linked_list_binary_tree/</link><pubDate>Sat, 01 Feb 2025 00:00:07 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/linked_list_binary_tree/</guid><description/></item><item><title>[LeetCode] Math 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/math/</link><pubDate>Sat, 01 Feb 2025 00:00:06 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/math/</guid><description/></item><item><title>[LeetCode] Common Data Structure 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/common_data_structure/</link><pubDate>Sat, 01 Feb 2025 00:00:05 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/common_data_structure/</guid><description/></item><item><title>[LeetCode] Dynamic Programming 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/dynamic_programming/</link><pubDate>Sat, 01 Feb 2025 00:00:04 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/dynamic_programming/</guid><description/></item><item><title>[LeetCode] Graph 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/graph/</link><pubDate>Sat, 01 Feb 2025 00:00:03 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/graph/</guid><description/></item><item><title>[LeetCode] Bit Manipulation 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/bit_manipulation/</link><pubDate>Sat, 01 Feb 2025 00:00:02 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/bit_manipulation/</guid><description/></item><item><title>[LeetCode] Monotonic Stack 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/monotonic_stack/</link><pubDate>Sat, 01 Feb 2025 00:00:01 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/monotonic_stack/</guid><description/></item><item><title>[LeetCode] Binary Search 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/binary_search/</link><pubDate>Sat, 01 Feb 2025 00:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/binary_search/</guid><description/></item><item><title>[AI] 機器學習的流程</title><link>https://intervalrain.github.io/ai/5_5/</link><pubDate>Sun, 12 Jan 2025 17:54:31 +0800</pubDate><guid>https://intervalrain.github.io/ai/5_5/</guid><description>The flow of machine learning</description></item><item><title>[AI] 提高普適化能力</title><link>https://intervalrain.github.io/ai/5_4/</link><pubDate>Sun, 12 Jan 2025 17:54:28 +0800</pubDate><guid>https://intervalrain.github.io/ai/5_4/</guid><description>How to enhance the generalization ability of the model</description></item><item><title>[AI] 提升模型的表現</title><link>https://intervalrain.github.io/ai/5_3/</link><pubDate>Sun, 12 Jan 2025 17:54:27 +0800</pubDate><guid>https://intervalrain.github.io/ai/5_3/</guid><description>How to enhance the performance of the model</description></item><item><title>[AI] 評估模型</title><link>https://intervalrain.github.io/ai/5_2/</link><pubDate>Sun, 12 Jan 2025 17:54:25 +0800</pubDate><guid>https://intervalrain.github.io/ai/5_2/</guid><description>How to evaluate the model</description></item><item><title>[AI] 普適化</title><link>https://intervalrain.github.io/ai/5_1/</link><pubDate>Sun, 12 Jan 2025 17:52:09 +0800</pubDate><guid>https://intervalrain.github.io/ai/5_1/</guid><description>Introduction to generalization</description></item><item><title>[AI] 迴歸問題</title><link>https://intervalrain.github.io/ai/4_3/</link><pubDate>Sun, 12 Jan 2025 16:39:58 +0800</pubDate><guid>https://intervalrain.github.io/ai/4_3/</guid><description>Regression problem</description></item><item><title>[AI] 多元分類問題</title><link>https://intervalrain.github.io/ai/4_2/</link><pubDate>Mon, 06 Jan 2025 22:58:45 +0800</pubDate><guid>https://intervalrain.github.io/ai/4_2/</guid><description>Multi categorical classification problem</description></item><item><title>[AI] 二元分類問題</title><link>https://intervalrain.github.io/ai/4_1/</link><pubDate>Thu, 02 Jan 2025 12:50:29 +0800</pubDate><guid>https://intervalrain.github.io/ai/4_1/</guid><description>Binary categorical classification problem</description></item><item><title>[AI] 3-8. 客製化 Training</title><link>https://intervalrain.github.io/ai/3_8/</link><pubDate>Fri, 27 Dec 2024 15:49:27 +0800</pubDate><guid>https://intervalrain.github.io/ai/3_8/</guid><description>How to customize training in Keras</description></item><item><title>[AI] 3-7. Keras API</title><link>https://intervalrain.github.io/ai/3_7/</link><pubDate>Fri, 20 Dec 2024 15:49:27 +0800</pubDate><guid>https://intervalrain.github.io/ai/3_7/</guid><description>A introduction to Keras API</description></item><item><title>[AI] 3-6. 實作線性分類器</title><link>https://intervalrain.github.io/ai/3_6/</link><pubDate>Thu, 19 Dec 2024 16:55:12 +0800</pubDate><guid>https://intervalrain.github.io/ai/3_6/</guid><description>A implementation of linear classification using Tensorflow library</description></item><item><title>[AI] 3-5. 邏輯斯迴歸(logistic regression)</title><link>https://intervalrain.github.io/ai/3_5/</link><pubDate>Thu, 19 Dec 2024 15:55:12 +0800</pubDate><guid>https://intervalrain.github.io/ai/3_5/</guid><description>The introduction to logistic regression</description></item><item><title>[AI] 3-4. 線性迴歸</title><link>https://intervalrain.github.io/ai/3_4/</link><pubDate>Thu, 19 Dec 2024 15:01:12 +0800</pubDate><guid>https://intervalrain.github.io/ai/3_4/</guid><description>The introduction to linear regression</description></item><item><title>[AI] 3-3. 使用 TensorFlow 與 Keras 函式庫</title><link>https://intervalrain.github.io/ai/3_3/</link><pubDate>Wed, 18 Dec 2024 16:56:55 +0800</pubDate><guid>https://intervalrain.github.io/ai/3_3/</guid><description>Usages of TensorFlow and Keras</description></item><item><title>[AI] 3-2. Keras 介紹</title><link>https://intervalrain.github.io/ai/3_2/</link><pubDate>Wed, 18 Dec 2024 16:45:50 +0800</pubDate><guid>https://intervalrain.github.io/ai/3_2/</guid><description>Introduction to the Keras</description></item><item><title>[AI] 3-1. TensorFlow 介紹</title><link>https://intervalrain.github.io/ai/3_1/</link><pubDate>Wed, 18 Dec 2024 16:40:40 +0800</pubDate><guid>https://intervalrain.github.io/ai/3_1/</guid><description>Introduction to the TensorFlow</description></item><item><title>[AI] 2-3. 優化器 Optimizer</title><link>https://intervalrain.github.io/ai/2_3/</link><pubDate>Mon, 16 Dec 2024 15:48:11 +0800</pubDate><guid>https://intervalrain.github.io/ai/2_3/</guid><description>The concept of optimizer in machine learning</description></item><item><title>[AI] 2-2. 張量 Tensor</title><link>https://intervalrain.github.io/ai/2_2/</link><pubDate>Sun, 15 Dec 2024 14:26:38 +0800</pubDate><guid>https://intervalrain.github.io/ai/2_2/</guid><description>The concept of tensor</description></item><item><title>[AI] 2-1. 初試神經網路-手寫辨識 mnist</title><link>https://intervalrain.github.io/ai/2_1/</link><pubDate>Sun, 15 Dec 2024 13:05:53 +0800</pubDate><guid>https://intervalrain.github.io/ai/2_1/</guid><description>First trial for neural network using mnist</description></item><item><title>[AI] 1-3. 深度學習的發展</title><link>https://intervalrain.github.io/ai/1_3/</link><pubDate>Fri, 06 Dec 2024 16:26:30 +0800</pubDate><guid>https://intervalrain.github.io/ai/1_3/</guid><description>The development of deep learning</description></item><item><title>[AI] 1-2. 機器學習的基礎技術</title><link>https://intervalrain.github.io/ai/1_2/</link><pubDate>Tue, 03 Dec 2024 15:42:52 +0800</pubDate><guid>https://intervalrain.github.io/ai/1_2/</guid><description>The fundamentals of Machine Learning</description></item><item><title>[AI] 1-1. 何謂人工智慧?</title><link>https://intervalrain.github.io/ai/1_1/</link><pubDate>Tue, 03 Dec 2024 15:39:11 +0800</pubDate><guid>https://intervalrain.github.io/ai/1_1/</guid><description>What is artificial intelligence?</description></item><item><title>[AI] Catalog</title><link>https://intervalrain.github.io/ai/</link><pubDate>Tue, 03 Dec 2024 15:30:11 +0800</pubDate><guid>https://intervalrain.github.io/ai/</guid><description>My learning note to AI</description></item><item><title>[IT] 初始 react project (TailwindCSS &amp; TypeScript &amp; Context)</title><link>https://intervalrain.github.io/it/init_react_project/</link><pubDate>Thu, 28 Nov 2024 16:33:39 +0800</pubDate><guid>https://intervalrain.github.io/it/init_react_project/</guid><description>&lt;ol&gt;
&lt;li&gt;建立專案&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npx create-react-app &lt;span style="color:#f92672"&gt;[&lt;/span&gt;project-name&lt;span style="color:#f92672"&gt;]&lt;/span&gt; --template typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd &lt;span style="color:#f92672"&gt;[&lt;/span&gt;project-name&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;安裝 TailwindCSS 及其相依套件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install -D tailwindcss postcss autoprefixer
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npx tailwindcss init -p
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;設定 tailwind.config.js：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/** @type {import(&amp;#39;tailwindcss&amp;#39;).Config} */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;module&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;exports&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;content&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./src/**/*.{js,jsx,ts,tsx}&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;theme&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;extend&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;plugins&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="4"&gt;
&lt;li&gt;在 src/index.css 中加入 Tailwind directives：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;@&lt;span style="color:#66d9ef"&gt;tailwind&lt;/span&gt; &lt;span style="color:#f92672"&gt;base&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;@&lt;span style="color:#66d9ef"&gt;tailwind&lt;/span&gt; &lt;span style="color:#f92672"&gt;components&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;@&lt;span style="color:#66d9ef"&gt;tailwind&lt;/span&gt; &lt;span style="color:#f92672"&gt;utilities&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[Diary] 自由的第二天</title><link>https://intervalrain.github.io/diary/20241126/</link><pubDate>Tue, 26 Nov 2024 22:45:35 +0800</pubDate><guid>https://intervalrain.github.io/diary/20241126/</guid><description>The second day of freelancing life</description></item><item><title>[Diary] 成為 freelancer 的第一天</title><link>https://intervalrain.github.io/diary/20241125/</link><pubDate>Mon, 25 Nov 2024 16:22:30 +0800</pubDate><guid>https://intervalrain.github.io/diary/20241125/</guid><description>The first day of being the freelancer</description></item><item><title>About me</title><link>https://intervalrain.github.io/aboutme/</link><pubDate>Sun, 24 Nov 2024 17:54:48 +0800</pubDate><guid>https://intervalrain.github.io/aboutme/</guid><description>Who am I?</description></item><item><title>[IT] 拯救 react</title><link>https://intervalrain.github.io/it/save_react/</link><pubDate>Fri, 16 Aug 2024 01:44:44 +0800</pubDate><guid>https://intervalrain.github.io/it/save_react/</guid><description>&lt;ol&gt;
&lt;li&gt;安裝個離線版&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;npm i - g create-react-app-offline
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="2"&gt;
&lt;li&gt;改用 &lt;code&gt;crao&lt;/code&gt; 初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;crao -n my-app
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="3"&gt;
&lt;li&gt;如果 node_modules 沒有安裝正常&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;rm -rf node_modules
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="4"&gt;
&lt;li&gt;重裝 node_modules&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="5"&gt;
&lt;li&gt;重啟 react&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>基於 Ollama 和 LangChain 的 Naive RAG 實作(搭配 streamlit UI)</title><link>https://intervalrain.github.io/genai/naiverag/</link><pubDate>Tue, 30 Jul 2024 23:55:29 +0800</pubDate><guid>https://intervalrain.github.io/genai/naiverag/</guid><description>本文將介紹一個使用 Streamlit、Ollama 和 LangChain 構建的文件查詢系統。</description></item><item><title>[Swift] UI Challenge</title><link>https://intervalrain.github.io/swift/ui_challenge/</link><pubDate>Fri, 21 Jun 2024 01:19:02 +0800</pubDate><guid>https://intervalrain.github.io/swift/ui_challenge/</guid><description>UI Challenge for iOS View on IPhone</description></item><item><title>[IT] React + .Net</title><link>https://intervalrain.github.io/it/csharp-react/</link><pubDate>Tue, 11 Jun 2024 22:00:23 +0800</pubDate><guid>https://intervalrain.github.io/it/csharp-react/</guid><description>&lt;h1 id="react--net"&gt;React + .Net&lt;/h1&gt;
&lt;h2 id="一環境設置-setup"&gt;一、環境設置 Setup&lt;/h2&gt;
&lt;h3 id="1-行前準備-prerequisites"&gt;1. 行前準備 Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安裝 Node.js 和 npm&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node -v
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm -v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;安裝 .NET SDK&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;dotnet --version
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;用 vs code 下載 &lt;code&gt;ES7+ React/Redux/React-Native snippets&lt;/code&gt;
因為 &lt;code&gt;rafce&lt;/code&gt; 很好用, 相當於, typescript 則是 &lt;code&gt;tsrafce&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;React&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;index&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;div&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;index&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;/div&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;index&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="2-創建-react"&gt;2. 創建 React&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安裝 react&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install create-react-app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;創建新的 react app (typescript)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--template typescript&lt;/code&gt; 可指定使用 typescript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npx create-react-app &lt;span style="color:#f92672"&gt;{&lt;/span&gt;project&lt;span style="color:#f92672"&gt;}&lt;/span&gt; --template typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd &lt;span style="color:#f92672"&gt;{&lt;/span&gt;project&lt;span style="color:#f92672"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;必要時可能要初始化一個新的 react 項目，確保版本是匹配的。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;yarnpkg add --exact react-dom react-scripts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="3-基本結構"&gt;3. 基本結構&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;函數式元件(Functional Component):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-tsx" data-lang="tsx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Card&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;React.FC&lt;/span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;Props&lt;/span&gt;&amp;gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;companyName&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ticker&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;price&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Props&lt;/span&gt;)&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;JSX&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Element&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; { ... }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Card&lt;/code&gt; 是一個函數式元件，使用 TypeScript 和 React。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;React.FC&amp;lt;Props&amp;gt;&lt;/code&gt; 指定這個元件是接受 &lt;code&gt;Props&lt;/code&gt; 作為參數的 React 函數式元件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;({ companyName, ticker, price })&lt;/code&gt; 是從 &lt;code&gt;Props&lt;/code&gt; 解構的屬性，這些屬性將會被傳入元件&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;JSX 標籤:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-tsx" data-lang="tsx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;className&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;card&amp;#39;&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;這是元件返回的 JSX，它描述了元件應該如何渲染。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="4-state"&gt;4. State&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-tsx" data-lang="tsx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;React&lt;/span&gt;, { &lt;span style="color:#a6e22e"&gt;useState&lt;/span&gt; } &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Props&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Button&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;React.FC&lt;/span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;Props&lt;/span&gt;&amp;gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;props&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;Props&lt;/span&gt;)&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;JSX&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Element&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; [&lt;span style="color:#a6e22e"&gt;count&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;setCount&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;useState&lt;/span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;number&lt;/span&gt;&amp;gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;onClick&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;any&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;setCount&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;count&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;button&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;onClick&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;{(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;onClick&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;)}&amp;gt;&lt;span style="color:#a6e22e"&gt;Click&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;me&lt;/span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;p&lt;/span&gt;&amp;gt;&lt;span style="color:#a6e22e"&gt;You&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;clicked&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;count&lt;/span&gt;} &lt;span style="color:#a6e22e"&gt;times&lt;/span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;/&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Button&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;引入 React 和 useState Hook:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-tsx" data-lang="tsx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;React&lt;/span&gt;, { &lt;span style="color:#a6e22e"&gt;useState&lt;/span&gt; } &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;從 React 包中引入 &lt;code&gt;useState&lt;/code&gt; Hook，用於函數式元件中添加狀態。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;使用 &lt;code&gt;useState&lt;/code&gt; Hook 定義狀態&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-tsx" data-lang="tsx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; [&lt;span style="color:#a6e22e"&gt;count&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;setCount&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;useState&lt;/span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;number&lt;/span&gt;&amp;gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;定義一個名為 &lt;code&gt;count&lt;/code&gt; 的狀態變量，初始值為 0。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setCount&lt;/code&gt; 是用來更新 &lt;code&gt;count&lt;/code&gt; 的函數。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useState&amp;lt;number&amp;gt;(0)&lt;/code&gt; 指定 &lt;code&gt;count&lt;/code&gt; 的類型為 &lt;code&gt;number&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;定義 &lt;code&gt;onClick&lt;/code&gt; 事件處理函數:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-tsx" data-lang="tsx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;onClick&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;any&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;setCount&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;count&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onClick&lt;/code&gt; 是一個事件處理函數，接受一個事件參數 &lt;code&gt;e&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;每當按鈕被點擊時， &lt;code&gt;count&lt;/code&gt; 會加 1，並且會在控制台輸出事件 &lt;code&gt;e&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any&lt;/code&gt; 也可被寫成 &lt;code&gt;MounthEvent&lt;/code&gt; 或 &lt;code&gt;SyntheticEvent&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>[IT] ApiController Atrribute</title><link>https://intervalrain.github.io/it/apicontroller/</link><pubDate>Sun, 09 Jun 2024 20:27:03 +0800</pubDate><guid>https://intervalrain.github.io/it/apicontroller/</guid><description>&lt;h1 id="apicontroller-atrribute"&gt;ApiController Atrribute&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;當我在 API 專案中建立新的 controller 時，它會自帶一個 [ApiController] 屬性的控制器類別，而這個標籤的作用為何呢？&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;[ApiController]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestController&lt;/span&gt; : ControllerBase
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="1-自動-http-400-回應"&gt;1. 自動 HTTP 400 回應&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;它會自動產生一個行為過濾器(action filter)，當 &lt;code&gt;ModelState.IsValid&lt;/code&gt; 為 &lt;code&gt;false&lt;/code&gt; 時，自動回傳 400 Response。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-綁定來源參數推斷"&gt;2. 綁定來源參數推斷&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以更改模型綁定的約定，例如，&lt;code&gt;[FromBody]&lt;/code&gt; 是針對複雜類型參數推斷的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-multiform-data-請求推理"&gt;3. Multi/form-data 請求推理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;對於標示 &lt;code&gt;[FromForm]&lt;/code&gt; 的參數，推斷 Content-Type 為 &lt;code&gt;multipart/form-data&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="4-屬性路由要求"&gt;4. 屬性路由要求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;強制要求所有操作都必須通過屬性路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;style type="text/css"&gt;.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}&lt;/style&gt;
&lt;div&gt;&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg"&gt;&lt;symbol id="tip-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/&gt;&lt;/symbol&gt;&lt;symbol id="note-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/&gt;&lt;/symbol&gt;&lt;symbol id="warning-notice" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/&gt;&lt;/symbol&gt;&lt;symbol id="info-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/&gt;&lt;/symbol&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class="notice info" &gt;
&lt;p class="first notice-title"&gt;&lt;span class="icon-notice baseline"&gt;&lt;svg&gt;&lt;use href="#info-notice"&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/p&gt;</description></item><item><title>[IT] HTML + CSS</title><link>https://intervalrain.github.io/it/html/</link><pubDate>Sun, 09 Jun 2024 02:10:53 +0800</pubDate><guid>https://intervalrain.github.io/it/html/</guid><description>&lt;ul&gt;
&lt;li&gt;可搭配程式碼服用：
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/intervalrain/htmls/tree/main/tutorial"&gt;https://github.com/intervalrain/htmls/tree/main/tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用者文檔：
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/"&gt;W3C 官網&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/"&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/"&gt;W3School&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="一html"&gt;一、HTML&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;全名：超文本標記語言(HyperText Markup Language, HTML)&lt;/li&gt;
&lt;li&gt;現最常使用的是 HTML5，由 W3C &amp;amp; WHATWG 所制定。&lt;/li&gt;
&lt;li&gt;將檔案設置為 &lt;code&gt;.html&lt;/code&gt; 即可建立一個 html 檔案。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="二html-標籤"&gt;二、HTML 標籤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;標籤&lt;/strong&gt;又稱&lt;strong&gt;元素&lt;/strong&gt;，是 HTML 的基本組成單位。&lt;/li&gt;
&lt;li&gt;標籤分為: &lt;strong&gt;雙標籤&lt;/strong&gt;和&lt;strong&gt;單標籤&lt;/strong&gt;(絕大多數都是雙標籤)。&lt;/li&gt;
&lt;li&gt;標籤不區分大小寫，但推薦小寫，因為小寫更規範&lt;/li&gt;
&lt;li&gt;雙標籤，&lt;code&gt;&amp;lt;標籤名&amp;gt;標籤體&amp;lt;/標籤名&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;marquee&lt;/span&gt;&amp;gt;Hello World&amp;lt;/&lt;span style="color:#f92672"&gt;marquee&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="5"&gt;
&lt;li&gt;單標籤，&lt;code&gt;&amp;lt;標籤名/&amp;gt;&lt;/code&gt;，&lt;code&gt;/&lt;/code&gt;可省略&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="6"&gt;
&lt;li&gt;標籤之間的關係：並列關係、嵌套關係，可以使用 &lt;code&gt;tab&lt;/code&gt; 鍵進行縮進。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;marquee&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Hello World
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;marquee&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="三html-標籤屬性"&gt;三、HTML 標籤屬性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;用於給標籤提供附加訊息。&lt;/li&gt;
&lt;li&gt;可以寫在: &lt;strong&gt;起始標籤&lt;/strong&gt;或&lt;strong&gt;單標籤&lt;/strong&gt;中，&lt;code&gt;&amp;lt;標籤名 屬性名=&amp;quot;屬性值&amp;quot; 屬性名=&amp;quot;屬性值&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;marquee&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;loop&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bgcolor&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;&amp;gt;Hello World&amp;lt;/&lt;span style="color:#f92672"&gt;marquee&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;有些特殊的屬性，沒有屬性名，只有屬性值：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;disabled&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="4"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;style type="text/css"&gt;.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}&lt;/style&gt;
&lt;div&gt;&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg"&gt;&lt;symbol id="tip-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/&gt;&lt;/symbol&gt;&lt;symbol id="note-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/&gt;&lt;/symbol&gt;&lt;symbol id="warning-notice" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/&gt;&lt;/symbol&gt;&lt;symbol id="info-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/&gt;&lt;/symbol&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class="notice warning" &gt;
&lt;p class="first notice-title"&gt;&lt;span class="icon-notice baseline"&gt;&lt;svg&gt;&lt;use href="#warning-notice"&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/p&gt;</description></item><item><title>[IT] EntityFramework Commands</title><link>https://intervalrain.github.io/it/entityframework_command/</link><pubDate>Sun, 31 Mar 2024 14:37:44 +0800</pubDate><guid>https://intervalrain.github.io/it/entityframework_command/</guid><description>Some commands to trigger migration operations</description></item><item><title>[System Design] 系統設計概念與資源 System Design and Resources</title><link>https://intervalrain.github.io/systemdesign/system_design_menu/</link><pubDate>Tue, 26 Mar 2024 22:35:38 +0800</pubDate><guid>https://intervalrain.github.io/systemdesign/system_design_menu/</guid><description>學習系統設計概念的資源</description></item><item><title>[IT] 用 C# 建置 Clean Architecture 專案</title><link>https://intervalrain.github.io/it/ca_config/</link><pubDate>Sat, 09 Mar 2024 13:59:22 +0800</pubDate><guid>https://intervalrain.github.io/it/ca_config/</guid><description>&lt;h1 id="configure-c-solution-step-by-step"&gt;Configure C# Solution step by step&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;開啟 Terminal&lt;/li&gt;
&lt;li&gt;新增解決方案 &lt;code&gt;dontet new sln -o MySln&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;移至方案目錄 &lt;code&gt;cd MySln&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;根據解決方案 hierarchy 建構專案
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet new webapi -o MySln.Api&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet new classlib -o MySln.Application&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet new classlib -o MySln.Domain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet new classlib -o MySln.Infrastructure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet new classlib -o MySln.Contracts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;將所有專案加進解決方案
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; proj in &lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;ls -r **/*.csproj&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dotnet sln add $proj
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;建立專案之間的 dependency
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet add MySln.Api reference MySln.Application MySln.Infrastructure MySln.Contracts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet add MySln.Infrastructure reference MySln.Application&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet add MySln.Application reference MySln.Domain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>[IT] 使用 Clean Architecture + DDD 建置 Restful API</title><link>https://intervalrain.github.io/it/clean_arch_configuration/</link><pubDate>Mon, 26 Feb 2024 15:03:15 +0800</pubDate><guid>https://intervalrain.github.io/it/clean_arch_configuration/</guid><description>&lt;h1 id="程式碼"&gt;程式碼&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/intervalrain/webapi_ca/"&gt;https://github.com/intervalrain/webapi_ca/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="正文"&gt;正文&lt;/h1&gt;
&lt;h2 id="建置-solution"&gt;建置 Solution&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先先參考 Clean Architecture 最經典的同心圓，來確定我們需要將我們的解決方案做哪些分層：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我將使用 Restful API 做為我們 I/O (Presentation Layer)&lt;/li&gt;
&lt;li&gt;並且我需要配備身份驗證的機制 (Presentation Layer)&lt;/li&gt;
&lt;li&gt;我使用 PostgresDB 作為我的 (Infrastructure Layer)&lt;/li&gt;
&lt;li&gt;我的核心商業邏輯 (Application / Domain Layer)
&lt;img src="https://herbertograca.files.wordpress.com/2017/04/cleanarchitecture-5c6d7ec787d447a81b708b73abba1680.jpg" width="480"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創建專案&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sln&lt;/span&gt; -&lt;span style="color:#a6e22e"&gt;o&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;進入專案所在的資料夾&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;cd&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;根據預先的分層建立專案資料夾，並且使用 dotnet 指令建立相對應的專案類型。
&lt;ul&gt;
&lt;li&gt;Api &amp;ndash;&amp;gt; WebAPI&lt;/li&gt;
&lt;li&gt;Infrastructure &amp;ndash;&amp;gt; classlib&lt;/li&gt;
&lt;li&gt;Contracts &amp;ndash;&amp;gt; classlib&lt;/li&gt;
&lt;li&gt;Application &amp;ndash;&amp;gt; classlib&lt;/li&gt;
&lt;li&gt;Domain &amp;ndash;&amp;gt; classlib&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;webapi&lt;/span&gt; -&lt;span style="color:#a6e22e"&gt;o&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;classlib&lt;/span&gt; -&lt;span style="color:#a6e22e"&gt;o&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contracts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;classlib&lt;/span&gt; -&lt;span style="color:#a6e22e"&gt;o&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Infrastructure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;classlib&lt;/span&gt; -&lt;span style="color:#a6e22e"&gt;o&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Application&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;classlib&lt;/span&gt; -&lt;span style="color:#a6e22e"&gt;o&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Domain&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接著我們需要把產生的專案資料夾，加入到我們的 Solution。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sln&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sln&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Application&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sln&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contracts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sln&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Domain&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sln&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Infrastructure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接下來按照 Clean Architecture 的依賴原則來設定 dependency，依我的專案來說依賴方向如下。
&lt;div class="mermaid"&gt;
graph TD;
Api--&gt;Contracts;
Api--&gt;Application;
Infrastructure--&gt;Application
Application--&gt;Domain
Api-.-&gt;Infrastructure
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Api&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;reference&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contracts&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Application&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Infrastructure&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;reference&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Application&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Application&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;reference&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Domain&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Api&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;reference&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Infrastructure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;至此，已經完成了基本的 hierarchy 建置，接下來要為 Restful Client 做準備。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="login-authentication"&gt;Login Authentication&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作為驗證的需要，我們需要以下三種驗證檔案，包含兩個 Request 與一個 Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;record&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;RegisterRequest&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; FirstName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; LastName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Email,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Password
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;record&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LoginRequest&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Email,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Password
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;record&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AuthenticationResponse&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Guid Id,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; FirstName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; LastName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Email,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; token
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;到 Controller 去設置註冊與登入的兩個路由，並且將之後的服務介面預先注入到其中。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;[ApiController]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;[Route(&amp;#34;auth&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AuthenticationController&lt;/span&gt; : ControllerBase
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt; [HttpPost(&amp;#34;register&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IActionResult Register(RegisterRequest request)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; Ok(request);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt; [HttpPost(&amp;#34;login&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IActionResult Login(LoginRequest request)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; Ok(request);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接著我們創建 Application 中的服務，注意到因為 Application 不依賴於 Contracts，故我們這邊需要創建自己的 DataModel&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;record&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AuthenticationResult&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Guid Id,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; FirstName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; LastName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Email,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Token
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接著我們定義出 Application 的 Service。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IAuthenticationService&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; AuthenticationResult Register(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; firstName, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; lastName, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; email, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; password);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; AuthenticationResult Login(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; email, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; password);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;定義好我們的 service interface 之後，就可以到 Presentation 中將我們的 service 注入到 presentation 之中。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;[ApiController]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;[Route(&amp;#34;auth&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AuthenticationController&lt;/span&gt; : ControllerBase
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;readonly&lt;/span&gt; IAuthenticationService _authenticationService;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; AuthenticationController(IAuthenticationService authenticationService)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _authenticationService = authenticationService;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt; [HttpPost(&amp;#34;register&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IActionResult Register(RegisterRequest request)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; authResult = _authenticationService.Register(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; request.FirstName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; request.LastName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; request.Email,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; request.Password);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; response = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; AuthenticationResponse(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; authResult.Id,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; authResult.FirstName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; authResult.LastName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; authResult.Email,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; authResult.Token);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; Ok(response);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt; [HttpPost(&amp;#34;login&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IActionResult Login(LoginRequest request)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; authResult = _authenticationService.Login(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; request.Email,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; request.Password);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; response = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; AuthenticationResponse(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; authResult.Id,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; authResult.FirstName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; authResult.LastName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; authResult.Email,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; authResult.Token);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; Ok(response);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;我們已經定義好我們的 service 後，便可以到 presentation 的 Program(或是其它入口點，如 Startup.cs 或 MauiProgram.cs)，做 service 的依賴注入。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; BuberDinner.Application.Services.Authentication;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; builder = WebApplication.CreateBuilder(args);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; builder.Services.AddScoped&amp;lt;IAuthenticationService, AuthenticationService&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; builder.Services.AddControllers();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; builder.Services.AddEndpointsApiExplorer();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; builder.Services.AddSwaggerGen();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; app = builder.Build();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app.UseSwagger();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app.UseSwaggerUI();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app.UseHttpsRedirection();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app.MapControllers();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app.Run();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;最後，我們先實作一個暫時的 Service，來確認 Api 是可以作業的。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AuthenticationService&lt;/span&gt; : IAuthenticationService
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; AuthenticationResult Register(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; firstName, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; lastName, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; email, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; password)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; AuthenticationResult(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Guid.NewGuid(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; firstName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; lastName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; email,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;token&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; AuthenticationResult Login(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; email, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; password)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; AuthenticationResult(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Guid.NewGuid(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;firstName&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;lastName&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; email,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;token&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;執行 &lt;code&gt;dotnet run --project .\Mysln.Api\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 Swagger 中測試我們實作的 &lt;code&gt;register&lt;/code&gt; 與 &lt;code&gt;login&lt;/code&gt; API，如果正常工作，會回傳 StatusCode: 200。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dependency-injection"&gt;Dependency Injection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我們想要每一層都可以自己管理自己的注入，此時我們需要引入 &lt;code&gt;Microsoft.Extensions.DependencyInjection&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;接下來實作 Application 的 DependencyInjection。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DependencyInjection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; IServiceCollection AddApllication(&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt; IServiceCollection services)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; services.AddScope&amp;lt;IAuthenticationService, AuthenticationService&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; services;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接下來實作 Infrastructure 的 DependencyInjection。(暫時還沒有注入 repository)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DependencyInjection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; IServiceCollection AddInfrastructure(&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt; IServiceCollection services)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 未來要注入 repositories&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; services;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接下來我們可以改寫 &lt;code&gt;Program.cs&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; BuberDinner.Application;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; BuberDinner.Infrastructure;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; builder = WebApplication.CreateBuilder(args);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; builder.Services
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .AddApplication()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .AddInfrastructure();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; builder.Services.AddControllers();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; builder.Services.AddEndpointsApiExplorer();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; builder.Services.AddSwaggerGen();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; app = builder.Build();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app.UseSwagger();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app.UseSwaggerUI();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app.UseHttpsRedirection();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app.MapControllers();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app.Run();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="實作-jwt-token-generator"&gt;實作 JWT Token Generator&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首先先在 Application Layer 創建一個 interface 來做依賴反轉&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IJwtTokenGenerator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; GenerateToken(Guid userId, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; firstName, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; lastName);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接著我們到 Infrastructure Layer 來實作我們的 JwtTokenGenerator。&lt;/li&gt;
&lt;li&gt;首先我們需要 &lt;code&gt;System.IdentityModel.Tokens.Jwt&lt;/code&gt; 這個 Package。&lt;/li&gt;
&lt;li&gt;接著我們實作 &lt;code&gt;JwtTokenGenerator&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;JwtTokenGenerator&lt;/span&gt; : IJwtTokenGenerator
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; GenerateToken(Guid userId, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; firstName, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; lastName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; signingCredentials = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; SigningCredentials(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; SymmetricSecurityKey(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Encoding.UTF8.GetBytes(&lt;span style="color:#e6db74"&gt;&amp;#34;super-secret-key&amp;#34;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SecurityAlgorithms.HmacSha256);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; claims = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;[]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Claim(JwtRegisteredClaimNames.Sub, userId.ToString()),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Claim(JwtRegisteredClaimNames.GivenName, firstName),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Claim(JwtRegisteredClaimNames.FamilyName, lastName),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; securityToken = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; JwtSecurityToken(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; issuer: &lt;span style="color:#e6db74"&gt;&amp;#34;Mysln&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; expires: DateTime.Now.AddDays(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; claims: claims,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; signingCredentials: signingCredentials);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; JwtSecurityTokenHandler().WriteToken(securityToken);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接著我們將之注入到服務中，即大功告成了。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DependencyInjection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; IServiceCollection AddInfrastructure(&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt; IServiceCollection services)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; services.AddSingleton&amp;lt;IJwtTokenGenerator, JwtTokenGenerator&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; services;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="使用-options-pattern-注入-jwt-settings"&gt;使用 Options Pattern 注入 JWT Settings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;接下來我們要使用 Options Pattern 將 JWT Settings 注入到 JwtTokenGenerator 中。&lt;/li&gt;
&lt;li&gt;首先我們先到 &lt;code&gt;Mysln.Api&lt;/code&gt; 的 &lt;code&gt;appsettings.json&lt;/code&gt; 中將 options 設置完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Logging&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;LogLevel&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Default&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Information&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Microsoft.AspNetCore&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Warning&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;AllowedHosts&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;*&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;JwtSettings&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Secret&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;super-secret-key&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;ExpiryMinutes&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;60&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Issuer&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Mysln&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Audience:&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Mysln&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;由於我們要使用 Options Pattern，我們需要改寫我們的 &lt;code&gt;Program.cs&lt;/code&gt;，並且將 ConfigurationManager 注入到 Infrastructure 的 DependencyInjection。&lt;/li&gt;
&lt;li&gt;為此我們需要引入套件 &lt;code&gt;Microsoft.Extensions.Configuration&lt;/code&gt; 與 &lt;code&gt;Microsoft.Extensions.Options.ConfigurationExtensions&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;並且我們需要創建一個 Model。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;JwtSettings&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; SectionName = &lt;span style="color:#e6db74"&gt;&amp;#34;JwtSettings&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Secret { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;init&lt;/span&gt;; } = &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;!;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; ExpiryMinutes { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;init&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Issuer { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;init&lt;/span&gt;; } = &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;!;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Audience { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;init&lt;/span&gt;; } = &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;!;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Program.cs&lt;/code&gt; 需改寫成：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;builder.Services
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .AddApplication()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .AddInfrastructure(builder.Configuration);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;將 &lt;code&gt;DependencyInjection&lt;/code&gt; 改寫成：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DependencyInjection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; IServiceCollection AddInfrastructure(&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt; IServiceCollection services, ConfigurationManager configuration)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; services.Configure&amp;lt;JwtSettings&amp;gt;(configuration.GetSection(JwtSettings.SectionName));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; services.AddSingleton&amp;lt;IJwtTokenGenerator, JwtTokenGenerator&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; services.AddSingleton&amp;lt;IDateTimeProvider, DateTimeProvider&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; services;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接下來，我們可以把 JwtTokenGenerator 改寫成：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;JwtTokenGenerator&lt;/span&gt; : IJwtTokenGenerator
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;readonly&lt;/span&gt; JwtSettings _jwtSettings;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;readonly&lt;/span&gt; IDateTimeProvider _dateTimeProvider;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; JwtTokenGenerator(IDateTimeProvider dateTimeProvider, IOptions&amp;lt;JwtSettings&amp;gt; jwtOptions)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _dateTimeProvider = dateTimeProvider;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _jwtSettings = jwtOptions.Value;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; GenerateToken(Guid userId, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; firstName, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; lastName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; signingCredentials = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; SigningCredentials(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; SymmetricSecurityKey(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Encoding.UTF8.GetBytes(_jwtSettings.Secret)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SecurityAlgorithms.HmacSha256);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; claims = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;[]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Claim(JwtRegisteredClaimNames.Sub, userId.ToString()),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Claim(JwtRegisteredClaimNames.GivenName, firstName),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Claim(JwtRegisteredClaimNames.FamilyName, lastName),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; securityToken = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; JwtSecurityToken(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; issuer: _jwtSettings.Issuer,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; audience: _jwtSettings.Audience,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; expires: _dateTimeProvider.UtcNow.AddMinutes(_jwtSettings.ExpiryMinutes),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; claims: claims,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; signingCredentials: signingCredentials);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; JwtSecurityTokenHandler().WriteToken(securityToken);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;以上就大功告成了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="使用-dotnet-user-secrets-指令"&gt;使用 &lt;code&gt;dotnet user-secrets&lt;/code&gt; 指令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果不想要將 Options 中的 secret 儲存在程式(appsettings.json)裡面，可以利用 &lt;code&gt;dotnet user-secrets&lt;/code&gt; 將 secret 儲存於環境變數裡面。&lt;/li&gt;
&lt;li&gt;透過執行以下的指令來初始化專案的 &lt;code&gt;UserSecretsId&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;user&lt;/span&gt;-&lt;span style="color:#a6e22e"&gt;secrets&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;init&lt;/span&gt; --&lt;span style="color:#a6e22e"&gt;project&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接著將 &lt;code&gt;UserSecretsId&lt;/code&gt; 綁定到我們專案的 &lt;code&gt;JwtSettings:Secret&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;user&lt;/span&gt;-&lt;span style="color:#a6e22e"&gt;secrets&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt; --&lt;span style="color:#a6e22e"&gt;project&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Api&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;JwtSettings:Secret&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;日後可以經由以下指令查詢。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;dotnet&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;user&lt;/span&gt;-&lt;span style="color:#a6e22e"&gt;secrets&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;list&lt;/span&gt; --&lt;span style="color:#a6e22e"&gt;project&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Mysln&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Api&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="domain-model"&gt;Domain Model&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先建立一個簡單的 Domain Model(Entity)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;User&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; Guid Id { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; } = Guid.NewGuid();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; FirstName { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; } = &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;!;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; LastName { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; } = &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;!;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Email { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; } = &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;!;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Password { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; } = &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;!;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="repository-pattern"&gt;Repository Pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 Application Layer 建立 IRepository&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IUserRepository&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; User? GetUserByEmail(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; email);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; Add(User user);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;將 IRepository 注入 Application 的 Service&lt;/li&gt;
&lt;li&gt;並用查改存推改寫 Service&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AuthenticationService&lt;/span&gt; : IAuthenticationService
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;readonly&lt;/span&gt; IJwtTokenGenerator _jwtTokenGenerator;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;readonly&lt;/span&gt; IUserRepository _userRepository;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; AuthenticationService(IJwtTokenGenerator jwtTokenGenerator, IUserRepository userRepository)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _jwtTokenGenerator = jwtTokenGenerator;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _userRepository = userRepository;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; AuthenticationResult Register(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; firstName, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; lastName, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; email, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; password)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 查&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (_userRepository.GetUserByEmail(email) &lt;span style="color:#66d9ef"&gt;is&lt;/span&gt; not &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;throw&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Exception(&lt;span style="color:#e6db74"&gt;&amp;#34;User with given email already exists.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; user = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; User
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FirstName = firstName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; LastName = lastName,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Email = email,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Password = password
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _userRepository.Add(user);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 推&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; token = _jwtTokenGenerator.GenerateToken(user.Id, firstName, lastName);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; AuthenticationResult(user.Id, firstName, lastName, email, token);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; AuthenticationResult Login(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; email, &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; password)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 查&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (_userRepository.GetUserByEmail(email) &lt;span style="color:#66d9ef"&gt;is&lt;/span&gt; not User user)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;throw&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Exception(&lt;span style="color:#e6db74"&gt;&amp;#34;User with given email does not exist.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (user.Password != password)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;throw&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Exception(&lt;span style="color:#e6db74"&gt;&amp;#34;Invalid password.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; token = _jwtTokenGenerator.GenerateToken(user.Id, user.FirstName, user.LastName);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; AuthenticationResult(user.Id, user.FirstName, user.LastName, email, token);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接著我們在 Infrastructure Layer 實作我們的 repository，我們暫時先不接資料庫，所以先做一個 InMemory 版本的 repository 來做測試。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;UserRepository&lt;/span&gt; : IUserRepository
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;readonly&lt;/span&gt; List&amp;lt;User&amp;gt; _users = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; Add(User user)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _users.Add(user);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; User? GetUserByEmail(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; email)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; _users.SingleOrDefault(u =&amp;gt; u.Email.Equals(email));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;實作完需要透過 DependencyInjection 注入到我們的 Service Container 內。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DependencyInjection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; IServiceCollection AddInfrastructure(&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt; IServiceCollection services, ConfigurationManager configuration)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; services.Configure&amp;lt;JwtSettings&amp;gt;(configuration.GetSection(JwtSettings.SectionName));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; services.AddSingleton&amp;lt;IJwtTokenGenerator, JwtTokenGenerator&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; services.AddSingleton&amp;lt;IDateTimeProvider, DateTimeProvider&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; services.AddSingleton&amp;lt;IUserRepository, UserRepository&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; services;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;至此，我們已經完成了一個簡單的身份認證的 API。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>[ML] 選擇 loss function/ optimizer/ metrics</title><link>https://intervalrain.github.io/ml/optimizer/</link><pubDate>Wed, 14 Feb 2024 15:39:25 +0800</pubDate><guid>https://intervalrain.github.io/ml/optimizer/</guid><description>Optimizer</description></item><item><title>[IT] .NET Maui</title><link>https://intervalrain.github.io/it/maui/</link><pubDate>Sun, 28 Jan 2024 13:30:34 +0800</pubDate><guid>https://intervalrain.github.io/it/maui/</guid><description>&lt;h1 id="net-maui"&gt;.NET Maui&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;.NET Maui 是一個跨平台的桌面與手機應用開發框架，它支援 iOS、Android、macOS、Windows。&lt;/li&gt;
&lt;li&gt;不同於 Xamarin，.NET Maui 只需要一個專案便可以導向不同的平台。
&lt;img src="https://intervalrain.github.io/IT/img/maui.jpg" width="300"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="架構"&gt;架構&lt;/h2&gt;
&lt;img src="https://intervalrain.github.io/IT/img/maui_hierarchy.jpg" width="300"&gt;
&lt;ul&gt;
&lt;li&gt;一個 .NET Maui 專案底下，預設會有幾個資料夾與檔案，其關係如下圖：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/Platforms&lt;/code&gt; 底下的各個資料夾為不同平台的入口，不同的平台各有一個 &lt;code&gt;Program.cs&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;各個 &lt;code&gt;Program.cs&lt;/code&gt; 內又會透過注入該 namespace 底下的 &lt;code&gt;AppDelegate&lt;/code&gt; ，將入口指向 &lt;code&gt;MauiProgram&lt;/code&gt; 的 &lt;code&gt;CreateMauiApp()&lt;/code&gt;，就此將不同平台路由到 &lt;code&gt;MauiProgram.cs&lt;/code&gt; 這個統一的入口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; Main(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; UIApplication.Main(args, &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;typeof&lt;/span&gt;(AppDelegate));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;[Register(&amp;#34;AppDelegate&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AppDelegate&lt;/span&gt; : MauiUIApplicationDelegate
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; MauiApp CreateMauiApp() =&amp;gt; MauiProgram.CreateMauiApp();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;關係如下圖：
&lt;div class="mermaid"&gt;
graph TD;
iOS--&gt;MauiProgram.cs;
Android--&gt;MauiProgram.cs;
Windows--&gt;MauiProgram.cs;
macOS--&gt;MauiProgram.cs;
MauiProgram.cs--&gt;App;
App--&gt;AppShell;
AppShell-.-&gt;Page1;
AppShell-.-&gt;Page2;
AppShell-.-&gt;Page3;
AppShell-.-&gt;Page4;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MauiProgram&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; MauiApp CreateMauiApp()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; builder = MauiApp.CreateBuilder();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; builder
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .UseMauiApp&amp;lt;App&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .ConfigureFonts(fonts =&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fonts.AddFont(&lt;span style="color:#e6db74"&gt;&amp;#34;OpenSans-Regular.ttf&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;OpenSansRegular&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fonts.AddFont(&lt;span style="color:#e6db74"&gt;&amp;#34;OpenSans-Semibold.ttf&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;OpenSansSemibold&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; builder.Build();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;partial&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;App&lt;/span&gt; : Application
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; App()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; InitializeComponent();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; MainPage = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; AppShell();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;從上面兩段程式 &lt;code&gt;MauiProgram.cs&lt;/code&gt; 與 &lt;code&gt;App.xaml.cs&lt;/code&gt; 可以看出，這個統一的進入點會開啟 App，並將 &lt;code&gt;AppShell&lt;/code&gt; 作為 MainPage 開放。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="router"&gt;Router&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在此可以發現 &lt;code&gt;AppShell&lt;/code&gt; 作為一個 Controller 的功能，用來引導頁面的路由。&lt;/li&gt;
&lt;li&gt;我們可以透過 &lt;code&gt;RegisterRoute&lt;/code&gt; 來注冊要顯示的頁面。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;partial&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AppShell&lt;/span&gt; : Shell
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; AppShell()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; InitializeComponent();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Routing.RegisterRoute(nameof(Page1), &lt;span style="color:#66d9ef"&gt;typeof&lt;/span&gt;(Page1));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Routing.RegisterRoute(nameof(Page2), &lt;span style="color:#66d9ef"&gt;typeof&lt;/span&gt;(Page2));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Routing.RegisterRoute(nameof(Page3), &lt;span style="color:#66d9ef"&gt;typeof&lt;/span&gt;(Page3));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id="xaml"&gt;xaml&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;上述的頁面可以透過新增 &lt;code&gt;xaml&lt;/code&gt; 檔來建立：&lt;/li&gt;
&lt;li&gt;以下為一個 &lt;code&gt;xaml&lt;/code&gt; 檔的 sample
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x:class=&amp;quot;MoneyTrack.AppShell&amp;quot;&lt;/code&gt; 表示該檔案的路徑為 &lt;code&gt;MoneyTrack.AppShell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mlns&lt;/code&gt; 關鍵字很像是 &lt;code&gt;using&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xmlns:views=&amp;quot;clr-namespace:MoneyTrack.Views&amp;quot;&lt;/code&gt;: 代表將 &lt;code&gt;MoneyTrack.Views&lt;/code&gt; 這個路徑命名成 &lt;code&gt;views&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ShellContent 內代表是首頁要導引至的頁面，如下例會導向 &lt;code&gt;view:MoneyTackPage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;Shell&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x:Class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;MoneyTrack.AppShell&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;xmlns&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://schemas.microsoft.com/dotnet/2021/maui&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;xmlns:x&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://schemas.microsoft.com/winfx/2009/xaml&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;xmlns:local&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;clr-namespace:MoneyTrack&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;xmlns:views&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;clr-namespace:MoneyTrack.Views&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Shell&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;FlyoutBehavior&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Disabled&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Title&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;MoneyTrack&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;ShellContent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Title&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Home&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ContentTemplate&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;{DataTemplate views:MoneyTackPage}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Route&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;MoneyTackPage&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;Shell&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;ContentPage&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;xmlns&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://schemas.microsoft.com/dotnet/2021/maui&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;xmlns:x&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://schemas.microsoft.com/winfx/2009/xaml&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x:Class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;MoneyTrack.Views.ContactsPage&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Title&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Contacts&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;VerticalStackLayout&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Spacing&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;5&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;Label&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Text&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Welcome to .NET MAUI!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;VerticalOptions&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Center&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;HorizontalOptions&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Center&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;Button&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;x:Name&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;btn1&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Clicked&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;btn1_Clicked&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Text&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;click1&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;Button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;Button&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;x:Name&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;btn2&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Clicked&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;btn2_Clicked&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Text&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;click2&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;Button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;/&lt;span style="color:#f92672"&gt;VerticalStackLayout&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;ContentPage&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="shell"&gt;Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;接著我們可以透過 &lt;code&gt;Shell&lt;/code&gt; 來控制面版上要顯示的頁面：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; btnPage1_Clicked()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Shell.Current.GoToAsync(nameof(Page1));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="gotoasync"&gt;GoToAsync&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Shell 本身是一個 View，也是一個 Layout&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GoToAsync&lt;/code&gt; 可以用來切換頁面&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; btnPage1_Clicked(&lt;span style="color:#66d9ef"&gt;object&lt;/span&gt; sender, EvertArgs e)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Shell.Current.GoToAsync(&lt;span style="color:#e6db74"&gt;$&amp;#34;{nameof(Page1)}&amp;#34;&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// 前往 Page1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; btnCancel_Clicked(&lt;span style="color:#66d9ef"&gt;object&lt;/span&gt; sender, EvertArgs e)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Shell.Current.GoToAsync(&lt;span style="color:#e6db74"&gt;$&amp;#34;//{nameof(MainPage)}&amp;#34;&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// 回到 MainPage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; btnCancel_Clicked(&lt;span style="color:#66d9ef"&gt;object&lt;/span&gt; sender, EvertArgs e)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Shell.Current.GoToAsync(&lt;span style="color:#e6db74"&gt;$&amp;#34;..&amp;#34;&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// 回到上一頁&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="queryproperty"&gt;QueryProperty&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;透過 &lt;code&gt;QueryPropertyAttribute&lt;/code&gt; 可以達到如 http method 裡的 get 的方法。&lt;/li&gt;
&lt;li&gt;以下範例等同於實現 &lt;code&gt;page1?Id=1&lt;/code&gt;，在路由到 page1 的同時，將 property: Id 賦值。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;[QueryProperty(nameof(PageId), &amp;#34;Id&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;partial&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Page1&lt;/span&gt; : ContentPage
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; EditContactPage()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; InitializeComponent();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; ContactId
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; lblName.Text = Id;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[Hugo] 使用 Hugo-notice</title><link>https://intervalrain.github.io/hugo/notice/</link><pubDate>Fri, 19 Jan 2024 01:26:30 +0800</pubDate><guid>https://intervalrain.github.io/hugo/notice/</guid><description>Desc Text.</description></item><item><title>[IT] CORS 跨原始來源要求</title><link>https://intervalrain.github.io/it/cors/</link><pubDate>Fri, 19 Jan 2024 00:41:51 +0800</pubDate><guid>https://intervalrain.github.io/it/cors/</guid><description>&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;CORS (Cross-Origin Resource Sharing)&lt;br&gt;
是一個支援安全跨源請求和資料傳輸的機制，用於在瀏覽器和伺服器之間進行跨源請求。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;這是一個 W3C 標準，可讓伺服器放寬相同原始來源原則。&lt;/li&gt;
&lt;li&gt;不是安全性功能，CORS 會放寬安全性。 允許 CORS 並不會增強 API 的安全性。&lt;a href="https://learn.microsoft.com/zh-tw/aspnet/core/security/cors?view=aspnetcore-8.0#how-cors"&gt;CORS 的運作方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;允許伺服器明確允許某些跨原始來源要求，同時拒絕其他要求。&lt;/li&gt;
&lt;li&gt;比舊版技術 (例如：&lt;a href="https://learn.microsoft.com/zh-tw/dotnet/framework/wcf/samples/jsonp"&gt;JSONP&lt;/a&gt;) 更安全且更有彈性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="何謂相同原始來源"&gt;何謂相同原始來源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果兩個 URL 具有相同的配置、主機和連接埠，則其原始來源相同 (&lt;a href="https://tools.ietf.org/html/rfc6454"&gt;RFC 6454&lt;/a&gt;)。
&lt;ul&gt;
&lt;li&gt;這兩個 URL 具有相同的原始來源：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://example.com/foo.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://example.com/bar.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這些 URL 的原始來源與前兩個 URL 不同：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://example.net：不同的&lt;/code&gt;網域&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://www.example.com/foo.html&lt;/code&gt;：不同的子網域&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://example.com/foo.html&lt;/code&gt;：不同的配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://example.com:9000/foo.html&lt;/code&gt;：不同的連接埠&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="如何啟動-cors"&gt;如何啟動 CORS&lt;/h2&gt;
&lt;p&gt;有三種方式可以啟用 CORS：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在中介軟體中，使用&lt;strong&gt;具名原則&lt;/strong&gt;或&lt;strong&gt;預設原則&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;端點路由&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;[EnableCors]&lt;/strong&gt; 屬性。
搭配具名原則使用 [EnableCors] 屬性能夠以最精細的程度來控制對於支援 CORS 之端點的限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;style type="text/css"&gt;.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}&lt;/style&gt;
&lt;div&gt;&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg"&gt;&lt;symbol id="tip-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/&gt;&lt;/symbol&gt;&lt;symbol id="note-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/&gt;&lt;/symbol&gt;&lt;symbol id="warning-notice" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/&gt;&lt;/symbol&gt;&lt;symbol id="info-notice" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet"&gt;&lt;path d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/&gt;&lt;/symbol&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class="notice warning" &gt;
&lt;p class="first notice-title"&gt;&lt;span class="icon-notice baseline"&gt;&lt;svg&gt;&lt;use href="#warning-notice"&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/p&gt;</description></item><item><title>[ML] General guide on ML</title><link>https://intervalrain.github.io/ml/general_guide/</link><pubDate>Sun, 14 Jan 2024 14:31:56 +0800</pubDate><guid>https://intervalrain.github.io/ml/general_guide/</guid><description>general guide on machine learning</description></item><item><title>[Statistics] a群體與b群體各別標準差求整體標準差</title><link>https://intervalrain.github.io/statistics/sigma/</link><pubDate>Tue, 12 Dec 2023 22:16:04 +0800</pubDate><guid>https://intervalrain.github.io/statistics/sigma/</guid><description>&lt;h1 id="given-sigma_a-and-sigma_b-ask-for-sigma"&gt;Given \(\sigma_a\) and \(\sigma_b\), Ask for \(\sigma\)&lt;/h1&gt;
&lt;h2 id="1-簡化-sigma"&gt;1. 簡化 \(\sigma\)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;將 \(\sigma\) 乘開
&lt;ul&gt;
&lt;li&gt;\(\sigma = \sqrt{\frac{\sum{(x_i-\bar x)^2}}{n}}\)&lt;/li&gt;
&lt;li&gt;\(\sigma = \sqrt{\frac{\sum{x_i^2-2\bar x\sum{x_i}+n\bar x^2}}{n}}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平均等於總和除以個數 \(\frac{\sum x_i}{n}=\bar x\)，故
&lt;ul&gt;
&lt;li&gt;\(\sigma = \sqrt{\frac{\sum x_i^2}{n}-\frac{2\bar x\sum x_i}{n}+\frac{n\bar x^2}{n}}\)&lt;/li&gt;
&lt;li&gt;\(\sigma = \sqrt{\frac{\sum x_i^2}{n}-2\bar x^2+\bar x^2}\)&lt;/li&gt;
&lt;li&gt;得 \(\boxed{\sigma = \sqrt{\frac{\sum x_i^2}{n}-\bar x^2}}-(1)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-求個別平方和"&gt;2. 求個別平方和&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由\((1)\)式可推得各別的標準差為
&lt;ul&gt;
&lt;li&gt;\(\boxed{\sigma_a = \sqrt{\frac{\sum x_{ai}^2}{n_a}-\bar x_a^2}}-(2)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;且
&lt;ul&gt;
&lt;li&gt;\(\boxed{n = n_a+n_b}-(3)\)&lt;/li&gt;
&lt;li&gt;\(\boxed{\sum x_i^2=\sum x_{ai}^2+\sum x_{bi}^2}-(4)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;欲求 \(\sum x_{ai}^2\)，我們將\((2)\)式展開
&lt;ul&gt;
&lt;li&gt;\(\sigma_a^2 = \frac{\sum x_{ai}^2}{n_a}-\bar x_a^2\)&lt;/li&gt;
&lt;li&gt;\(\sigma_a^2+\bar x_a^2= \frac{\sum x_{ai}^2}{n_a}\)&lt;/li&gt;
&lt;li&gt;得\(\boxed{\sum x_{ai}^2=n_a(\sigma_a^2+\bar x_a^2)}-(5)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-求總體標準差"&gt;3. 求總體標準差&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由\((1)\)式展開
&lt;ul&gt;
&lt;li&gt;得 \(\boxed{\sigma = \sqrt{\frac{(\sum x_{ai}^2+\sum x_{bi}^2)}{n}-\bar x^2}}-(6)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;將\((5)\)代入\((6)\)
&lt;ul&gt;
&lt;li&gt;\(\boxed{\sigma=\sqrt{\frac{n_a(\sigma_a^2+\bar x_a^2)+n_b(\sigma_b^2+\bar x_n^2)}{n}-\bar x^2}}-(7)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其中 \(\boxed{\bar x=\frac{n_a\bar x_a + n_b\bar x_b}{n}}-(8)\)&lt;/li&gt;
&lt;li&gt;故我們可以從上式輾轉得通式：
&lt;ul&gt;
&lt;li&gt;\(\boxed{\sigma=\sqrt{\frac{\sum(n_i(\sigma_i^2+\bar x_i^2))}{n}-\bar x^2}}-(9)\)&lt;/li&gt;
&lt;li&gt;或寫成&lt;/li&gt;
&lt;li&gt;\(\boxed{\sigma=\sqrt{\frac{\sum(n_i(\sigma_i^2+\bar x_i^2))-\sum n_i\bar x_i}{n}}}-(9)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="summary"&gt;summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;個數
&lt;ul&gt;
&lt;li&gt;\(\boxed{n=n_a+n_b=\sum n_i}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平均數
&lt;ul&gt;
&lt;li&gt;\(\boxed{\bar x=\frac{n_a\bar x_a+n_b\bar x_b}{n_a+n_b}=\frac{\sum{n_i\bar x_i}}{\sum{n_i}}}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;標準差
&lt;ul&gt;
&lt;li&gt;\(\boxed{\sigma=\sqrt{\frac{n_{ai}(\sigma_{ai}^2+\bar x_{ai}^2)+n_{bi}(\sigma_{bi}^2+\bar x_{bi}^2)-(n_a\bar x_a+n_b\bar x_b)}{n_a+n_b}}=\sqrt{\frac{\sum(n_i(\sigma_i^2+\bar x_i^2))-\sum n_i\bar x_i}{\sum n_i}}}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="4-sql"&gt;4. sql&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;現有一 table 存有&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avg_value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std_value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;site_count&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; stats &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;select&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;sum&lt;/span&gt;(site_count&lt;span style="color:#f92672"&gt;*&lt;/span&gt;avg_value)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;sum&lt;/span&gt;(site_count) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; avg_value,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sqrt((&lt;span style="color:#66d9ef"&gt;sum&lt;/span&gt;(site_count&lt;span style="color:#f92672"&gt;*&lt;/span&gt;(square(std_value)&lt;span style="color:#f92672"&gt;+&lt;/span&gt;square(avg_value)))&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;sum&lt;/span&gt;(site_count&lt;span style="color:#f92672"&gt;*&lt;/span&gt;avg_value))&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;sum&lt;/span&gt;(site_count)) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; std_value,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;sum&lt;/span&gt;(site_count) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; site_count
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;where&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;group&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;by&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; stats
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[algo] timeline algorithm</title><link>https://intervalrain.github.io/algo/timeline/</link><pubDate>Fri, 10 Nov 2023 03:10:09 +0800</pubDate><guid>https://intervalrain.github.io/algo/timeline/</guid><description>&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Cpp" data-lang="Cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string shortestCommonSupersequence(string a, string b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; b.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&lt;/span&gt; dp(m&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;(n&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; m; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; j &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; n; j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; j &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (a[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; b[j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dp[i][j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dp[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;][j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dp[i][j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(dp[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;][j], dp[i][j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; m;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (a[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; b[j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; a[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;--&lt;/span&gt;i;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;--&lt;/span&gt;j;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (dp[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;][j] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; dp[i][j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; b[&lt;span style="color:#f92672"&gt;--&lt;/span&gt;j];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; a[&lt;span style="color:#f92672"&gt;--&lt;/span&gt;i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) res &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; a[&lt;span style="color:#f92672"&gt;--&lt;/span&gt;i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (j &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) res &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; b[&lt;span style="color:#f92672"&gt;--&lt;/span&gt;j];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reverse(res.begin(), res.end());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string &lt;span style="color:#a6e22e"&gt;shortestCommonSupersequencePlus&lt;/span&gt;(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; strs) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; strs[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; strs.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shortestCommonSupersequence(res, strs[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string &lt;span style="color:#a6e22e"&gt;trans&lt;/span&gt;(string&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; a, string&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; pattern) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pattern.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; m &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (a[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; pattern[j]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res.push_back(&lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res.push_back(a[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; strs &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ABCDEH&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ACDEFBH&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ADEHG&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Solution&lt;span style="color:#f92672"&gt;*&lt;/span&gt; sol &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Solution();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sol&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;shortestCommonSupersequencePlus(strs);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; res &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; sol&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;trans(strs[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], res) &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; sol&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;trans(strs[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;], res) &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; sol&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;trans(strs[&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;], res) &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;結果&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Cpp" data-lang="Cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;input:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ABCDEH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ACDEFBH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ADEHG
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;=========&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;output:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ABCDEFBHG
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ABCDE H
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;A CDEFBH
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;A DE HG
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[IT] DDD, Hexagonal, Onion, Clean, CQRS 大整合</title><link>https://intervalrain.github.io/hgraca/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/</link><pubDate>Mon, 06 Nov 2023 23:38:13 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/</guid><description>&lt;p&gt;本文是介紹我如何將 DDD, Hexagonal, Onion, Clean, CQRS Architecture 等架構概念整合在一起，我將它命名為 &lt;strong&gt;Explicit Architecture&lt;/strong&gt;。上述的概念基本上都是通過了市場的試驗，並在許多高要求的平台上被應用。&lt;/p&gt;
&lt;h1 id="系統的基本組件"&gt;系統的基本組件&lt;/h1&gt;
&lt;p&gt;首先回顧 &lt;strong&gt;&lt;a href="../ebi-architecture"&gt;EBI&lt;/a&gt;&lt;/strong&gt; 與 &lt;strong&gt;&lt;a href="../ports-adapters-architecture"&gt;Ports &amp;amp; Adapter&lt;/a&gt;&lt;/strong&gt; 架構。這兩種架構都明確區分了哪些程式碼是應用程式的內部，哪些是外部，以及哪些是連接內部和外部的程式碼。&lt;/p&gt;
&lt;p&gt;Ports &amp;amp; Adapters 明確地定義出了系統的三個部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用者介面&lt;/strong&gt; (User Interface, UI)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;商業邏輯&lt;/strong&gt;(business logic)、&lt;strong&gt;應用程式核心&lt;/strong&gt;(application core)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基礎設施&lt;/strong&gt;(Infrastructure)，如 DB、搜尋引擎或第三方API等工具。
&lt;img alt="ea1" loading="lazy" src="https://herbertograca.files.wordpress.com/2018/11/000-explicit-architecture-svg.png?w=1024&amp;h=700"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們真正應該關心的是應用程式的核心，這是讓我們的程式碼能夠完成其應有功能的程式碼。它可能會使用多種 UI（網頁、手機、CLI、API 等等），但實際執行工作的程式碼是相同的，並位於應用程式的核心，觸發它的 UI 實際上並不重要。&lt;/p&gt;
&lt;p&gt;一個典型的應用程式流程從 UI 的程式碼開始，經過應用程式核心到基礎設施程式碼，再回到應用程式核心，最後將回應傳遞給 UI。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ea2" loading="lazy" src="https://herbertograca.files.wordpress.com/2018/11/010-explicit-architecture-svg.png?w=1024&amp;h=700"&gt;&lt;/p&gt;
&lt;h1 id="工具-tools"&gt;工具 Tools&lt;/h1&gt;
&lt;p&gt;工具指的是那些遠離我們系統核心程式碼，但為我們應用程式所用的工具，例如，DB、搜尋引擎、網頁伺服器或 CLI 控制台（儘管後兩者也是交付機制）。
&lt;img alt="ea3" loading="lazy" src="https://herbertograca.files.wordpress.com/2018/11/020-explicit-architecture-svg.png?w=1024&amp;h=700"&gt;&lt;/p&gt;
&lt;p&gt;雖然將 CLI 與 DB 分類在一起可能有些奇怪，儘管它們有不同的目的，但實際上它們都是應用程式使用的工具。關鍵的區別在於，CLI 和網頁服務器用於告訴我們的應用程式做些什麼，而 DB 則由我們的應用程式告訴它做些什麼。這是一個非常重要的區別，因為它對我們如何建構連接這些工具與應用程式核心的程式碼有著強烈的影響。&lt;/p&gt;
&lt;h1 id="將工具和傳遞機制連接到應用程式核心"&gt;將工具和傳遞機制連接到應用程式核心&lt;/h1&gt;
&lt;p&gt;連接工具與應用程式核心的程式碼單元被稱為適配器（Ports &amp;amp; Adapters Architecture），適配器實現了將業務邏輯與特定工具進行通訊。&lt;/p&gt;
&lt;p&gt;告知我們應用程式應該做什麼事的適配器稱為 &lt;strong&gt;Primary 或 Driving Adapters&lt;/strong&gt;；&lt;br&gt;
被我們應用程式告知應該做什麼事的適配器稱為 &lt;strong&gt;Secondary or Driven Adapters&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="埠-ports"&gt;埠 Ports&lt;/h2&gt;
&lt;p&gt;然而，這些適配器並非隨機創建的，它們是為了適應應用程式核心的一個非常特定的入口點，也就是埠。埠不過是一種規範，說明工具如何使用應用程式核心，或者說明它如何被應用程式核心使用。在大多數語言中，以其最簡單的形式，這種規範，或埠，即是一個介面(interface)，但實際上可能由多個介面和 DTO 組成。&lt;/p&gt;</description></item><item><title>[IT] 服務導向的架構 Service Oriented Architecture (SOA)</title><link>https://intervalrain.github.io/hgraca/service-oriented-architecture-soa/</link><pubDate>Thu, 02 Nov 2023 22:32:25 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/service-oriented-architecture-soa/</guid><description>&lt;p&gt;The SOA Style has been around since the late 1980s and has its origins in ideas introduced by CORBA, DCOM, DCE and others. Much has been said about SOA, and there are a few different implementation patterns but, in essence, SOA focuses on only a few concepts and doesn’t give any prescription on how to implement them:
SOA風格自 1980 年代晚期便一直存在，其起源於 CORBA、DCOM、DCE 等等。關於 SOA 已經有很多討論，且有許多不同的實作，但本質上，SOA 只關注少數幾個概念，而且指引我們如何去實作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者導向的應用程式。&lt;/li&gt;
&lt;li&gt;可重複使用的商業服務。&lt;/li&gt;
&lt;li&gt;獨立的技術堆。&lt;/li&gt;
&lt;li&gt;自治性(獨立演進、可擴展性與可部署性)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SOA 是一最獨立於任何技術或產品的架構原則，就像多態與封裝一樣。&lt;/p&gt;</description></item><item><title>[IT] 從 CQS 到 CQRS</title><link>https://intervalrain.github.io/hgraca/from-cqs-to-cqrs/</link><pubDate>Wed, 01 Nov 2023 23:29:40 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/from-cqs-to-cqrs/</guid><description>&lt;p&gt;當我們有一個以數據為中心的應用程式，即只實現基本的 CRUD 操作，並將業務流程（即要更改的數據和更改的順序）留給用戶時，好處是用戶可以在不需要更改應用程式的情況下更改業務流程。另一方面，這意味著所有用戶都需要知道所有可以使用該應用程式執行業務流程的所有細節，這在沒有明確的規範且有大量人員參與其中時，將會是一個大問題。&lt;/p&gt;
&lt;p&gt;在一個以數據為中心的應用程式中，該應用程式對業務流程一無所知，因此該 domain 無法擁有任何「動詞」，也就是說，應用程式本身無法做出除了改變原始數據以外的任何事情。它變成了數據模型(data model)的高度抽象。這些流程只存在於應用程式用戶的腦海中，或者甚至存在於釘在電腦螢幕上的便利貼中。&lt;/p&gt;
&lt;p&gt;一個非凡且實用的應用程式旨在減輕使用者的「流程」負擔，透過捕捉他們的意圖，使其成為一個能夠處理行為的應用程式，而不僅僅是儲存數據。&lt;/p&gt;
&lt;p&gt;CQRS is the result of an evolution of several technical concepts that work together to help provide the application with an accurate reflection of the domain, while overcoming common technical limitations.
CQRS 是許多技術概念演變的結果，這些概念使應用程式能準確地反映領域(domain)，並同時克服常見的技術限制。&lt;/p&gt;
&lt;h1 id="命令查詢分離-command-query-separation"&gt;命令查詢分離 Command Query Separation&lt;/h1&gt;
&lt;p&gt;正如 Martin Fowler 所述，「命令查詢分離」這個術語是由 Bertrand Meyer 在他的《物件導向軟體建構(Object Oriented Software Construction)》（1988年）中首次提出的 - 這本書被認為是物件導向早期最具影響力的書籍之一。&lt;/p&gt;
&lt;p&gt;梅爾認為，作為一個原則，我們不應該有&lt;strong&gt;既改變數據又返回數據&lt;/strong&gt;的方法。因此，我們有兩種類型的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Queries(查詢)：返回數據但不更改數據，因此沒有副作用；&lt;/li&gt;
&lt;li&gt;Commands(指令)：更改數據，但不返回數據。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;換句話說，&lt;em&gt;提問不應改變答案，而行動也不應回饋答案&lt;/em&gt;，這同時也有助於尊重單一責任原則。&lt;/p&gt;
&lt;p&gt;然而，有些模式是這條規則的例外，傳統的佇列和堆疊會彈出在佇列或堆疊中的元素，既改變了佇列或堆疊，也返回了從中移除的元素。&lt;/p&gt;
&lt;h1 id="命令模式-command-pattern"&gt;命令模式 Command Pattern&lt;/h1&gt;
&lt;p&gt;命令模式的主要概念是將我們從資料中心的應用程式轉移到以流程為中心的應用程式，具有領域知識和應用程式流程知識。&lt;/p&gt;
&lt;p&gt;在實際操作中，這意味著我們不再讓使用者執行 &lt;code&gt;CreateUser&lt;/code&gt;, &lt;code&gt;ActivateUser&lt;/code&gt; 和 &lt;code&gt;SendUserCreatedEmail&lt;/code&gt; 這三個動作，而是讓使用者直接執行一個 &lt;code&gt;RegisterUser&lt;/code&gt; 的指令，這個指令將會執行前述的三個動作，作為一個封裝的業務流程。&lt;/p&gt;</description></item><item><title>[IT] 事件驅動架構 Event-Driven Architecture</title><link>https://intervalrain.github.io/hgraca/event-driven-architecture/</link><pubDate>Tue, 31 Oct 2023 23:25:09 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/event-driven-architecture/</guid><description>&lt;p&gt;利用事件來設計應用程式似乎是 80年代後期開始的一種做法，我們可以在使用事件在前端或後端任何地方使用事件，當按下一個按鈕，涉及某些數據變更，或是執行某些後端動作時。&lt;/p&gt;
&lt;h1 id="whatwhenwhy"&gt;What/When/Why&lt;/h1&gt;
&lt;p&gt;就像類別(classes)一樣，組件(components)之間應該保持低耦合，但在內部應保持高內聚。當組件需要協作時，比如說組件A需要觸發組件B中的某些邏輯，自然的做法就是讓組件A調用組件B中一個物件的方法。然而，如果A知道B的存在，那麼它們就是耦合的，A依賴於B，這使得系統更難改變和維護，事件可以用來&lt;strong&gt;防止耦合&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果我們有一個團隊只專注於組件B的工作，它可以改變組件B對組件A邏輯的反應，甚至不需要與負責組件A的團隊溝通。組件可以獨立進化：&lt;strong&gt;我們的應用程式變得更有機(organic)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;即使在同一個組件中，有時我們會需要執行程式碼作為一個行動的結果，但它並不需要立即執行，也就是說，當事件的結果互不影響的情境下，我們可以採用 &lt;strong&gt;異步(async)&lt;/strong&gt; 的策略執行程式。&lt;/p&gt;
&lt;p&gt;然而，這樣做也存在危險，如果我們不加選擇地使用事件，可能會使一個概念上高度內聚的邏輯被解耦。換句話說，本應在一起的程式碼被強行分開，變得很難追蹤、理解(類似&lt;code&gt;goto&lt;/code&gt;語句)，最後使得它變成：speghetti code！&lt;/p&gt;
&lt;p&gt;為了防止我們的程式碼變成一堆混亂的 speghetti code，我們應該清楚的限制事件的使用規則。根據我的經驗，有三種情況下應該使用事件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解耦元件。&lt;/li&gt;
&lt;li&gt;執行異步任務。&lt;/li&gt;
&lt;li&gt;追蹤狀態變更 (audit log)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="1-解耦元件"&gt;1. 解耦元件&lt;/h2&gt;
&lt;p&gt;當元件A執行需要觸發元件B邏輯的動作時，我們可以選擇不直接呼叫它，而是將一個事件發送到事件調度器(dispatcher)中。元件B將會在調度器中監聽該特定事件，並在事件發生時作出反應。&lt;/p&gt;
&lt;p&gt;這意味著A和B都將依賴於調度器和事件，但他們將對彼此一無所知，也就是說他們是解耦的。&lt;/p&gt;
&lt;p&gt;理想情況下，調度器和事件都不應存在於任何組件中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;調度器應該是一個與我們的應用程式完全獨立的庫，因此應該使用依賴性管理系統安裝在一個通用的位置。在PHP世界中，我們會使用 &lt;strong&gt;Composer&lt;/strong&gt; 將之安裝在 &lt;em&gt;vendor&lt;/em&gt; 的資料夾。(C# 可以參考我 &lt;a href="../../it/eventbus/"&gt;EventBus 的文章&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;這個事件雖然是我們應用程式的一部分，但應該存在於兩個組件之外，以保持它們對彼此一無所知。該事件在組件之間共享，並且是應用程式核心的一部分。事件是 DDD 所稱的 &lt;strong&gt;共享核心(Shared Kernel)&lt;/strong&gt; 的一部分。這樣，兩個組件將依賴於共享核心，但將對彼此保持不知情。然而，在單體應用程式中，為了方便，可以將其放置在觸發事件的組件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Shared Kernel&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;共享核心&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;[…] Designate with an explicit boundary some subset of the domain model that the teams agree to share. Keep this kernel small. […] This explicitly shared stuff has special status, and shouldn’t be changed without consultation with the other team.&lt;/em&gt; - &lt;em&gt;&lt;strong&gt;Eric Evans 2014, Domain-Driven Design Reference&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;[…] 指定一個團隊同意共享的領域模型的子集，並明確劃定其範疇。保持這個核心部分的規模小。[…] 這些明確共享的內容具有特殊的地位，不應在未與其他團隊諮詢的情況下進行更改。&lt;/em&gt; - &lt;em&gt;&lt;strong&gt;艾瑞克·埃文斯 2014，領域驅動設計參考資料&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description></item><item><title>[IT] 乾淨架構 Clean Architecture</title><link>https://intervalrain.github.io/hgraca/clean-architecture/</link><pubDate>Sun, 29 Oct 2023 21:11:58 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/clean-architecture/</guid><description>&lt;p&gt;Robert C. Martin (aka Uncle Bob) 在 2012 年在他的&lt;a href="https://blog.cleancoder.com/uncle-bob/2011/11/22/Clean-Architecture.html"&gt;部落格&lt;/a&gt;上發表了他對於&lt;strong&gt;乾淨架構&lt;/strong&gt;的想法，並在幾個會議上進行了關於乾淨架構的演講。&lt;/p&gt;
&lt;p&gt;乾淨架構套用了許多為人熟知的概念、規則和模式，並解釋如何將它們組合在一起，以提出一種標準化的應用程式建構方式。&lt;/p&gt;
&lt;h1 id="站在-ebi-ports--adapters-與洋蔥架構的肩膀上"&gt;站在 EBI, Ports &amp;amp; Adapters 與洋蔥架構的肩膀上&lt;/h1&gt;
&lt;p&gt;乾淨架構背後的核心目標與 Ports &amp;amp; Adapters(六邊形)和洋蔥架構的目標是相同的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工具的獨立性。&lt;/li&gt;
&lt;li&gt;交付機制的獨立性。&lt;/li&gt;
&lt;li&gt;獨立測試的可行性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在發布有關乾淨架構的文章中，這是用來解釋整體概念的一張圖：
&lt;img alt="clean_arch" loading="lazy" src="https://herbertograca.files.wordpress.com/2017/04/cleanarchitecture-5c6d7ec787d447a81b708b73abba1680.jpg"&gt;&lt;/p&gt;
&lt;p&gt;正如 Uncle Bob 在他的文章中所說，上面這張圖嘗試將最新的架構思想整合成一個可行的概念。&lt;/p&gt;
&lt;p&gt;讓我們將乾淨架構的圖表與用來解釋六角架構和洋蔥架構的圖表進行比較，看看它們在哪些地方相符：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://herbertograca.files.wordpress.com/2017/04/hexagonal_original.gif" width="360"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://herbertograca.files.wordpress.com/2017/04/4ioq9.png" width="360"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="工具和交付機制的外部化"&gt;工具和交付機制的外部化&lt;/h2&gt;
&lt;p&gt;六角形架構專注於將工具和交付機制從應用程式中外部化，使用介面(ports))和適配器(adapters)。這也是洋蔥架構的核心價值之一，如圖所見，UI、基礎設施和測試都在圖表的最外層。乾淨的架構具有完全相同的特性，將 UI、Web、DB 等都放在最外層。最後，所有應用程式核心程式碼都是與框架、庫獨立的。&lt;/p&gt;
&lt;h2 id="依賴方向"&gt;依賴方向&lt;/h2&gt;
&lt;p&gt;在六角架構中，我們並沒有任何明確的指示告訴我們依賴性的方向。然而，我們可以輕易地推斷出來：應用程式有一個埠(或介面)，必須由一個適配器來實現或使用。因此，適配器依賴於介面，它依賴於位於中心的應用程式。外部的東西依賴於內部的東西，依賴性的方向是朝向中心。在洋蔥架構圖中，我們也沒有任何明確的指示告訴我們依賴性的方向，然而，在他的第二篇文章中，Jeffrey Palermo 非常清楚地說明所有的依賴性都是朝向中心。乾淨架構則是非常明確地指出依賴性方向是朝向中心。他們都在架構層面引入了依賴反轉原則。內圈中的任何東西都不能知道外圈中的任何東西。此外，當我們跨越邊界傳遞數據時，它總是以對內圈來說最方便的形式存在。&lt;/p&gt;
&lt;h2 id="分層"&gt;分層&lt;/h2&gt;
&lt;p&gt;六角形架構圖只顯示了兩層：應用程式的內部和外部。然而，洋蔥架構則將 DDD 中 application layer 融入其中：application service 持有用例邏輯(use case logic)；domain service 封裝不屬於實體或價值對象的領域邏輯。與洋蔥架構相比，乾淨架構保留了 application layer(use case)和 entities layer，但似乎忽略了 domain service layer。然而，閱讀 Uncle Bob 的文章後，我們意識到他認為一個 entity 不僅是 DDD 意義上的 entity，而且是任何 domain object：「一個實體可以是一個帶有方法的物件，或者可以是一組數據結構和函數。」實際上，他合併了這兩個最內層的層級以簡化圖表。&lt;/p&gt;</description></item><item><title>[IT] 洋蔥架構 Onion Architecture</title><link>https://intervalrain.github.io/hgraca/onion-architecture/</link><pubDate>Sun, 29 Oct 2023 20:34:57 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/onion-architecture/</guid><description>&lt;h1 id="洋蔥架構"&gt;洋蔥架構&lt;/h1&gt;
&lt;p&gt;洋蔥架構是由 Jeffrey Palermo 在 2008 年提出的。在我看來，它是基於 Ports &amp;amp; Adapters 架構的構念，將領域(domain)放在應用程式的中心，將交付機制(UI)和系統使用的基礎設施(infrastructure, ex.ORM，搜索引擎，第三方API等)。差別是，它對內部進行了分層。&lt;/p&gt;
&lt;p&gt;我們從分層架構學習到最基本的分層通常有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Presentation 呈現層&lt;/li&gt;
&lt;li&gt;Application 應用層&lt;/li&gt;
&lt;li&gt;Domain 領域層&lt;/li&gt;
&lt;li&gt;Persistence 持久層&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 Ports &amp;amp; Adapters 架構隱含了兩個同心層：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;外部：傳遞機制(delivery mechanisms)與基礎設施(infrastructure)&lt;/li&gt;
&lt;li&gt;內部：業務邏輯&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ports &amp;amp; Adapters 和 Onion Architecture 同時擁有一個概念，那就是通過編寫適配器(adapter)，將應用程式的核心與基礎設施隔離，以防止基礎設施滲透到應用程式核心中(意思是應用程式核心直接對基礎設施產生依賴)。這使得抽換應用程式使用的工具和交付機制變得更容易，提供了一些對技術、工具和供應商鎖定的保護。&lt;/p&gt;
&lt;p&gt;這也賦予應用程式一種愉快的能力，即無需真實的基礎設施或交付機制就能運行，因為它們可以被模擬物件所替換，這易於進行程式碼的測試。&lt;/p&gt;
&lt;p&gt;然而，洋蔥架構也告訴我們，在企業應用中，我們將不只有內部與外部這樣簡單的分層，在內部，也就是業務邏輯中，我們會增加一些我們從領域驅動設計(DDD)認識的一些層：
&lt;img alt="onion" loading="lazy" src="https://herbertograca.files.wordpress.com/2017/03/2008-onion-architecture5.png"&gt;&lt;/p&gt;
&lt;p&gt;此外，它明確地闡述了 Ports &amp;amp; Adapters 架構中關於依賴方向的隱含概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外層依賴於內層，&lt;/li&gt;
&lt;li&gt;內層對外層一無所知。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這意味著耦合的方向是朝向中心，為我們提供了一個獨立的物件模型(domain model)，其核心不依賴任何東西。我們有足夠的靈活性可以改變外層，而不影響內層，更重要的層面。它在架構層面上運用了依賴反轉原則。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;洋蔥架構的主要原則：
&lt;ul&gt;
&lt;li&gt;應用程式是建立在一個獨立的物件模型周圍。&lt;/li&gt;
&lt;li&gt;內層定義介面，外層實現介面。&lt;/li&gt;
&lt;li&gt;耦合的方向是朝向中心。&lt;/li&gt;
&lt;li&gt;所有應用程式的核心代碼都可以獨立於基礎設施進行編譯和運行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，任何外層都可以直接呼叫任何內層，這不會破壞耦合方向，並避免創建僅包含無業務邏輯的 proxy methods，甚至是 proxy classes，僅為了符合某種分層方案。這也符合 Martin Fowler 所表達的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[…] the layers above can use any layer beneath them, not just the layer immediately beneath. - &lt;em&gt;&lt;strong&gt;Jeffrey Palermo 2008, The Onion Architecture: part 3&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
[&amp;hellip;] 上層的層次可以使用任何位於其下的層次，而不僅僅是直接下方的那一層。 - &lt;em&gt;&lt;strong&gt;傑弗里‧巴勒莫 2008，洋蔥架構：第三部分&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description></item><item><title>[ML] sample1 - 手寫數字辨識</title><link>https://intervalrain.github.io/ml/ex1/</link><pubDate>Sat, 28 Oct 2023 14:11:35 +0800</pubDate><guid>https://intervalrain.github.io/ml/ex1/</guid><description>&lt;h1 id="mnist"&gt;MNIST&lt;/h1&gt;
&lt;p&gt;NIST(National Insitute of Standards and Technology) 是美國國家標準與技術研究院，MNIST 是由 NIST 所提供的一組經典的機器學習測資，可以想成是深度學習中的「Hello World!」，它由 60000張 訓練圖片與 10000 張測試圖片所組成，為手寫數字的灰階圖片，大小為 28 * 28 像素，分類 0 到 9 共 10 個數字。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可透過 keras 模組直接取得資料&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#f92672"&gt;from&lt;/span&gt; tensorflow.keras.datasets &lt;span style="color:#f92672"&gt;import&lt;/span&gt; mnist
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;輸入 &lt;code&gt;mnist.load_data()&lt;/code&gt; 可取得 mnist 資料集，回傳值為 2*2 的 tuple of ndarray。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; (train_images, train_labels), (test_images, test_labels) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mnist&lt;span style="color:#f92672"&gt;.&lt;/span&gt;load_data()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;tuple 裡面裝載的是 NumPy 的 ndarray 物件，我們可以利用
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;o.shape&lt;/code&gt; 來取得 ndarray 的屬性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len(o)&lt;/code&gt; 來取得陣列的個數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; train_images&lt;span style="color:#f92672"&gt;.&lt;/span&gt;shape
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(&lt;span style="color:#ae81ff"&gt;60000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 3 軸陣列，其大小為 60000 * 28 * 28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; test_images&lt;span style="color:#f92672"&gt;.&lt;/span&gt;shape
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(&lt;span style="color:#ae81ff"&gt;10000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 3 軸陣列，其大小為 10000 * 28 * 28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; len(train_labels), len(test_labels)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(&lt;span style="color:#ae81ff"&gt;60000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;10000&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 訓練集與測試集各有 60000 與 10000 筆 labels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; train_labels
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;array([&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;, &lt;span style="color:#f92672"&gt;...&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;], dtype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;uint8) &lt;span style="color:#75715e"&gt;# train_labels 裝 60000 筆資料對應的解答(0-9 的數字)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;我們可以利用 &lt;code&gt;matlabplot&lt;/code&gt; 把圖片印出來看看&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;matshow(train_images[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], cmap &lt;span style="color:#f92672"&gt;=&lt;/span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get_cmap(&lt;span style="color:#e6db74"&gt;&amp;#39;gray&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src="https://intervalrain.github.io/ML/images/mnist_0.png" width="360"&gt;
&lt;h1 id="用-dense-層建構神經網路"&gt;用 Dense 層建構神經網路&lt;/h1&gt;
&lt;p&gt;首先我們需要建立神經網路架構，層(layer)是組成神經網路的基本元件，一個層就是一個資料處理的模組。具體而言，每一層都會從資料中萃取出特定的轉換或表示法，經過數層的資料萃取(data distillation)後，將資料「過瀘」成最後特定的轉換或表達(representation)。&lt;/p&gt;</description></item><item><title>[IT] 埠與適配器架構 Ports &amp; Adapters Architecture aka 六邊形架構 Hexagonal Architecture</title><link>https://intervalrain.github.io/hgraca/ports-adapters-architecture/</link><pubDate>Fri, 27 Oct 2023 23:46:32 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/ports-adapters-architecture/</guid><description>&lt;p&gt;埠與適配器架構（又稱為六角架構）是由 Alistair Cockburn 所構想，並在 2005 年於他的部落格中寫下。這是他用一句話定義其目標的方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Allow an application to equally be driven by users, programs, automated test or batch scripts, and to be developed and tested in isolation from its eventual run-time devices and databases.&lt;/em&gt; - &lt;em&gt;&lt;strong&gt;Alistair Cockburn 2005, Ports and Adapters&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;允許一個應用程式能夠同等地由用戶、程式、自動化測試或批次腳本驅動，並且能夠在與其最終運行時間設備和數據庫隔離的情況下進行開發和測試。&lt;/em&gt; - &lt;em&gt;&lt;strong&gt;艾利斯特·科本 2005，端口與適配器&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;我看過一些討論「Ports &amp;amp; Adapters 架構」的文章，其中大量提到了分層(layers)。然而，在原始的 Alistair Cockburn 的文章中，我並未讀到任何關於分層的內容。&lt;/p&gt;
&lt;p&gt;Ports &amp;amp; Adapters 架構的思想是將我們的應用程式視為系統的中心產物，所有的輸入和輸出都通過一個端口進入/離開應用程式，該端口將應用程式與外部工具、技術和交付機制隔離。應用程式應該對誰/什麼正在發送輸入或接收其輸出一無所知。這旨在提供一些保護，以防止技術和業務需求的演變，促使產品在開發完成後不久就因為技術/供應商的封鎖而變得過時。&lt;/p&gt;
&lt;p&gt;在這篇文章中，我們將深入探討以下主題：&lt;/p&gt;
&lt;h1 id="傳統方法的問題"&gt;傳統方法的問題&lt;/h1&gt;
&lt;p&gt;傳統的方法在前後兩端都可能帶來問題。&lt;/p&gt;
&lt;p&gt;在前端方面，我們最終會有業務邏輯滲透到 UI 中（例如，當我們在控制器或視圖中放置用例邏輯，使其在其他 UI 中無法重用）或甚至是 UI 滲透到業務邏輯中（例如，由於我們在模板中需要一些邏輯，因此我們在我們的實體中創建方法）。&lt;/p&gt;
&lt;p&gt;在後端方面，我們可能會有外部庫和技術滲透到業務邏輯中，因為我們可能會透過類型提示、子類別化，甚至在我們的業務邏輯內實例化庫類別來直接引用它們。&lt;/p&gt;</description></item><item><title>[IT] 領域驅動設計 Domain-Driven Design</title><link>https://intervalrain.github.io/hgraca/domain-driven-design/</link><pubDate>Thu, 26 Oct 2023 23:11:53 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/domain-driven-design/</guid><description>&lt;p&gt;「領域驅動設計」這個詞是在 Eric Evans 在他的著作《領域驅動設計：解決軟體核心的複雜性(Domain-Driven Design: Tackling complexity in the Heart of Software, 2003)》中所提出的，書中正式地提出了許多軟體開發的概念。&lt;/p&gt;
&lt;p&gt;我無法用一篇文章就概括 DDD，與 DDD 相關的重要概念實在太多了。以下列出我認為一些重要的 DDD 概成，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubiquitous Language&lt;/li&gt;
&lt;li&gt;Layers&lt;/li&gt;
&lt;li&gt;Bounded Contexts&lt;/li&gt;
&lt;li&gt;Anti-Corruption Layer&lt;/li&gt;
&lt;li&gt;Shared Kernel&lt;/li&gt;
&lt;li&gt;Generic Subdomain&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="通用語言-ubiquitous-language"&gt;通用語言 Ubiquitous Language&lt;/h1&gt;
&lt;p&gt;在軟體開發中，一個常見的問題是怎麼理解程式碼，它是什麼，它能做什麼，它如何做，它為什麼這樣做…如果程式碼使用的術語與領域專家使用的術語不同，理解程式碼便變得更加複雜。例如，如果領域專家談論的是 &lt;em&gt;elder users&lt;/em&gt;，而程式碼中提到的是 &lt;em&gt;supervisors&lt;/em&gt;，那麼名詞可能就會造成在討論應用程式時造成混淆。然而，大部分的模糊性可以透過適當地命名類別和方法來解決，讓類別的命名明確地表達出物件是什麼，讓方法的命名明確地表達出方法在領域上下文中做了什麼事。&lt;/p&gt;
&lt;p&gt;使用通用語言的主要概念是將應用程式與商業邏輯對齊，這是通過在程式碼中採用業務與技術之間的共同語言所實現的。該語言的來源是公司的業務部門，它們擁有需要實施的概念，但術語則與公司的技術部門&lt;strong&gt;協商&lt;/strong&gt;(這意味著業務部門並不總是選擇最佳命名)&lt;strong&gt;以創建一種業務與程式開發人員共通且不會發生歧義的共同語言&lt;/strong&gt;。包含程式碼、類別、方法、屬性和模組的命名都最重與通用語言對齊。&lt;/p&gt;
&lt;h1 id="層-layers"&gt;層 Layers&lt;/h1&gt;
&lt;p&gt;我在之前的文章中已經談過分層的概念，但我認為此刻重提由DDD所識別的各層是很重要的&lt;/p&gt;
&lt;h2 id="user-interface-使用者介面"&gt;User Interface 使用者介面&lt;/h2&gt;
&lt;p&gt;負責繪製用戶與應用程式互動的螢幕，並將用戶的輸入轉換為應用程式命令。值得注意的是，「用戶」可以是人類，但也可以是連接到我們API的其他應用程式，這完全對應於EBI架構中的邊界對象。&lt;/p&gt;
&lt;h2 id="application-layer-應用層"&gt;Application Layer 應用層&lt;/h2&gt;
&lt;p&gt;協調領域對象以執行用戶所需的任務：用例。它不包含業務邏輯。這與EBI架構中的互動者相關，只是互動者是與UI或實體無關的任何對象，而在這種情況下，應用層只包含與用例相關的對象。這一層是應用服務所屬的地方，因為它們是用例協調發生的容器，使用存儲庫、領域服務、實體、價值對象或任何其他領域對象。&lt;/p&gt;
&lt;h2 id="domain-layer-領域層"&gt;Domain Layer 領域層&lt;/h2&gt;
&lt;p&gt;這是包含所有業務邏輯的層，包括領域服務、實體、事件以及任何其他包含業務邏輯的對象類型。顯然，它與EBI的實體對象類型有關。這是系統的核心。領域服務將包含不完全適合於實體的領域邏輯，通常在完成某些領域動作時協調多個實體。&lt;/p&gt;
&lt;h2 id="infrastructure-基礎建設"&gt;Infrastructure 基礎建設&lt;/h2&gt;
&lt;p&gt;支援上層的技術能力，即持久性或訊息傳遞。
&lt;img alt="ddd" loading="lazy" src="https://herbertograca.files.wordpress.com/2017/04/ddd_layers.png?w=345&amp;h=330"&gt;&lt;/p&gt;
&lt;h1 id="有界上下文"&gt;有界上下文&lt;/h1&gt;
&lt;p&gt;在企業應用中，模型可能會大幅增長，同時進行程式碼開發的團隊規模也可能會擴大。這帶來了兩個問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;開發人員必須處理的程式碼庫越大，認知負荷就越大，理解程式碼的難度也就越高，因此可能會引入更多的錯誤和判斷失誤，&lt;/li&gt;
&lt;li&gt;越多的開發人員在同一個程式碼庫上工作，就愈難協調對應用程式的共同技術與領域視野。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;換句話說，手頭的問題變得過於龐大。&lt;/p&gt;
&lt;p&gt;對於大問題的常見解決方案是將其分解成較小的部分，這正是「有界上下文」發揮作用的地方。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two subsystems commonly serve very different user communities - &lt;em&gt;&lt;strong&gt;Eric Evans 2014, Domain-Driven Design Reference&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
兩個子系統通常服務於截然不同的用戶群體 - &lt;em&gt;&lt;strong&gt;Eric Evans 2014，領域驅動設計參考&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description></item><item><title>[IT] 套件與命名空間 packaging &amp; namespacing</title><link>https://intervalrain.github.io/hgraca/packaging-code/</link><pubDate>Mon, 23 Oct 2023 23:14:14 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/packaging-code/</guid><description>&lt;p&gt;系統的架構是該系統的高層視圖、大局觀，以粗略的筆觸描繪的系統設計。架構決策是系統中的結構性決策，影響整個程式庫的決策，也是定義其他所有元素將在其上建立的決策。&lt;/p&gt;
&lt;p&gt;架構決定系統的許多元素，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;組件 Components&lt;/li&gt;
&lt;li&gt;組件之間的關係 Relationships between components&lt;/li&gt;
&lt;li&gt;指導組件與組件間關係如何設計與如何演化 Principles guiding the design and evolution of components and relationships&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;換句話說，這些是隨著系統演進更難改變的設計決策，它們是支撐功能開發的基礎。&lt;/p&gt;
&lt;h1 id="義大利麵架構-spaghetti-architecture"&gt;義大利麵架構 Spaghetti Architecture&lt;/h1&gt;
&lt;p&gt;有些專案，結構隨機，既不反映架構，也不反映領域。如果我問「我應該把這個 value object 放在哪裡？」結果得到「把它放在 src 資料夾的某個地方」這樣的回答；如果我問「執行這個邏輯的 service 在哪裡？」卻得到「用你的 IDE 進行搜索」這樣的回答。這意味著專案沒有經過組織，這樣鬆散的結構就稱為義大利麵架構(Spaghetti Architecture)。&lt;/p&gt;
&lt;p&gt;這是一個大問題，因為這意味著沒有套件模組化，高階的程式碼關係和流程並沒有可以遵循的邏輯結構，導致模組之間高度耦合且低內聚，實際上可能代表根本沒有模組，應該屬於模組的程式碼散佈在整個程式碼庫中。&lt;/p&gt;
&lt;h1 id="可維護的程式碼庫"&gt;可維護的程式碼庫&lt;/h1&gt;
&lt;p&gt;擁有一個可維護的程式庫意味著我們可以變更最少的程式碼來實現最大的概念變更。換句話說，當我們需要對一個程式碼單元進行變更時，我們應該盡可能少地對其他程式碼單元進行變更。&lt;/p&gt;
&lt;p&gt;這樣帶來的優點有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程式碼的修改變得簡單，因為它們對較少的程式碼產生影響。&lt;/li&gt;
&lt;li&gt;程式碼的修改會更快，因為需要修改的程式碼較少。&lt;/li&gt;
&lt;li&gt;因為修改的程式碼變少，出現錯誤的可能性也更低。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;封裝(encapsulation)&lt;/strong&gt;、**低耦合(low coupling)&lt;strong&gt;和&lt;/strong&gt;高內聚(high cohesion)**是使程式碼隔離的核心原則，使得我們能夠擁有可維護的程式碼基礎。&lt;/p&gt;
&lt;h2 id="封裝-encapsulation"&gt;封裝 Encapsulation&lt;/h2&gt;
&lt;p&gt;這是隱藏類別的內部訊息與實作的過程。&lt;/p&gt;
&lt;p&gt;也就是說，它對外隱藏了實作的方式，使得一個類別的內部結構可以自由變更，而不會影響使用這個特定類別的其他類別。&lt;/p&gt;
&lt;h2 id="低耦合-low-coupling"&gt;低耦合 Low coupling&lt;/h2&gt;
&lt;p&gt;耦合是指一個程式碼單元與另一個程式碼單元的關係。如果對一個模組的更改將導致對另一個模組的更改，則該模組被認為與另一個模組高度耦合。而如果一個模組獨立於任何其他模組，則該模組被認為是低耦合的。這可以通過擁有一個穩定的介面來實現，有效地隱藏了對其他模組的實現。&lt;/p&gt;
&lt;h3 id="低耦合的好處"&gt;低耦合的好處&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可維護性(maintainability) - 變更僅限於單一模組&lt;/li&gt;
&lt;li&gt;可測試性(testability) - 可以將單元測試涉及的模塊限制到最小&lt;/li&gt;
&lt;li&gt;可讀性(readability) - 需要分析的類別被保持在最小範圍內&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="高內聚-high-cohesion"&gt;高內聚 High Cohesion&lt;/h2&gt;
&lt;p&gt;內聚性是指一個模塊的功能之間的緊密相關程度的衡量。低內聚是指模組間具有許多不相關的職責；高內聚是指模組間有類似的概念。&lt;/p&gt;
&lt;h3 id="高內聚的好處"&gt;高內聚的好處&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可讀性(readability) - 相關的功能都包含在單一模塊中&lt;/li&gt;
&lt;li&gt;可維護性(maintainability) - bug 通常會被限制在單一模組中&lt;/li&gt;
&lt;li&gt;重用性(reusability) - 專注於類別的功能，不被無用的功能污染&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="結構上的影響"&gt;結構上的影響&lt;/h1&gt;
&lt;p&gt;前述的原則通常與類別相關，然而，它們對於類別群組也同樣適用。類別群組在一般情況下被稱為套件(package)，但如果它們具有純粹的功能性目標(例如 ORM)，我們可以更具體地稱呼它們為模組(module)；如果它們具有領域目標(例如 AccountManagement)，我們可以稱呼它們為組件(components)。這與 Bass, Clements 和 Kazman 在他們的書《實踐軟體架構(Software Architecture in Practice)》中解釋的定義是一致的。&lt;/p&gt;</description></item><item><title>[IT] EBI 架構</title><link>https://intervalrain.github.io/hgraca/ebi-architecture/</link><pubDate>Sun, 22 Oct 2023 23:54:36 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/ebi-architecture/</guid><description>&lt;p&gt;EBI 架構全名是 Entity-Boundary-Interactor Architecture，第一次由 Robert C. Martin 在他乾淨架構(Clean Architecture)中的演講中提到。&lt;/p&gt;
&lt;p&gt;然而，EBI 架構正式的發布是來自 Ivar Jacobson 在 1992 年所出版的 &lt;em&gt;&lt;strong&gt;《物件導向的軟體工程：用例驅動方法(Object-Oriented Software Engineering: A use case driven approach)》&lt;/strong&gt;&lt;/em&gt;。當時，Jacobson 實際上稱之為 Entity-Interface-Control，爾後才進行更名，為了避免將 Interface 與程式語言中的 Interface 或 User Interface 混淆；也避免將 Control 與 MVC 中的 Controller 混淆。&lt;/p&gt;
&lt;p&gt;&lt;img alt="EBI" loading="lazy" src="https://herbertograca.files.wordpress.com/2017/04/fig_7_12_entity_interface_control.jpg"&gt;&lt;/p&gt;
&lt;h1 id="entity-實體"&gt;Entity 實體&lt;/h1&gt;
&lt;p&gt;Entity objects 持有所有系統使用的數據且持有所有與數據耦合的行為。每個 Entity object 代表一個與問題領域相關的概念，同時具備身份(identity)與永久性(persistence)。Jacobson 告訴我們，Entity object 應該要包含那些會因 entity 自身變化而變化的邏輯，也就是說，如果它持有的數據結構改變，則對該數據的操作也將需要變化，因此它們應該位於 entity中。&lt;/p&gt;
&lt;p&gt;值得注意的是，Jacobson在1992年就已經發出了一個警告：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Beginners may sometime only use entity object as data carriers and place all dynamic behaviour in control objects […]. This should, however be avoided. […] Instead, quite a lot of behaviour should be placed in the entity objects.&lt;/em&gt; - &lt;em&gt;&lt;strong&gt;Ivar Jacobson 1992, pp. 134&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;初學者有時可能只將實體物件用作數據載體，並將所有動態行為放在控制物件中[&amp;hellip;]。然而，這樣的做法應該避免[&amp;hellip;]。相反，應該將相當多的行為放在實體物件中。&lt;/em&gt; - &lt;em&gt;&lt;strong&gt;伊瓦爾‧雅各布森 1992, pp. 134&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description></item><item><title>[IT] Model1 &amp; Model2</title><link>https://intervalrain.github.io/hgraca/model-1-model-2/</link><pubDate>Thu, 19 Oct 2023 22:47:32 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/model-1-model-2/</guid><description>&lt;p&gt;Java Server Pages (JSP) 是一種技術，這種腳本語言與 PHP、ASP，甚至 Python 相當，用於創建由 JVM 解釋的伺服器端頁面，並可以使用 Java 物件。&lt;/p&gt;
&lt;p&gt;首次由 Sun Microsystems 於 1998 年發布的 JSP 規範，定義了兩種結構化應用程式的方式，使得呈現邏輯能與業務邏輯，甚至是在 HTTP 請求/回應範疇中的使用案例，進行解耦。&lt;/p&gt;
&lt;p&gt;有些人認為這些&amp;quot;Model1&amp;quot;和&amp;quot;Model2&amp;quot;是首次嘗試將原本為桌面軟體開發環境而設計的 MVC 模式，適配到網路 HTTP 請求/回應範疇的嘗試。&lt;/p&gt;
&lt;h1 id="model1"&gt;Model1&lt;/h1&gt;
&lt;p&gt;JSP 規範 v0.92 的首次提議，是將 JSP 作為唯一的呈現工具，其中包含所有的呈現和用例邏輯。
&lt;img alt="model1" loading="lazy" src="https://herbertograca.files.wordpress.com/2018/08/beans.jpg"&gt;
這種方法對當時的大多數使用情況可能已經足夠好，因為當時的網路大部分是由簡單的動態頁面組成，而不是我們今天所熟知的複雜的網路企業應用程式。&lt;/p&gt;
&lt;h1 id="model2"&gt;Model2&lt;/h1&gt;
&lt;p&gt;關於如何使用 JSP 的第二個建議，當時是針對被視為複雜的網路應用程式而設計的。然而，請記住，如今的網路應用程式的規模和複雜度已經更高了。
&lt;img alt="model2" loading="lazy" src="https://herbertograca.files.wordpress.com/2018/08/scenario2.jpg"&gt;
在“Model2”中，一個 HTTP 請求會到達一個 servlet，該 servlet 會解釋 HTTP 請求，使用 Java 物件和 EJBs（repositories）執行一些用例邏輯，收集結果數據，並將該數據傳遞給一個 JSP，該 JSP 再渲染頁面，並發送回客戶端。在“Model2”中，JSPs 僅作為模板引擎使用。&lt;/p&gt;
&lt;p&gt;在1999年，Govind Seshadri 發表了一篇文章，其中他將&amp;quot;Model2&amp;quot;對應到 MVC：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;servelet 是 Controller，它控制應如何處理用戶的請求。&lt;/li&gt;
&lt;li&gt;JSP 是 View，它決定了顯示給使用者的內容。&lt;/li&gt;
&lt;li&gt;在 MVC 和&amp;quot;Model2&amp;quot;中，Model 指的都是一整個領域模型(domain model)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="我的看法"&gt;我的看法&lt;/h1&gt;
&lt;p&gt;這兩種方法至今只能說是堪用，但對今日的網路企業應用程式而言，我們需要更好的東西，因為這兩種模式都不遵守單一職責原則(Single Respoinsibility Pinciple, RSP)。&lt;/p&gt;</description></item><item><title>[IT] Action-Domain-Responder(ADR) 架構</title><link>https://intervalrain.github.io/hgraca/action-domain-responder/</link><pubDate>Thu, 19 Oct 2023 22:43:08 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/action-domain-responder/</guid><description>&lt;p&gt;這篇文章將討論 MVC 的另一種變體：由 Paul M. Jones 創建的 Action-Domain-Responder。&lt;/p&gt;
&lt;h1 id="2014--action-domain-responderadr"&gt;2014 – Action-Domain-Responder(ADR)&lt;/h1&gt;
&lt;p&gt;ADR 模式是由 Paul M. Jones 於 2014 年創建的，其想法就像 RMR 一樣，是為了將 MVC 調整到網路 REST APIs的 情境中。ADR 的原始解釋非常簡單明瞭，我實在無法更好地改述它，所以我將在這裡複製/貼上部分內容，並只添加一些更多的評論。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ADR" loading="lazy" src="https://herbertograca.files.wordpress.com/2018/09/adr-22.png"&gt;&lt;/p&gt;
&lt;h2 id="action-行動"&gt;Action 行動&lt;/h2&gt;
&lt;p&gt;Is the logic to connect the Domain and Responder. It invokes the Domain with inputs collected from the HTTP request, then invokes the Responder with the data it needs to build an HTTP response.
這是連接 domain 和 responder 的邏輯，它會用從 HTTP 收集來的請求來觸發 domain，接著使用需要構建 HTTP 響應的數據來調用 responder。&lt;/p&gt;</description></item><item><title>[IT] Resource-Method-Representation(RMR) 架構</title><link>https://intervalrain.github.io/hgraca/resource-method-representation/</link><pubDate>Thu, 19 Oct 2023 22:17:59 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/resource-method-representation/</guid><description>&lt;p&gt;MVC 於 1979 年在桌面應用程式與 CLI 使用者介面的背景下出現，這意味著如果資料庫因使用者以外的某些因素發生變化，則使用者介面將自動更改。同樣的模式後來在具有 GUI 的桌面應用程式上也完全可用。&lt;/p&gt;
&lt;p&gt;然而，其在網路應用程式中的使用一直都是一種調適，因為大多數的網路應用程式並不會因為伺服器端的變更而改變使用者介面，使用者介面總是會呼叫伺服器端要求更新畫面。&lt;/p&gt;
&lt;p&gt;我之前已經談過 MVC 模式的變體，這篇文章將討論另一種變體：&lt;strong&gt;Resource-Method-Representation&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我覺得有必要談論這個議題，是因為我曾對它產生誤解，認為它與 ADR 模式一樣，而我很快就會寫到這一點。&lt;/p&gt;
&lt;h1 id="2008--resource-method-representationrmr"&gt;2008 – Resource-Method-Representation(RMR)&lt;/h1&gt;
&lt;p&gt;RMR 模式是由 Paul James 在 2008 年創建的，它將 MVC 模式適配到 REST APIs 的情境中。&lt;/p&gt;
&lt;h2 id="resource-資源"&gt;Resource 資源&lt;/h2&gt;
&lt;p&gt;The idea is that the Entities are modelled as REST resources (the first R in the pattern name), with its only public methods mapping to an HTTP method:
這個概念是將實體模型化為 REST resources 資源（RMR中的第一個R），與其唯一的公開方法映射到一個 HTTP 方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-php" data-lang="php"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// taken from http://www.peej.co.uk/articles/rmr-architecture.html
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Resource&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;resourceData&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;method&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;constructor&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;dataSource&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// load data from data source
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;method&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Response&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;200&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;getRepresentation&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;url&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;resourceData&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;method&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;put&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Response&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;405&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;method&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;post&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Response&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;405&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;method&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;delete&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Response&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;405&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="method-方法"&gt;Method 方法&lt;/h2&gt;
&lt;p&gt;當向 API 發出請求時，該請求會被路由到這些業務物件之一，即資源，並且在此資源上被調用的方法對應於請求的 HTTP 方法。然後，這個業務物件上的方法負責返回一個完整的 &lt;em&gt;http&lt;/em&gt; 響應，包括其狀態碼和 headers 信息。&lt;/p&gt;</description></item><item><title>[IT] MVC 及其變形</title><link>https://intervalrain.github.io/hgraca/mvc-and-its-variants/</link><pubDate>Thu, 19 Oct 2023 10:54:19 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/mvc-and-its-variants/</guid><description>&lt;p&gt;創立一個可維護的應用程式一直是程式設計的一項長期挑戰。&lt;/p&gt;
&lt;p&gt;不久前，我在一家公司工作，其核心業務應用是一個 SaaS 平台，被幾千個客戶公司使用，這項應用程式已經運營了三年，其中的程式碼混雜了 HTML, CSS, 業務邏輯及 SQL，當然，在應用程式推出後的兩年，公司決定開始重構。儘管我們知道這樣的做法是不好的，且我們也知道如何避免，但是這樣的情況還是時常發生。&lt;/p&gt;
&lt;p&gt;然後，回溯到 1970 年代，混合職責是很常見的做法，且人們仍在努力尋找如何改進。隨著應用程式的複雜性提升，對 UI 的更動必然會導致業務邏輯的更改，從而增加了修改的複雜度、執行的時間與 bug 出現的可能性。(因為會有更多的程式碼被更改)。&lt;/p&gt;
&lt;h1 id="1979---model-view-controller"&gt;1979 - Model-View-Controller&lt;/h1&gt;
&lt;p&gt;&lt;img alt="mvc" loading="lazy" src="https://herbertograca.files.wordpress.com/2017/04/mvc.jpg"&gt;
為了解決上述問題，Trygve Reenskaug 於 1979 年提出了 MVC 架構，以此來將關注點分離，將 UI 與業務邏輯分離。該模式被應用於 1973年出現的桌面 GUI。&lt;/p&gt;
&lt;p&gt;MVC 架構將程式分為三個部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt;: 模型，代表了商業邏輯。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;: 視圖，代表了 UI 中的組件，如 button, text box 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt;: 控制器，負責協調視圖和模型之間的配合，這意味著它：
&lt;ul&gt;
&lt;li&gt;決定要顯示哪些視圖，以及使用什麼數據。&lt;/li&gt;
&lt;li&gt;將使用者行為轉化為業務邏輯。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A model could be a single object (rather uninteresting), or it could be some structure of objects.&lt;/em&gt; - &lt;em&gt;&lt;strong&gt;Trygve Reenskaug 1979, MVC&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;一個模型可以是單一物件(相對無趣)，或可以是一些物件的結構。&lt;/em&gt; - &lt;em&gt;&lt;strong&gt;特里格維‧倫斯考 1979, MVC&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description></item><item><title>[IT] 分層架構 Layered Architecture</title><link>https://intervalrain.github.io/hgraca/layered-architecture/</link><pubDate>Tue, 17 Oct 2023 21:44:07 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/layered-architecture/</guid><description>&lt;p&gt;分層是一種常見於系統中做法，用於分隔或組織程式碼，根據程式碼在系統中的角色或職責。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In an object-oriented program, UI, database, and other support code often gets written directly into the business objects. Additional business logic is embedded in the behaviour of UI widgets and database scripts. This happens because it is the easiest way to make things work, in the short run.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;When the domain-related code is diffused through such a large amount of other code, it becomes extremely difficult to see and to reason about. Superficial changes to the UI can actually change business logic. To change a business rule may require meticulous tracing of UI code, database code, or other program elements. Implementing coherent, model-driven objects becomes impractical. Automated testing is awkward. With all the technologies and logic involved in each activity, a program must be kept very simple or it becomes impossible to understand.&lt;/em&gt; - &lt;em&gt;&lt;strong&gt;Eric Evans 2014, Domain-Driven-Design&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;在物件導向的程式中，使用者介面、資料庫和其他輔助程式碼常常直接被寫入商業物件中，額外的商業邏輯被嵌入在使用者介面和資料庫腳本，因為這是最簡單且最快速使事情可以運作的方式，導致這種情況時常發生。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;當與領域相關的程式碼在更大量的程式碼中擴散，程式碼便開始變得困難且難以理解，UI 的變更可能導致業務邏輯的改變，同樣地，業務邏輯的更動需要密切地追縱 UI、資料庫與組其它組件的程式碼。實作內聚且以模型驅動的物件變得不可行、自動化測試變得笨拙，由於每個動作都涉及到所有的技術和邏輯，程式必須保持簡單，否則就會難以理解。&lt;/em&gt; - &lt;em&gt;&lt;strong&gt;艾瑞克‧埃文斯 2014, 領域驅動設計&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description></item><item><title>[IT] 單體架構 Monolithic Architecture</title><link>https://intervalrain.github.io/hgraca/monolithic-architecture/</link><pubDate>Sun, 15 Oct 2023 12:06:51 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/monolithic-architecture/</guid><description>&lt;p&gt;建立一個單體系統一直以來都是預設的架構風格，最初軟體開發剛萌芽時，每個應用程式只有一個檔案，然後才出現了包含多個檔案的應用程式，並且直到1990年代我們才開始看到由其他應用程式組成的應用程式（儘管第一次的實驗是在1980年代進行的）。&lt;/p&gt;
&lt;p&gt;單體結構自身也在演進，當應用程式開始使用多個檔案進行建構時，因為這些應用程式相對簡單，所以對每個檔案的職責與檔案之間的關係並沒有太多的思考。但隨著應用程式變得越來越大且越來越複雜，我們便開始需要思考要創建哪些檔案以及如何關聯它。&lt;/p&gt;
&lt;h1 id="模組化軟體開發-modular-software-development"&gt;模組化軟體開發 Modular Software Development&lt;/h1&gt;
&lt;p&gt;模組化程式設計是在 1960 年代晚期和 1970年代 所提出的解決方案。它是從類別演變到對粒度更大程式碼單元進行明確定義(explicit definition)，程式語言以不同程度的明確性(explicitness)實現了模組化。&lt;/p&gt;
&lt;p&gt;例如，JAVA 具有 &lt;code&gt;default&lt;/code&gt; 和 &lt;code&gt;public&lt;/code&gt; 的類別級別可見性，其中 &lt;code&gt;default&lt;/code&gt; 級別意味著一個類別只在其套件（模組）中可見，而 &lt;code&gt;public&lt;/code&gt; 則意味著該類別在其套件（模組）內外都可見，這讓我們可以定義哪些類別可以當作套件被客戶端使用。&lt;/p&gt;
&lt;h1 id="組件化軟體開發-componentized-software-development"&gt;組件化軟體開發 Componentized Software Development&lt;/h1&gt;
&lt;p&gt;另一種模組化的風格是組件。如我在之前的文章中所解釋的，組件是以領域概念為基礎創建的模塊。理想情況下，它們是可以用來創建複合應用的獨立「應用程式」。這種風格的一個常見例子是 pipes 和 filters 架構，這在 Unix 系統中被廣泛使用，並允許我們做像 &lt;code&gt;ps -ef | grep php&lt;/code&gt; 這樣的操作。另一個例子是使用微服務作為複合應用的組件，如 Netflix。&lt;/p&gt;
&lt;p&gt;這種程式碼組織方式也已經存在很長時間了，可以追溯到1960年代末，就像模組化軟體開發一樣。&lt;/p&gt;
&lt;h1 id="現代的單體架構"&gt;現代的單體架構&lt;/h1&gt;
&lt;p&gt;現今，擁有單體架構風格簡單來說就是所有的應用程式碼都被&lt;strong&gt;部署(deployed)&lt;/strong&gt; 並在單一&lt;strong&gt;節點(node)&lt;/strong&gt; 上作為單一進程運行。我們假設它正在使用模組和組件，儘管事實上往往並非如此。&lt;/p&gt;
&lt;p&gt;理解這裡的關鍵詞「部署」和「節點」至關重要。關於第一個詞，部署，這意味著無論程式碼在物理上儲存在一個或多個儲存庫的任何地方，重要的是它在運行時是如何組織的。關於第二個關鍵詞，節點，這意味著即使我們將應用程式部署到多個服務器，就像在水平擴展的情況下，它仍然是一個單體。&lt;/p&gt;
&lt;p&gt;在單一節點伺服器中，單體中的所有模組都被組裝到同一記憶體 image 中，並在單一節點上作為單一進程運行。通訊是通過同一 heap 和 stack 進行標準程式調用。正是這種單一記憶體 image 使得應用程序變得單體化。如果你在不同的進程中運行模組，那麼你正在進行 IPC。因為模組落入不同的進程邊界，你將開始面臨分散式計算的挑戰，這就進入了微服務領域。&lt;/p&gt;
&lt;p&gt;這種風格，儘管聲名狼藉，但即使對於大型應用程式也能運作得相當好。只有當我們需要以下情況時，它才不再足夠好：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同領域組件的&lt;strong&gt;獨立可擴展性(Independent scalability)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;需要用&lt;strong&gt;不同的程式語言&lt;/strong&gt;撰寫不同的組件或模組；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;獨立部署能力(Independent deployability)&lt;/strong&gt;，或許是因為我們的釋出速率超過了單一程式碼庫的部署管道所能處理的範圍，導致一個版本的部署變慢，因為它需要等待其他版本的部署，甚至導致部署佇列的增長速度超過了它的消耗速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在那個時候，我們需要將我們的單體系統分離成不同的應用程式，並採用SOA架構風格（關於這點將在後續的文章中詳述）。&lt;/p&gt;
&lt;h1 id="反模式大泥球義大利麵條式架構-anti-pattern-big-ball-of-mud--spaghetti-architecture"&gt;反模式：大泥球/義大利麵條式架構 Anti-pattern: Big Ball of Mud / Spaghetti Architecture&lt;/h1&gt;
&lt;p&gt;&lt;img alt="spaghetta" loading="lazy" src="https://herbertograca.files.wordpress.com/2017/03/spaghetti.png"&gt;
所謂的「泥球」，又稱為「義大利麵條式架構」，就是這種風格的反模式，其中套件的結構和關係並不明確，結構的內聚力和封裝性幾乎不存在，依賴性沒有遵循任何規則，並且很難理解子系統，以進行變更和重構。該系統是不透明的，黏稠的，脆弱的，且僵硬的：一個大泥球！&lt;/p&gt;</description></item><item><title>[IT] 架構風格 vs. 架構模式 vs. 設計模式 Architectural Styles vs. Architectural Patterns vs. Design Patterns</title><link>https://intervalrain.github.io/hgraca/architectural-styles-vs-architectural-patterns-vs-design-patterns/</link><pubDate>Sat, 14 Oct 2023 14:29:21 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/architectural-styles-vs-architectural-patterns-vs-design-patterns/</guid><description>&lt;p&gt;在上一篇文章中，我介紹了程式語言的演進，以及它告訴我們的事情：軟體發展的驅勢是走向更多的&lt;strong&gt;模組化(modularity)&lt;strong&gt;與&lt;/strong&gt;封裝(encapsulation)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在接下來的文章，我會開始介紹架構風格與架構模式的演進。首先，我們要先知道什麼是架構風格，什麼是架構模式。&lt;/p&gt;
&lt;p&gt;在軟體開發中的眾多術語中，定義往往不夠明確，卻不同人都有自己不同的解釋。MSDN 認為架構風格(architectural styles)與架構模式(architectural patterns)是同一碼子事，但我個人更傾向於 George Fairbanks 與 Michael Keeling 在 stack overflow 中與維基百科中的解釋。其關鍵的差異在於&lt;strong&gt;範疇(scope)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同時，我們也需要強調這個觀念：架構風格、架構模式和設計模式並非互斥，它們相輔相成，每一種都能帶給我們一些啟示。然而，如同常情，我們只應在需要時才使用它們。&lt;/p&gt;
&lt;h1 id="architectural-styles-架構風格"&gt;Architectural Styles 架構風格&lt;/h1&gt;
&lt;p&gt;架構風格非常大方向的告訴我們該如何組織我們的程式碼，它有著高層次的粒度。它定義了層的概念，尤其應用程式的高階模組。它告訴我們模組與層之間是怎麼交互作用的、它們的關係等等。架構風格的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Component-based&lt;/li&gt;
&lt;li&gt;Monolithic application&lt;/li&gt;
&lt;li&gt;Layered&lt;/li&gt;
&lt;li&gt;Pipes and filters&lt;/li&gt;
&lt;li&gt;Event-driven&lt;/li&gt;
&lt;li&gt;Publish-subscribe&lt;/li&gt;
&lt;li&gt;Plug-ins&lt;/li&gt;
&lt;li&gt;Client-server&lt;/li&gt;
&lt;li&gt;Service-oriented&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一種建架構格可以透過各種方式實現，包括特定的技術環境、特定的政策、框架或實踐方法。&lt;/p&gt;
&lt;h1 id="architectural-patterns-架構模式"&gt;Architectural Patterns 架構模式&lt;/h1&gt;
&lt;p&gt;模式是一種對反覆出現的問題的反覆解決方案。在架構模式的情況下，他們解決與架構風格相關的問題。例如，「我們該有哪些類別，它們該如何互動，以實現具有特定層次的系統」，又或者「我們的服務導向架構將擁有哪些高級模組，以及他們將如何溝通」，或者「我們的客戶端-伺服器架構將擁有多少層」。&lt;/p&gt;
&lt;p&gt;架構模式對程式碼庫有著廣泛的影響，通常會橫向（即如何在一層內結構化程式碼）或縱向（即如何從外層處理請求到內層並返回）影響整個應用程式。架構模式的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Three-tier 三層架構&lt;/li&gt;
&lt;li&gt;Microkernel 微核心&lt;/li&gt;
&lt;li&gt;Model-View-Controller 模型-視圖-控制器&lt;/li&gt;
&lt;li&gt;Model-View-ViewModel 模型-視圖-視圖模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="design-patterns-設計模式"&gt;Design Patterns 設計模式&lt;/h1&gt;
&lt;p&gt;設計模式與架構模式在範疇上有所不同，它們更為局部化，對程式碼庫的影響較小，它們只影響程式碼的特定部分，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何在我們只知道在運行時需要實例化什麼類型的情況下實例化一個對象（可能是一個工廠類別？）&lt;/li&gt;
&lt;li&gt;如何讓一個物件根據其狀態（可能是一個狀態機，或者是策略模式？）表現出不同的行為？&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="conclusion-結論"&gt;Conclusion 結論&lt;/h1&gt;
&lt;p&gt;如我在這篇文章的開頭所提到的，一切都關於&lt;strong&gt;範疇(scope)&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;架構風格是在最高抽象層次上的應用設計。&lt;/li&gt;
&lt;li&gt;架構模式是實現架構風格的一種方式。&lt;/li&gt;
&lt;li&gt;設計模式是解決局部問題的一種方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，一種模式可能既可以作為架構模式，也可以作為設計模式使用，這再次取決於我們在特定項目中使用它的範疇。&lt;/p&gt;</description></item><item><title>[IT] 程式語言的演進 Programming Language Evolution</title><link>https://intervalrain.github.io/hgraca/programming-language-evolution/</link><pubDate>Sat, 14 Oct 2023 02:09:18 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/programming-language-evolution/</guid><description>&lt;p&gt;程式設計語言本身並非架構的產物，但如果我不寫關於它，我會覺得《軟體架構編年史》似乎缺少了些什麼。&lt;/p&gt;
&lt;p&gt;那麼，讓我們快速回顧一下程式語言的歷史，它的演變，並檢查我們可以從中學到什麼。我在文章中加入了一些日期，僅作為參考，它們應被視為大致的估計，重要的是演變的順序和他們試圖解決的問題。&lt;/p&gt;
&lt;h1 id="1950s---non-structured-programming"&gt;1950s - Non-structured Programming&lt;/h1&gt;
&lt;p&gt;Assembly ~1951&lt;/p&gt;
&lt;p&gt;軟體開發曾是一項非常晦澀的活動，只在世界上少數地方進行。當時流行的語言是組合語言，它使用了非常低階的操作，如 &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;goto&lt;/code&gt;，並直接操作記憶體地址。建立一個簡單的應用程式既緩慢又困難。要創建一個簡單的 &lt;code&gt;if&lt;/code&gt; 語句，我們需要幾行程式碼，對於一個迴圈，則需要超過幾行的程式碼&amp;hellip;稍後才出現了將程式碼分組和重用的可能性，所以當時的編碼風格非常線性，程式碼的重用僅限於在檔案內或檔案間複製和貼上程式碼。&lt;/p&gt;
&lt;h1 id="1960s--structured-programming"&gt;1960s – Structured Programming&lt;/h1&gt;
&lt;p&gt;Algol ~1958, Fortran&lt;/p&gt;
&lt;p&gt;結構化程式設計出現了，引入了 code blocks 概念，控制結構 &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;then&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &amp;hellip;，和子程序的構造。然後，我們可以創建更有趣的程式流程，更重要的是，我們可以將程式碼指令分組並重用它，儘管有一些限制，例如子程序總是對同一全域變數進行操作。但就在這個時候，&lt;strong&gt;重用性 (reusability)&lt;/strong&gt; 的概念開始被使用。&lt;/p&gt;
&lt;h1 id="1970s--procedural--functional-programming"&gt;1970s – Procedural &amp;amp; Functional Programming&lt;/h1&gt;
&lt;p&gt;Pascal ~1970, C ~1972&lt;/p&gt;
&lt;p&gt;程序和函數式程式設計在1970年代開始活躍起來。到了這個時候，我們終於有了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序(Procedures)&lt;/strong&gt;：一組不返回數據的指令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函式(Functions)&lt;/strong&gt;：一組會回傳資料的指令集&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;資料結構(Data structures)&lt;/strong&gt;：記錄，類似於關聯式陣列&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模組(Modules)&lt;/strong&gt;：可以被導入到其他程式碼檔案的程式碼檔案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在1970年代，「Spaghetti code」這個詞也被創造出來，這是在Edsger W. Dijkstra於1968年寫給「計算機機構通訊」(CACM)的信中提出的，該信的標題為「Go To Statement Considered Harmful」。&lt;/p&gt;
&lt;p&gt;在1970年代晚期，事件導向程式設計(Event Oriented Programming)的初步概念首次浮現，而Trygve Reenskaug則撰寫了他關於MVC（使用事件）的論文。&lt;/p&gt;
&lt;p&gt;有了這些改進，因此我們有更好的&lt;strong&gt;重用性(reusability)&lt;/strong&gt;，因為子程序（程序和函式），我們可以使用不同的數據執行相同的邏輯。我們也可以通過將相關數據分組到複雜的數據結構中來模擬&lt;strong&gt;領域概念(domain concepts)&lt;/strong&gt;。最後，我們在**解耦(decoupling)和模組化(modularity)**方面邁出了第一步，我們可以創建在其他程式碼文件和事件中可重用的程式碼，以將客戶端程式碼與正在執行的邏輯解耦。&lt;/p&gt;
&lt;h1 id="1980s--object-oriented-programming"&gt;1980s – Object Oriented Programming&lt;/h1&gt;
&lt;p&gt;Simula ~1965, Smalltalk-71 ~1971, C++ ~1980, Erlang ~1986, Perl ~1987,
Python ~1991, Ruby ~1993, Delphi, Java, Javascript, PHP ~1995&lt;/p&gt;</description></item><item><title>[IT] 軟體架構前提 The Software Architecture Premises</title><link>https://intervalrain.github.io/hgraca/software-architecture-premises/</link><pubDate>Sat, 14 Oct 2023 01:14:17 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/software-architecture-premises/</guid><description>&lt;p&gt;在這篇文章中，我將建立有關軟體架構的最初概念，這將有助於更好地理解接下來的文章。&lt;/p&gt;
&lt;h1 id="沒有萬靈丹"&gt;沒有萬靈丹&lt;/h1&gt;
&lt;p&gt;無論你如何理解我在《軟體架構編年史》中所談論的內容，最重要的是要明白，並不存在萬能的解決方案。儘可能多學習不同的方法，理解每種方法的優點和缺點，以及它們解決的具體技術問題。&lt;/p&gt;
&lt;p&gt;然後，在接受新的挑戰時，首先要理解業務和終端用戶的需求。只有在清楚理解這些需求之後，您才能理智地思考應該使用哪種架構風格和模式來更好地解決手頭的問題。&lt;/p&gt;
&lt;p&gt;最後，做出你自己的選擇，也許實施其中一種已知的解決方案，或者創建你自己的設計來適應你特定的問題。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Some architectural styles are often portrayed as ‘silver bullet’ solutions for all forms of software. However, a good designer should select a style that matches the needs of the particular problem being solved.&lt;/em&gt; - &lt;strong&gt;Roy Fielding, 2000&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;有些架構風格常被描繪為所有軟體問題的「萬靈丹」解決方案。然而，一個優秀的設計師應該選擇一種與特定問題需求相匹配的風格。&lt;/em&gt; - &lt;strong&gt;羅伊·菲爾丁，2000&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id="terminology-術語"&gt;Terminology 術語&lt;/h1&gt;
&lt;p&gt;在軟體開發的世界裡，使用的術語充滿了模糊性，因此，在繼續之前，澄清我所使用的一些術語的意義是非常重要的。&lt;/p&gt;
&lt;h2 id="functional-功能性的"&gt;Functional 功能性的&lt;/h2&gt;
&lt;p&gt;這是任何一段程式碼、方法、類別、類別群組，它在應用程式中擔任純粹的技術角色。它與領域無關，僅代表應用程式中的技術能力。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Layers&lt;/li&gt;
&lt;li&gt;Factories&lt;/li&gt;
&lt;li&gt;Repositories&lt;/li&gt;
&lt;li&gt;Value Objects&lt;/li&gt;
&lt;li&gt;Views&lt;/li&gt;
&lt;li&gt;ViewModels&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conceptual-概念性的"&gt;Conceptual 概念性的&lt;/h2&gt;
&lt;p&gt;這是任何一段代碼、方法、類別、一組類別，都反映了應用程式中的領域概念。它與領域直接相關，代表了應用程式中的業務能力。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User&lt;/li&gt;
&lt;li&gt;Product&lt;/li&gt;
&lt;li&gt;Stock Management&lt;/li&gt;
&lt;li&gt;Product Variants&lt;/li&gt;
&lt;li&gt;Checkout&lt;/li&gt;
&lt;li&gt;Upsells&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這種分離並不意味著一個程式碼單元不能以兩種方式（功能性和概念性）被引用。例如，一個 &lt;code&gt;Money&lt;/code&gt; 類別可以代表一個 domain concept，也可以是一個 value object。&lt;/p&gt;</description></item><item><title>[IT] 軟體架構編年史 The Software Architecture Chronicles</title><link>https://intervalrain.github.io/hgraca/the-software-architecture-chronicles/</link><pubDate>Fri, 13 Oct 2023 23:41:57 +0800</pubDate><guid>https://intervalrain.github.io/hgraca/the-software-architecture-chronicles/</guid><description>&lt;blockquote&gt;
&lt;p&gt;前言：這系列文章為翻譯自作者 &lt;a href="https://herbertograca.com/2017/07/03/the-software-architecture-chronicles/"&gt;hgraca&lt;/a&gt;。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;這篇文章是關於軟體架構系列文章的第一篇。在這些文章中，我將分享我所學習到的軟體架構知識，我如何看待它，以及我如何運用這些知識。&lt;/p&gt;
&lt;p&gt;我這一系列的文章稱為「軟體架構編年史」，並非因為我自認為是一位偉大的作家，而是因為我覺得這個名字有點俗氣，又帶點趣味。&lt;/p&gt;
&lt;p&gt;在這篇首篇文章中，我將會談論我為何要撰寫這一系列的文章，以及接下來將會有什麼內容。&lt;/p&gt;
&lt;h1 id="認識歷史的重要性"&gt;認識歷史的重要性&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Those who fail to learn History are doomed to repeat it.&lt;/em&gt; - &lt;strong&gt;George Santayana&lt;/strong&gt;, &lt;em&gt;&lt;strong&gt;The Life of Reason&lt;/strong&gt;&lt;/em&gt;, &lt;strong&gt;1905&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;未能學習歷史的人注定要重蹈覆轍。&lt;/em&gt; - &lt;strong&gt;喬治‧桑塔亞納&lt;/strong&gt;《&lt;em&gt;&lt;strong&gt;理性的生活&lt;/strong&gt;&lt;/em&gt;》，&lt;strong&gt;1905&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;我認為從歷史中學習是非常重要的，它能教導我們事情。在個人層面上，我們終究需要（也希望）能從錯誤中學習。從國家的角度來看，歷史幫助塑造我們的文化、創造群體的概念，因此有了「台灣人」的觀念，一種國家認同。同時，歷史也幫助我們從祖先的錯誤中學習，比如信仰那些有著怪異思想的人，如二戰…&lt;/p&gt;
&lt;p&gt;對程式開發者而言，歷史有助於我們仰靠前人的經驗上，少走許多錯的道路，並讓我們「站在巨人的肩膀上」達到更高的境界！&lt;/p&gt;
&lt;p&gt;在我成為更好的開發者路上，我閱讀了很多文章，觀看了許多演講，我盡我所能的站在巨人的肩膀上。&lt;/p&gt;
&lt;p&gt;有一件事情使我感到困惑，那就是許多意見是基於意見之上的意見…這就像是以訛傳訛，我們最終得到是對於一篇論文、文章或書籍真正內容的扭曲理解。&lt;/p&gt;
&lt;p&gt;因此，我開始在網路上搜尋原始的論文、文章和書籍，這些都是我認為對我的工作最重要的概念，並自己對它們進行思考。&lt;/p&gt;
&lt;p&gt;這些文章是這種推理的結果，因為我試圖理解這些概念是如何產生的，以某種程度上的時間順序來看。&lt;/p&gt;
&lt;p&gt;撰寫這些文章迫使我大量閱讀和思考所有議題，並幫助我理解當代在軟體開發中使用的技術。我希望這些文章能對更多開發者有所幫助。&lt;/p&gt;
&lt;p&gt;然而，如果你讀到一些你不理解或是不認同的內容，請告訴我，我非常願意討論這些議題，並從討論中學習，也願意修正我錯誤的觀點。&lt;/p&gt;
&lt;h1 id="文章列表"&gt;文章列表&lt;/h1&gt;
&lt;p&gt;&lt;a href="../software-architecture-premises"&gt;1. 軟體架構前提 (Software Architecture Premises)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../programming-language-evolution"&gt;2. 程式語言的演進 (Programming Languages Evolution)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=""&gt;3. 架構風格 / 架構模式 / 設計模式 (Architectural Styles vs. Architectural Patterns vs. Design Patterns)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../monolithic-architecture"&gt;4. 單體架構 (Monolithic Architecture)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../layered-architecture"&gt;5. 分層架構 (Layered Architecture)&lt;/a&gt;&lt;/p&gt;</description></item><item><title>[ML] Start Tensorflow Environment with Conda</title><link>https://intervalrain.github.io/ml/environment/</link><pubDate>Wed, 11 Oct 2023 20:48:34 +0800</pubDate><guid>https://intervalrain.github.io/ml/environment/</guid><description>&lt;h1 id="環境建置"&gt;環境建置&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;安裝 Anaconda&lt;/li&gt;
&lt;li&gt;創建虛擬環境&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;conda create -n tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="3"&gt;
&lt;li&gt;進入虛擬環境 (macOS/Linux)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;source activate tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="4"&gt;
&lt;li&gt;在環境內安裝 tensorflow&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;pip install tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="5"&gt;
&lt;li&gt;在環境內安裝 jupyter notebook&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;pip install jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="6"&gt;
&lt;li&gt;在環境內安裝 pandas&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;pip install pandas
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="7"&gt;
&lt;li&gt;開啟 jupyter notebook&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id="for-terminal-user"&gt;For terminal user&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;開始 Anaconda.Navigator
&lt;img alt="conda" loading="lazy" src="https://intervalrain.github.io/ML/images/conda.png"&gt;&lt;/li&gt;
&lt;li&gt;在 Environments 中安裝指定模組 ex.&lt;code&gt;tensorflow&lt;/code&gt;, &lt;code&gt;keras&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 terminal 中輸入 conda activate {環境名稱}&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;conda activate tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;ol start="4"&gt;
&lt;li&gt;開啟 python&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;python
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;若成功便會顯示 python 安裝資訊&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Python 3.11.5 (main, Sep 11 2023, 08:17:37) [Clang 14.0.6 ] on darwin
Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;大功告成，接著嘗試訓練第一筆資料&lt;/p&gt;</description></item><item><title>[Leetcode] Arrangement</title><link>https://intervalrain.github.io/leetcode/summary/</link><pubDate>Fri, 06 Oct 2023 16:30:47 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/summary/</guid><description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;題號&lt;/th&gt;
&lt;th style="text-align: left"&gt;題目&lt;/th&gt;
&lt;th style="text-align: left"&gt;類別&lt;/th&gt;
&lt;th style="text-align: left"&gt;題解&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;1&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;a href="../../leetcode/1"&gt;Two Sum&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Hash Table&lt;/td&gt;
&lt;td style="text-align: left"&gt;Hash Table&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;2&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;a href="../../leetcode/2"&gt;Add Two numbers&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;Linked List&lt;/td&gt;
&lt;td style="text-align: left"&gt;Recursion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;201&lt;/td&gt;
&lt;td style="text-align: left"&gt;Bitwise AND of Numbers Range&lt;/td&gt;
&lt;td style="text-align: left"&gt;Bitwise Operation&lt;/td&gt;
&lt;td style="text-align: left"&gt;Lowbit = x&amp;amp;(~x+1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;204&lt;/td&gt;
&lt;td style="text-align: left"&gt;Count Primes&lt;/td&gt;
&lt;td style="text-align: left"&gt;Math Thetory&lt;/td&gt;
&lt;td style="text-align: left"&gt;The Sieve of Eratosthenes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;408&lt;/td&gt;
&lt;td style="text-align: left"&gt;Valid Word Abbreviation&lt;/td&gt;
&lt;td style="text-align: left"&gt;Two Pointers&lt;/td&gt;
&lt;td style="text-align: left"&gt;字串轉數字&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>[IT] Clean Architecture - 第4章 - 結構化程式設計</title><link>https://intervalrain.github.io/clean_arch/ch4/</link><pubDate>Tue, 03 Oct 2023 22:28:44 +0800</pubDate><guid>https://intervalrain.github.io/clean_arch/ch4/</guid><description>structured programming</description></item><item><title>[IT] Clean Architecture</title><link>https://intervalrain.github.io/clean_arch/clean_arch/</link><pubDate>Fri, 29 Sep 2023 02:03:47 +0800</pubDate><guid>https://intervalrain.github.io/clean_arch/clean_arch/</guid><description>&lt;h1 id="乾淨架構"&gt;乾淨架構&lt;/h1&gt;
&lt;h2 id="設計design與架構architecture為何重要"&gt;設計(design)與架構(architecture)為何重要？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;軟體架構的目標是將&lt;strong&gt;開發&lt;/strong&gt;與&lt;strong&gt;維護&lt;/strong&gt;軟體系統所需的人力最小化。
&lt;ul&gt;
&lt;li&gt;不好的設計會使維護的成本愈來愈高。
&lt;img alt="1-1" loading="lazy" src="https://intervalrain.github.io/clean_arch/images/img1_3.png"&gt;&lt;/li&gt;
&lt;li&gt;每次版本的發布時的生產力。
&lt;img alt="1-2" loading="lazy" src="https://intervalrain.github.io/clean_arch/images/img1_4.png"&gt;&lt;/li&gt;
&lt;li&gt;良好的開發模式(TDD)大幅減少開發時間。
&lt;img alt="1-3" loading="lazy" src="https://intervalrain.github.io/clean_arch/images/img1_6.png"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="行為behavior與架構architecture"&gt;行為(behavior)與架構(architecture)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;行為：緊迫但並非特別重要&lt;/li&gt;
&lt;li&gt;架構：重要不緊迫&lt;br&gt;
∵ 緊急且重要 &amp;gt; 不緊急但重要 &amp;gt; 緊急但不重要 &amp;gt; 不緊急且不重要&lt;br&gt;
∴ 大多情況下，架構(設計)比行為(開發)更重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="程式設計範式paradigms"&gt;程式設計範式(paradigms)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;結構化程式設計(structed programming)
&lt;ul&gt;
&lt;li&gt;不要使用 &lt;code&gt;goto&lt;/code&gt;，使用結構化的設計模式。(順序、選擇、迭代)&lt;/li&gt;
&lt;li&gt;總結：對直接控制權施加限制。&lt;/li&gt;
&lt;li&gt;關注點：&lt;strong&gt;功能&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物件導向程式設計(object-oriented programming)
&lt;ul&gt;
&lt;li&gt;使用多型來避免函數指針的濫用。&lt;/li&gt;
&lt;li&gt;總結：對間接控制權施加限制。&lt;/li&gt;
&lt;li&gt;關注點：&lt;strong&gt;組件分離&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函式程式設計(functional programming)
&lt;ul&gt;
&lt;li&gt;λ演算的概念是不可變性，符號的值不會改變，意味著沒有賦值。&lt;/li&gt;
&lt;li&gt;總結：對賦值施加限制。&lt;/li&gt;
&lt;li&gt;關注點：&lt;strong&gt;數據管理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="物件導向設計"&gt;物件導向設計：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;依賴反轉：
&lt;img alt="DIP" loading="lazy" src="https://intervalrain.github.io/clean_arch/images/DIP.png"&gt;&lt;/li&gt;
&lt;li&gt;商業邏輯不依賴於 UI 與 DB，UI 與 DB 可以做為商業邏輯的插件。
&lt;img alt="DIP2" loading="lazy" src="https://intervalrain.github.io/clean_arch/images/DIP2.png"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="小結"&gt;小結：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;三種範式都在約束你寫 code 的某些行為。這些約束就是在制定規則。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="solid-設計原則"&gt;SOLID 設計原則&lt;/h2&gt;
&lt;h3 id="srp-單一職責原則the-single-responsibility-principle"&gt;SRP: 單一職責原則(The Single Responsibility Principle)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一個模組只有一個原因(用戶/利益相關者)需要改變。
&lt;img alt="SRP" loading="lazy" src="https://intervalrain.github.io/clean_arch/images/SRP.png"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ocp-開放封閉原則the-open-closed-principle"&gt;OCP: 開放封閉原則(The Open-Closed Principle)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;軟體工程應對擴展開放，但對修改封閉。
&lt;img alt="OCP" loading="lazy" src="https://intervalrain.github.io/clean_arch/images/OCP.png"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="lsp-里氏替體原則the-liskov-substitution-principle"&gt;LSP: 里氏替體原則(The Liskov Substitution Principle)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;避免簡單的可替代性違規導致大量的額外機制。
&lt;img alt="LSP" loading="lazy" src="https://intervalrain.github.io/clean_arch/images/LSP.png"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="isp-介面隔離原則the-interface-segregation-principle"&gt;ISP: 介面隔離原則(The Interface Segregation Principle)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;關注點分離。將一個多功能的物件拆成繼承三個不同功能介面的物件。
&lt;img alt="SRP" loading="lazy" src="https://intervalrain.github.io/clean_arch/images/ISP.png"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dip-依賴反轉原則the-dependency-inversion-principle"&gt;DIP: 依賴反轉原則(The Dependency Inversion Principle)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="DIP3" loading="lazy" src="https://intervalrain.github.io/clean_arch/images/DIP3.png"&gt;&lt;/p&gt;</description></item><item><title>[IT] 事件總線 EventBus</title><link>https://intervalrain.github.io/it/eventbus/</link><pubDate>Mon, 25 Sep 2023 23:50:02 +0800</pubDate><guid>https://intervalrain.github.io/it/eventbus/</guid><description>&lt;h1 id="eventbus"&gt;EventBus&lt;/h1&gt;
&lt;p&gt;&lt;img alt="eventBus" loading="lazy" src="https://th.bing.com/th/id/R.87d7f0f7e01b188aa312c91b2be45fe8?rik=TjWnWJ%2fkTukAaA&amp;pid=ImgRaw&amp;r=0"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EventBus 用於維護一個事件源與事件處理的映射字典&lt;/li&gt;
&lt;li&gt;通過 Singleton，確保 EventBus 的唯一入口&lt;/li&gt;
&lt;li&gt;利用反射完成事件源與件事處理的初始化綁定&lt;/li&gt;
&lt;li&gt;提供統一的事件注冊(register)、取消注冊(unsubscribe)和觸發(trigger)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="interfaces"&gt;Interfaces&lt;/h2&gt;
&lt;h3 id="ieventdata"&gt;IEventData&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IEventData&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; DateTime EventTime { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;object&lt;/span&gt; EventSource {&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="ieventhandler"&gt;IEventHandler&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IEventHandler&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="ieventhandler1"&gt;IEventHandler`1&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IEventHandler&lt;/span&gt;&amp;lt;TEventData&amp;gt; : IEventHandler &lt;span style="color:#66d9ef"&gt;where&lt;/span&gt; TEventData : IEventData
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; HandlerEvent(TEventData eventData);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="base-class"&gt;base class&lt;/h2&gt;
&lt;h3 id="eventdata"&gt;EventData&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;EventData&lt;/span&gt; : IEventData
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; DateTime EventTIme { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;object&lt;/span&gt; EventSource { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; EventData()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; EventTime = DateTime.Now;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="domain"&gt;Domain&lt;/h2&gt;
&lt;h3 id="fishtype"&gt;FishType&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;enum&lt;/span&gt; FishType
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; None,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;鯽魚&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;鯉魚&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;黑魚&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;青魚&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;草魚&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;鱸魚&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="fishingeventdata--eventdata"&gt;FishingEventData : EventData&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FishingEventData&lt;/span&gt; : EventData
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; FishType FishType { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; FishingMan FishingMan { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="fishingeventhandler--ieventhandler"&gt;FishingEventHandler : IEventHandler&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FishingEventHandler&lt;/span&gt; : IEventHandler&amp;lt;FishingEventData&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; HandleEvent(FishingEventData eventData)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; type = eventData.FishType;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; fishMan = eventData.FishingMan;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; Name = fishMan.Name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (type == FishType.None)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fishMan.Message = &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;.Format(&lt;span style="color:#e6db74"&gt;&amp;#34;{0}: 沒有釣到魚, 累計釣了{1}條魚&amp;#34;&lt;/span&gt;, Name, fishMan.FishCount);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fishMan.FishCount++;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fishMan.Message = &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;.Format(&lt;span style="color:#e6db74"&gt;&amp;#34;{0}: 釣到一條[{2}], 累計釣了{1}條魚&amp;#34;&lt;/span&gt;, Name, fishMan.FishCount, type);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="fishingman"&gt;FishingMan&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FishingMan&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Name { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; FishCount { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; FishingRod FishingRod { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Message { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; FishingMan(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; name)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Name = name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FishCount = &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; Fishing()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FishingRod.ThrowHook(&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="fishingrod"&gt;FishingRod&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用反射註冊事件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FishingRod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; Message { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; FishingRod()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; ThrowHook(FishingMan man)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Random().Next() % &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; == &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; type = (FishType)(&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Random().Next(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;) + &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Message = (&lt;span style="color:#e6db74"&gt;&amp;#34;魚兒上鉤了!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (FishingEvent != &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; eventData = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; FishingEventData
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FishingMan = man,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FishType = type
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; EventBus.Default.Trigger&amp;lt;FishingEventData&amp;gt;(eventData);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; type = FishType.None;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Message = (&lt;span style="color:#e6db74"&gt;&amp;#34;可惜了!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (FishingEvent != &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; eventData = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; FishingEventData
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FishingMan = man,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FishType = type
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; EventBus.Default.Trigger&amp;lt;FishingEventData&amp;gt;(eventData);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="eventbus-實作"&gt;EventBus 實作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用一個靜態單例來統一管理事件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;EventBus&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; EventBus Default =&amp;gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; EventBus();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;readonly&lt;/span&gt; ConcurrentDictionary&amp;lt;Type, List&amp;lt;Type&amp;gt;&amp;gt; _eventAndHandlerMapping;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; EventBus()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _eventAndHandlerMapping = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; ConcurrentDictionary&amp;lt;Type, List&amp;lt;Type&amp;gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; MapEventToHandler();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; MapEventToHandler()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Assembly assembly = Assembly.GetEntryAssembly();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;foreach&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; type &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt; assembly.GetTypes())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;typeof&lt;/span&gt;(IEventHandler).IsAssignableFrom(type))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Type handlerInterface = type.GetInterface(&lt;span style="color:#e6db74"&gt;&amp;#34;IEventHandler`1&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (handlerInterface == &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Type eventDataType = handlerInterface.GetGenericArguments()[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (_eventAndHandlerMapping.ContainsKey(eventDataType))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; List&amp;lt;Type&amp;gt; handlerTypes = _eventAndHandlerMapping[eventDataType];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; handlerTypes.Add(type);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _eventAndHandlerMapping[eventDataType] = handlerTypes;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; handlerTypes = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; List&amp;lt;Type&amp;gt; { type };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _eventAndHandlerMapping[eventDataType] = handlerTypes;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; Register&amp;lt;TEventData&amp;gt;(Type eventHandler)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; List&amp;lt;Type&amp;gt; handlerTypes = _eventAndHandlerMapping[&lt;span style="color:#66d9ef"&gt;typeof&lt;/span&gt;(TEventData)];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (!handlerTypes.Contains(eventHandler))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; handlerTypes.Add(eventHandler);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _eventAndHandlerMapping[&lt;span style="color:#66d9ef"&gt;typeof&lt;/span&gt;(TEventData)] = handlerTypes;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; Unsubscribe&amp;lt;TEventData&amp;gt;(Type eventHandler)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; List&amp;lt;Type&amp;gt; handlerTypes = _eventAndHandlerMapping[&lt;span style="color:#66d9ef"&gt;typeof&lt;/span&gt;(TEventData)];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (!handlerTypes.Contains(eventHandler))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; handlerTypes.Remove(eventHandler);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _eventAndHandlerMapping[&lt;span style="color:#66d9ef"&gt;typeof&lt;/span&gt;(TEventData)] = handlerTypes;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; Trigger&amp;lt;TEventData&amp;gt;(TEventData eventData) &lt;span style="color:#66d9ef"&gt;where&lt;/span&gt; TEventData : IEventData
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; List&amp;lt;Type&amp;gt; handlers = _eventAndHandlerMapping[eventData.GetType()];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (handlers != &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt; &amp;amp;&amp;amp; handlers.Count &amp;gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;foreach&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; handler &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt; handlers)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; MethodInfo methodInfo = handler.GetMethod(&lt;span style="color:#e6db74"&gt;&amp;#34;HandleEvent&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (methodInfo != &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;object&lt;/span&gt; obj = Activator.CreateInstance(handler);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; methodInfo.Invoke(obj, &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;object&lt;/span&gt;[] { eventData });
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="demo"&gt;demo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;MacOs Cocoa Project&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;partial&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ViewController&lt;/span&gt; : NSViewController
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; ViewController (IntPtr handle) : &lt;span style="color:#66d9ef"&gt;base&lt;/span&gt; (handle)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; ViewDidLoad ()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;base&lt;/span&gt;.ViewDidLoad ();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; jeff = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; FishingMan(&lt;span style="color:#e6db74"&gt;&amp;#34;Jeff&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; rod = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; FishingRod();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; jeff.FishingRod = rod;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; EventBus eventBus = EventBus.Default;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; eventBus.Register&amp;lt;FishingEventData&amp;gt;(&lt;span style="color:#66d9ef"&gt;typeof&lt;/span&gt;(FishingEventHandler));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FishingMan jeff;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FishingRod rod;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; NSObject RepresentedObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;base&lt;/span&gt;.RepresentedObject;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;base&lt;/span&gt;.RepresentedObject = &lt;span style="color:#66d9ef"&gt;value&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;partial&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; Button_Click(NSButton sender)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; jeff.Fishing();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; TextLabel.StringValue = rod.Message;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; TextLabel2.StringValue = jeff.Message ?? &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[IT] Clean Architecture - 重點整理</title><link>https://intervalrain.github.io/it/ca/</link><pubDate>Sat, 23 Sep 2023 20:03:55 +0800</pubDate><guid>https://intervalrain.github.io/it/ca/</guid><description>&lt;h1 id="乾淨架構clean-architecture-筆記"&gt;乾淨架構(Clean Architecture) 筆記&lt;/h1&gt;
&lt;h2 id="分層"&gt;分層&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;乾淨架構中從外而內依序為
&lt;ul&gt;
&lt;li&gt;Framework Layer&lt;/li&gt;
&lt;li&gt;Interface Adapter Layer&lt;/li&gt;
&lt;li&gt;Application Layer&lt;/li&gt;
&lt;li&gt;Domain Layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="models"&gt;Models&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一般來說會有四個 Models
&lt;ul&gt;
&lt;li&gt;View Model(給前端)&lt;/li&gt;
&lt;li&gt;App Model(App Layer 隔離 Domain Layer 所用，aka DTO)&lt;/li&gt;
&lt;li&gt;Domain Model&lt;/li&gt;
&lt;li&gt;Data Model(for DBMS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="usecase"&gt;Usecase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;App Layer 中的 Usecase 做四件事：
&lt;ul&gt;
&lt;li&gt;查&lt;/li&gt;
&lt;li&gt;改&lt;/li&gt;
&lt;li&gt;存&lt;/li&gt;
&lt;li&gt;推&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="單向依賴原則"&gt;單向依賴原則&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;依賴的方向必為單向且為&lt;br&gt;
\(\boxed{\text{Interface Adapter}} \rightarrow \boxed{\text{Application Layer}} \rightarrow \boxed{\text{Domain Layer}}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="repository"&gt;Repository&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Application Layer 為了遵守單向依賴，與 ORM 解耦會做一次依賴反轉，翠取 Repository 介面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="套用乾淨架構的效益衡量"&gt;套用乾淨架構的效益衡量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Model Mapping 的成本 vs.
&lt;ol&gt;
&lt;li&gt;獨立出「領域模型」的價值&lt;/li&gt;
&lt;li&gt;省下更換技術的成本(migration cost)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="領域層的部分通常會結合-ddd"&gt;「領域層」的部分通常會結合 DDD&lt;/h2&gt;</description></item><item><title>[IT] LINQ: IQueryable Provider</title><link>https://intervalrain.github.io/it/iq1/</link><pubDate>Thu, 21 Sep 2023 11:34:15 +0800</pubDate><guid>https://intervalrain.github.io/it/iq1/</guid><description>一系列關於如何建立 LINQ IQueryable Provider 的文章，每篇都是建立在前一篇的基礎上。</description></item><item><title>[IT] Clean Architecture - 第3章 - 程式設計範式總覽</title><link>https://intervalrain.github.io/clean_arch/ch3/</link><pubDate>Thu, 07 Sep 2023 22:07:54 +0800</pubDate><guid>https://intervalrain.github.io/clean_arch/ch3/</guid><description>paradigm overview</description></item><item><title>[IT] Clean Architecture - 第二部分 從基礎構件開始: 程式設計範式(Paradigms)</title><link>https://intervalrain.github.io/clean_arch/sec2/</link><pubDate>Tue, 05 Sep 2023 21:43:11 +0800</pubDate><guid>https://intervalrain.github.io/clean_arch/sec2/</guid><description>&lt;p&gt;　　軟體架構始於程式碼，因此我們將從程式碼的角度開始討論架構，看看自從程式碼被寫下以來我們所學到的內容。&lt;/p&gt;
&lt;p&gt;　　1938年，艾倫·圖靈(Alan Turing)奠定了計算機編程的基礎。他並不是第一個構想可編程機器的人，但他是第一個理解程式即數據(programs are simply data)的人。到了1945年，圖靈已經在真正的電腦上用我們現在能夠認出的程式碼編寫真正的程式了。這些程式使用了循環(loops)、分支(branches)、賦值(assignment)、子程序(subroutines)、堆棧(stacks)和其他熟悉的結構。但，圖靈的語言是二進制的。&lt;/p&gt;
&lt;p&gt;　　自從那些日子以來，程式設計界發生了許多革命。其中一個我們都非常熟悉的革命就是語言的革命。首先，在1940年代末期，出現了組合語言(assemblers)。這些「語言」解放了程式設計師將他們的程式轉換成二進制的苦差。1951年，格雷斯·霍珀(Grace Hopper)發明了第一個編譯器 A0。事實上，她創造了「編譯器(compiler)」這個詞彙。Fortran 在1953年被發明出來。接著，一股源源不斷的新程式語言湧入 - COBOL、PL/1、SNOBOL、C、Pascal、C++、Java等等，無窮無盡。&lt;/p&gt;
&lt;p&gt;　　另一個可能更重要的革命是在程式設計範式方面。範式是編程的方式，與語言相對無關。範式指導了開發人員應該使用哪些程式結構，以及何時使用它們。&lt;/p&gt;
&lt;p&gt;　　迄今為止，已經有三種這樣的範式，也不太可能再有其它的範式，原因後述。&lt;/p&gt;</description></item><item><title>[IT] Clean Architecture - 第2章 - 兩個價值維度</title><link>https://intervalrain.github.io/clean_arch/ch2/</link><pubDate>Mon, 04 Sep 2023 15:18:12 +0800</pubDate><guid>https://intervalrain.github.io/clean_arch/ch2/</guid><description>two values</description></item><item><title>[IT] Clean Architecture - 第1章 - 設計與架構到底是什麼</title><link>https://intervalrain.github.io/clean_arch/ch1/</link><pubDate>Sun, 03 Sep 2023 23:14:07 +0800</pubDate><guid>https://intervalrain.github.io/clean_arch/ch1/</guid><description>What is design and architecture?</description></item><item><title>[IT] Clean Architecture - 第一部分 概述</title><link>https://intervalrain.github.io/clean_arch/sec1/</link><pubDate>Sun, 03 Sep 2023 22:48:22 +0800</pubDate><guid>https://intervalrain.github.io/clean_arch/sec1/</guid><description>&lt;p&gt;　　採用好的軟體架構可以大大節省&lt;strong&gt;軟體項目構建&lt;/strong&gt;與&lt;strong&gt;維護的人力成本&lt;/strong&gt;。讓每次變更都短小簡單，易於實施，並且避免缺陷，用最小的成本，最大程度地滿足功能性和靈活性的要求。&lt;/p&gt;</description></item><item><title>[IT] Clean Architecture - Catalog</title><link>https://intervalrain.github.io/clean_arch/toc/</link><pubDate>Sun, 03 Sep 2023 22:32:22 +0800</pubDate><guid>https://intervalrain.github.io/clean_arch/toc/</guid><description>&lt;p&gt;&lt;img alt="CleanArchitecture" loading="lazy" src="http://geekdaxue.co/uploads/projects/Clean-Architecture-zh/docs/cover.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clean Architecture&lt;br&gt;
A Craftsman&amp;rsquo;s Guide to Software Structure and Design&lt;br&gt;
中文翻譯: 無瑕的程式碼 - 整潔的軟體設計與架構&lt;br&gt;
原著: Robert C. Martin(Uncle Bob)&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id="目錄"&gt;目錄&lt;/h1&gt;
&lt;hr&gt;
&lt;h3 id="第一部分-概述"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/sec1"&gt;第一部分 概述&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="第1章---設計與架構到底是什麼"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch1"&gt;第1章 - 設計與架構到底是什麼&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第2章---兩個價值維度"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch2"&gt;第2章 - 兩個價值維度&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;
&lt;h3 id="第二部分-從基礎構件開始-程式設計範式"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/sec2"&gt;第二部分 從基礎構件開始: 程式設計範式&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="第3章---程式設計範式總覽"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch3"&gt;第3章 - 程式設計範式總覽&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第4章---結構化程式設計"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch4"&gt;第4章 - 結構化程式設計&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第5章---物件導向程式設計"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch5"&gt;第5章 - 物件導向程式設計&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第6章---函數式程式設計"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch6"&gt;第6章 - 函數式程式設計&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;
&lt;h3 id="第三部分-設計原則"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/sec3"&gt;第三部分 設計原則&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="第7章---srp-單一職責原則"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch7"&gt;第7章 - SRP 單一職責原則&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第8章---ocp-開放封則原則"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch8"&gt;第8章 - OCP 開放封則原則&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第9章---lsp-里氏替換原則"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch9"&gt;第9章 - LSP 里氏替換原則&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第10章---isp-介面隔離原則"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch10"&gt;第10章 - ISP 介面隔離原則&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第11章---dip-依賴反轉原則"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch11"&gt;第11章 - DIP 依賴反轉原則&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;
&lt;h3 id="第四部分-組件構建原則clean_archsec4"&gt;[第四部分 組件構建原則)(/clean_arch/sec4)&lt;/h3&gt;
&lt;h4 id="第12章---元件"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch12"&gt;第12章 - 元件&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第13章---元件聚合"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch13"&gt;第13章 - 元件聚合&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第14章---元件耦合"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch14"&gt;第14章 - 元件耦合&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;
&lt;h3 id="第五部分-軟體架構"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/sec5"&gt;第五部分 軟體架構&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="第15章---什麼是軟體架構"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch15"&gt;第15章 - 什麼是軟體架構&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第16章---獨立性"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch16"&gt;第16章 - 獨立性&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第17章---劃分邊界"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch17"&gt;第17章 - 劃分邊界&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第18章---邊界剖析"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch18"&gt;第18章 - 邊界剖析&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第19章---策略與層次"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch19"&gt;第19章 - 策略與層次&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第20章---業務邏輯"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch20"&gt;第20章 - 業務邏輯&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第21章---尖叫的軟體架構"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch21"&gt;第21章 - 尖叫的軟體架構&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第22章---整潔架構"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch22"&gt;第22章 - 整潔架構&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第23章---展示器和謙卑物件"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch23"&gt;第23章 - 展示器和謙卑物件&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第24章---不完全邊界"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch24"&gt;第24章 - 不完全邊界&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第25章---層次與邊界"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch25"&gt;第25章 - 層次與邊界&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第26章---main-元件"&gt;&lt;a href="https://intervalrain.github.io/clean_arch_/h26"&gt;第26章 - Main 元件&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第27章---服務-宏觀與微觀"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch27"&gt;第27章 - 服務: 宏觀與微觀&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第28章---測試邊界"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch28"&gt;第28章 - 測試邊界&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第29章---整潔的嵌入式架構"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch29"&gt;第29章 - 整潔的嵌入式架構&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;
&lt;h3 id="第六部分-實現細節"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/sec6"&gt;第六部分 實現細節&lt;/a&gt;]&lt;/h3&gt;
&lt;h4 id="第30章---數據庫只是實現細節"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch30"&gt;第30章 - 數據庫只是實現細節&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第31章---web-是實現細節"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch31"&gt;第31章 - Web 是實現細節&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第32章---應用程式框架是實現細節"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch32"&gt;第32章 - 應用程式框架是實現細節&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第33章---案例分析-影片銷售網站"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch33"&gt;第33章 - 案例分析: 影片銷售網站&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id="第34章---拾遺"&gt;&lt;a href="https://intervalrain.github.io/clean_arch/ch34"&gt;第34章 - 拾遺&lt;/a&gt;&lt;/h4&gt;</description></item><item><title>[DXP] 在 spotfire 中創建自定義視覺化工具</title><link>https://intervalrain.github.io/dxp/customvisualization/</link><pubDate>Mon, 14 Aug 2023 22:54:55 +0800</pubDate><guid>https://intervalrain.github.io/dxp/customvisualization/</guid><description>在 spotfire 中創建自定義的視覺化工具</description></item><item><title>[ML] 01. 機器學習基本概念簡介</title><link>https://intervalrain.github.io/ml/lhy01/</link><pubDate>Wed, 02 Aug 2023 23:56:25 +0800</pubDate><guid>https://intervalrain.github.io/ml/lhy01/</guid><description>什麼是機器學習，機器學習任務，監督式學習的運作流程</description></item><item><title>[C#] Large Object Heap</title><link>https://intervalrain.github.io/csharp/loh/</link><pubDate>Sat, 22 Jul 2023 20:59:57 +0800</pubDate><guid>https://intervalrain.github.io/csharp/loh/</guid><description>Introduction to Large Object Heap</description></item><item><title>[DXP] Spotfire Extension 擴充程式</title><link>https://intervalrain.github.io/dxp/extension/</link><pubDate>Fri, 23 Jun 2023 03:03:52 +0800</pubDate><guid>https://intervalrain.github.io/dxp/extension/</guid><description>spotfire sdk 介紹</description></item><item><title>[DXP] Spotfire Developer SDK</title><link>https://intervalrain.github.io/dxp/sdk/</link><pubDate>Thu, 22 Jun 2023 21:43:13 +0800</pubDate><guid>https://intervalrain.github.io/dxp/sdk/</guid><description>spotfire sdk 介紹</description></item><item><title>[DXP] 在 spotfire 中創建自定義工具</title><link>https://intervalrain.github.io/dxp/customtool/</link><pubDate>Tue, 06 Jun 2023 22:38:08 +0800</pubDate><guid>https://intervalrain.github.io/dxp/customtool/</guid><description>在 spotfire 中創建自定義工具</description></item><item><title>[DXP] 在 spotfire 中創建自定義任務</title><link>https://intervalrain.github.io/dxp/customtask/</link><pubDate>Tue, 06 Jun 2023 21:36:12 +0800</pubDate><guid>https://intervalrain.github.io/dxp/customtask/</guid><description>在 spotfire 中創建自定義任務</description></item><item><title>[DXP] 使用 Visual Studio 對 Spotfire 開發進行環境設置</title><link>https://intervalrain.github.io/dxp/config/</link><pubDate>Tue, 06 Jun 2023 20:58:59 +0800</pubDate><guid>https://intervalrain.github.io/dxp/config/</guid><description>spotfire 開發環境設置</description></item><item><title>[CS] Sample cost for performance test</title><link>https://intervalrain.github.io/csharp/performancetest/</link><pubDate>Tue, 16 May 2023 21:26:24 +0800</pubDate><guid>https://intervalrain.github.io/csharp/performancetest/</guid><description>&lt;h3 id="sample-code-for-stop-watch"&gt;Sample code for stop watch&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; System;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; System.Data;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; System.Linq;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; System.Runtime.CompilerServices;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; System.Data.Common;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; System.Diagnostics;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; System.Drawing;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; System.Text;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; Rainspace.PlayGround
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Program&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; Main(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Stopwatch sw = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Stopwatch();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sw.Start();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.Console.WriteLine(&lt;span style="color:#e6db74"&gt;&amp;#34;==============Accumulate1==============&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.Console.WriteLine(&lt;span style="color:#e6db74"&gt;&amp;#34;Result: &amp;#34;&lt;/span&gt; + Accumulate(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sw.Stop();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.Console.WriteLine(&lt;span style="color:#e6db74"&gt;&amp;#34;Time cost: &amp;#34;&lt;/span&gt; + (sw.ElapsedTicks/&lt;span style="color:#ae81ff"&gt;1.0e6&lt;/span&gt;).ToString() + &lt;span style="color:#e6db74"&gt;&amp;#34;ms&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sw.Reset();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sw.Start();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.Console.WriteLine(&lt;span style="color:#e6db74"&gt;&amp;#34;==============Accumulate2==============&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.Console.WriteLine(&lt;span style="color:#e6db74"&gt;&amp;#34;Result: &amp;#34;&lt;/span&gt; + Accumulate(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sw.Stop();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.Console.WriteLine(&lt;span style="color:#e6db74"&gt;&amp;#34;Time cost: &amp;#34;&lt;/span&gt; + (sw.ElapsedTicks/&lt;span style="color:#ae81ff"&gt;1.0e6&lt;/span&gt;).ToString() + &lt;span style="color:#e6db74"&gt;&amp;#34;ms&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; Accumulate(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; begin, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; end, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; sum = &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res = sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (end &amp;lt; begin) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; Accumulate(end, begin, sum);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i = begin; i &amp;lt; end; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res += i;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; Accumulate2(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; begin, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; end, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; sum = &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res = (begin + end) * (end - begin) / &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res + sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[IT] 關聯模式的五大鍵 Super key、Candidate Key、Primary Key、Alternate Key、Foreign Key</title><link>https://intervalrain.github.io/it/keysinrelation/</link><pubDate>Thu, 11 May 2023 21:50:43 +0800</pubDate><guid>https://intervalrain.github.io/it/keysinrelation/</guid><description>關聯模式的五大鍵介紹</description></item><item><title>[Algo] 3-2. Binary Search</title><link>https://intervalrain.github.io/cs/algo/binary_search/</link><pubDate>Sun, 07 May 2023 18:46:56 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/binary_search/</guid><description>介紹二元搜索法，並介紹其適用情境</description></item><item><title>[C#] C#3、LINQ 及相關特性</title><link>https://intervalrain.github.io/csharp/linq_props/</link><pubDate>Mon, 01 May 2023 14:10:48 +0800</pubDate><guid>https://intervalrain.github.io/csharp/linq_props/</guid><description>Introduction to LINQ in C#</description></item><item><title>[IT] Design Patterns</title><link>https://intervalrain.github.io/it/design_pattern/</link><pubDate>Mon, 01 May 2023 00:22:49 +0800</pubDate><guid>https://intervalrain.github.io/it/design_pattern/</guid><description>簡介設計模式</description></item><item><title>[ML] 簡單實作測試</title><link>https://intervalrain.github.io/ml/work/</link><pubDate>Sun, 30 Apr 2023 00:35:59 +0800</pubDate><guid>https://intervalrain.github.io/ml/work/</guid><description>&lt;h2 id="線性迴歸建模"&gt;線性迴歸建模&lt;/h2&gt;
&lt;h3 id="載入資料"&gt;載入資料&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; plt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; mlp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;url &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;sample.csv&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read_csv(url)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;x &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data[&lt;span style="color:#e6db74"&gt;&amp;#34;x-axis&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data[&lt;span style="color:#e6db74"&gt;&amp;#34;y-axis&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="畫圖"&gt;畫圖&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;plot&lt;/span&gt;(x, y, w, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; line &lt;span style="color:#f92672"&gt;=&lt;/span&gt; w &lt;span style="color:#f92672"&gt;*&lt;/span&gt; x &lt;span style="color:#f92672"&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot(x, line, color&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;red&amp;#34;&lt;/span&gt;, label&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;prediction&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;scatter(x, y, color&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, label&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, marker&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;x&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;title(&lt;span style="color:#e6db74"&gt;&amp;#34;Title&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;xlabel(&lt;span style="color:#e6db74"&gt;&amp;#34;x Axis&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ylabel(&lt;span style="color:#e6db74"&gt;&amp;#34;y Axis&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;xlim([&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ylim([&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;140&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plot(x, y, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="定義-cost-function"&gt;定義 cost function&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;cost_function&lt;/span&gt;(x, y, w, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; y2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; w &lt;span style="color:#f92672"&gt;*&lt;/span&gt; x &lt;span style="color:#f92672"&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cost &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (y &lt;span style="color:#f92672"&gt;-&lt;/span&gt; y2) &lt;span style="color:#f92672"&gt;**&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; cost&lt;span style="color:#f92672"&gt;.&lt;/span&gt;mean()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cost_function(x, y, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;假設在 b = 20 的情形下，找 w 的最小值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;w_arr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;costs &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; w &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;101&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; w2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; w&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cost &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cost_function(x, y, w2, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; w_arr&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(w2)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; costs&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(cost)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; plt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;title(&lt;span style="color:#e6db74"&gt;&amp;#34;cost function - when b = 20)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;xlabel(&lt;span style="color:#e6db74"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ylabel(&lt;span style="color:#e6db74"&gt;&amp;#34;cost function&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot(w_arr, costs)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="利用-numpy-計算矩陣"&gt;利用 numpy 計算矩陣&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ws &lt;span style="color:#f92672"&gt;=&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;arange(&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;101&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bs &lt;span style="color:#f92672"&gt;=&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;arange(&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;101&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;costs &lt;span style="color:#f92672"&gt;=&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;zeros((&lt;span style="color:#ae81ff"&gt;201&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;201&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; w &lt;span style="color:#f92672"&gt;in&lt;/span&gt; ws:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; b &lt;span style="color:#f92672"&gt;in&lt;/span&gt; bs:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cost &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cost_function(x, y, w, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; costs[i,j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cost
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; j&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(costs)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="畫-3d-圖"&gt;畫 3d 圖&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax &lt;span style="color:#f92672"&gt;=&lt;/span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;axes(projection&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;3d&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;xaxis&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_pane_color((&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;yaxis&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_pane_color((&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;zaxis&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_pane_color((&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;figure(figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;view_init(&lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;110&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;b_grid, w_grid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;meshgrid(bs, ws)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot_surface(w_grid, b_grid, costs, cmap&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Spectral_r&amp;#34;&lt;/span&gt;, alpha&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.7&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot_wireframe(w_grid, b_grid, costs, alpha&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_title(&lt;span style="color:#e6db74"&gt;&amp;#34;loss function&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_xlabel(&lt;span style="color:#e6db74"&gt;&amp;#34;w&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_ylabel(&lt;span style="color:#e6db74"&gt;&amp;#34;b&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_zlabel(&lt;span style="color:#e6db74"&gt;&amp;#34;loss&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;w_index, b_index &lt;span style="color:#f92672"&gt;=&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;where(costs &lt;span style="color:#f92672"&gt;==&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;min(costs))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;scatter(ws[w_index], bs[b_index], costs[w_index, b_index], color&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;red&amp;#34;&lt;/span&gt;, s&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;40&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="計算梯度"&gt;計算梯度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;\(\text{cost} = (\text{y}_\text{pred}-\text{y})^2\\
\text{cost} = (\text{y}-(\text{w}\times\text{x}+\text{b}))^2\\
\text{m} _\text{w} = -2\times\text{x}(\text{y-wx-b})\\
\text{m} _\text{b} = -2\times(\text{y-wx-b})\\
\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;compute_gradient&lt;/span&gt;(x, y, w, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; w_gradient &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;x&lt;span style="color:#f92672"&gt;*&lt;/span&gt;(w&lt;span style="color:#f92672"&gt;*&lt;/span&gt;x&lt;span style="color:#f92672"&gt;+&lt;/span&gt;b&lt;span style="color:#f92672"&gt;-&lt;/span&gt;y)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;mean()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; b_gradient &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;(w&lt;span style="color:#f92672"&gt;*&lt;/span&gt;x&lt;span style="color:#f92672"&gt;+&lt;/span&gt;b&lt;span style="color:#f92672"&gt;-&lt;/span&gt;y)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;mean()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; w_gradient, b_gradient
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="利用梯度下降計算-cost-最小值"&gt;利用梯度下降計算 cost 最小值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;\(\text{w}_2=\text{w}-\text{m} _\text{w} \times \text{learning\_rate}\)&lt;/li&gt;
&lt;li&gt;\(\text{b}_2=\text{b}-\text{m} _\text{b} \times \text{learning\_rate}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;learning_rate &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0.001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; w_gradient, b_gradient &lt;span style="color:#f92672"&gt;=&lt;/span&gt; compute_gradient(x, y, w, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; w &lt;span style="color:#f92672"&gt;=&lt;/span&gt; w &lt;span style="color:#f92672"&gt;-&lt;/span&gt; w_gradient &lt;span style="color:#f92672"&gt;*&lt;/span&gt; learning_rate
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; b &lt;span style="color:#f92672"&gt;-&lt;/span&gt; b_gradient &lt;span style="color:#f92672"&gt;*&lt;/span&gt; learning_rate
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cost &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cost_function(x, y, w, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Iteration &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;i&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; : Cost &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;cost&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, w: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;w&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, b: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;b&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="gradient_descent-函式"&gt;gradient_descent 函式&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;gradient_descent&lt;/span&gt;(x, y, w_init, b_init, learning_rate, cost_function, gradient_function, run_iteration):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; c_hist &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; w_hist &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; b_hist &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; w &lt;span style="color:#f92672"&gt;=&lt;/span&gt; w_init
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; b_init
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(run_iteration):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; w_gradient, b_gradient &lt;span style="color:#f92672"&gt;=&lt;/span&gt; gradient_function(x, y, w, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; w &lt;span style="color:#f92672"&gt;=&lt;/span&gt; w &lt;span style="color:#f92672"&gt;-&lt;/span&gt; w_gradient &lt;span style="color:#f92672"&gt;*&lt;/span&gt; learning_rate
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; b &lt;span style="color:#f92672"&gt;-&lt;/span&gt; b_gradient &lt;span style="color:#f92672"&gt;*&lt;/span&gt; learning_rate
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cost &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cost_function(x, y, w, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; w_hist&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(w)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; b_hist&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(b)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; c_hist&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(cost)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; w, b, w_hist, b_hist, c_hist
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="多特徵的預測"&gt;多特徵的預測&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style="color:#f92672"&gt;import&lt;/span&gt; train_test_split
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scaler &lt;span style="color:#f92672"&gt;=&lt;/span&gt; StandardScaler()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scaler&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fit(x_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;x_train &lt;span style="color:#f92672"&gt;=&lt;/span&gt; scaler&lt;span style="color:#f92672"&gt;.&lt;/span&gt;transform(x_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;x_test &lt;span style="color:#f92672"&gt;=&lt;/span&gt; scaler&lt;span style="color:#f92672"&gt;.&lt;/span&gt;transform(x_test)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;x_real &lt;span style="color:#f92672"&gt;=&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;array([[&lt;span style="color:#ae81ff"&gt;5.3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], [&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;x_real &lt;span style="color:#f92672"&gt;=&lt;/span&gt; scaler&lt;span style="color:#f92672"&gt;.&lt;/span&gt;transfrom(x_real)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y_real &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (w_final&lt;span style="color:#f92672"&gt;*&lt;/span&gt;x_real)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sum(axis&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; b_final
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y_real
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="特徵縮放加速-gradient-descent"&gt;「特徵縮放」加速 gradient descent&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;w1&lt;em&gt;x1+w2&lt;/em&gt;x2+w3&lt;em&gt;x3+w4&lt;/em&gt;x4+b&lt;/li&gt;
&lt;li&gt;因分布範圍不同，調整參數，最好令每一個乘積都相當&lt;/li&gt;
&lt;li&gt;相當於是標準化：\(\frac{\text{x-平均值}}{標準差}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style="color:#f92672"&gt;import&lt;/span&gt; StandardScaler
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scaler &lt;span style="color:#f92672"&gt;=&lt;/span&gt; StandardScaler()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scaler&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fit(x_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;x_train &lt;span style="color:#f92672"&gt;=&lt;/span&gt; scaler&lt;span style="color:#f92672"&gt;.&lt;/span&gt;transform(x_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;x_test &lt;span style="color:#f92672"&gt;=&lt;/span&gt; scaler&lt;span style="color:#f92672"&gt;.&lt;/span&gt;transform(x_test)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="邏輯迴歸-logistic-regression"&gt;邏輯迴歸 Logistic Regression&lt;/h2&gt;
&lt;h3 id="sigmoid-function"&gt;Sigmoid Function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當模性呈現 0-1 關係(邏輯迴歸)時可用&lt;/li&gt;
&lt;li&gt;\(\text{Sigmoid Function}=\frac{1}{1+e^{-z}}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sigmoid&lt;/span&gt;(z):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;/&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;+&lt;/span&gt;np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;exp(&lt;span style="color:#f92672"&gt;-&lt;/span&gt;z))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;w &lt;span style="color:#f92672"&gt;=&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;array([&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;z &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (w&lt;span style="color:#f92672"&gt;*&lt;/span&gt;x_train)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sum(axis&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sigmoid(z)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[Algo] 3-10. Binary Indexed Tree(Fenwick Tree, BIT)</title><link>https://intervalrain.github.io/cs/algo/bit/</link><pubDate>Sat, 08 Apr 2023 17:46:12 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/bit/</guid><description>利用 Binary Indexed Tree 做數組的動態更新與查詢，中譯為樹狀樹組</description></item><item><title>[Algo] 3-1. Two Pointer/Sliding Window</title><link>https://intervalrain.github.io/cs/algo/two_pointer/</link><pubDate>Sun, 19 Mar 2023 22:56:03 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/two_pointer/</guid><description>使用雙指標或是更進階的滑動窗口的技巧，對資料集合(可能是array，可能是list)做搜尋。</description></item><item><title>[LeetCode] 132. Palindrome Partitioning II</title><link>https://intervalrain.github.io/leetcode/132/</link><pubDate>Sat, 18 Mar 2023 16:10:36 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/132/</guid><description>&lt;p&gt;&lt;strong&gt;132. Palindrome Partitioning II&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;dynamic programming&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given a string &lt;code&gt;s&lt;/code&gt;, partition &lt;code&gt;s&lt;/code&gt; such that every substring of the partition is a palindrome.&lt;br&gt;
Return &lt;em&gt;the &lt;strong&gt;minimum&lt;/strong&gt; cuts needed for a palindrome partitioning of&lt;/em&gt; &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; s = &amp;ldquo;aab&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The palindrome partitioning [&amp;ldquo;aa&amp;rdquo;, &amp;ldquo;b&amp;rdquo;] could be produced using 1 cut.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; s = &amp;ldquo;a&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; s = &amp;ldquo;ab&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[Algo] 3-0. Sorting</title><link>https://intervalrain.github.io/cs/algo/sorting/</link><pubDate>Thu, 16 Mar 2023 19:50:21 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/sorting/</guid><description>從排序開始，練習將想法實踐，All start from sorting</description></item><item><title>[C#] Namespace Alias 命名空間別名</title><link>https://intervalrain.github.io/csharp/namespace_alias/</link><pubDate>Tue, 28 Feb 2023 22:51:08 +0800</pubDate><guid>https://intervalrain.github.io/csharp/namespace_alias/</guid><description>Namespace alias in C#</description></item><item><title>[C#] Property getter/setter access separate 訪問權限分離</title><link>https://intervalrain.github.io/csharp/getter_setter_access_separate/</link><pubDate>Tue, 28 Feb 2023 22:18:25 +0800</pubDate><guid>https://intervalrain.github.io/csharp/getter_setter_access_separate/</guid><description>Separate getter/setter property access in C#</description></item><item><title>[C#] static class 靜態類別</title><link>https://intervalrain.github.io/csharp/static/</link><pubDate>Tue, 28 Feb 2023 21:08:01 +0800</pubDate><guid>https://intervalrain.github.io/csharp/static/</guid><description>Introduction to static class in C#</description></item><item><title>[C#] C# 筆記</title><link>https://intervalrain.github.io/csharp/csharp/</link><pubDate>Tue, 28 Feb 2023 18:49:39 +0800</pubDate><guid>https://intervalrain.github.io/csharp/csharp/</guid><description>Notes for C#</description></item><item><title>[C#] Partial Type 局部類型</title><link>https://intervalrain.github.io/csharp/partial/</link><pubDate>Tue, 28 Feb 2023 15:11:11 +0800</pubDate><guid>https://intervalrain.github.io/csharp/partial/</guid><description>Introduction to partial class ans partial method in C#</description></item><item><title>[C#] IEnumerable &amp; IEnumerator 迭代器</title><link>https://intervalrain.github.io/csharp/iterator/</link><pubDate>Mon, 27 Feb 2023 11:50:20 +0800</pubDate><guid>https://intervalrain.github.io/csharp/iterator/</guid><description>Introduction to Iterator in C#, including IEnumerator and IEnumerable</description></item><item><title>[C#] Delegate 委派</title><link>https://intervalrain.github.io/csharp/delegate/</link><pubDate>Sun, 26 Feb 2023 19:24:56 +0800</pubDate><guid>https://intervalrain.github.io/csharp/delegate/</guid><description>Introduction to Delegate in C#</description></item><item><title>[C#] Nullable 可空值類型</title><link>https://intervalrain.github.io/csharp/nullable/</link><pubDate>Thu, 23 Feb 2023 21:40:03 +0800</pubDate><guid>https://intervalrain.github.io/csharp/nullable/</guid><description>Introduction to Nullable in C#</description></item><item><title>[C#] Generic 泛型</title><link>https://intervalrain.github.io/csharp/generic/</link><pubDate>Wed, 22 Feb 2023 21:39:56 +0800</pubDate><guid>https://intervalrain.github.io/csharp/generic/</guid><description>Introduction to Generic in C#</description></item><item><title>[Life] 原子習慣</title><link>https://intervalrain.github.io/life/20230218/</link><pubDate>Sat, 18 Feb 2023 14:28:24 +0800</pubDate><guid>https://intervalrain.github.io/life/20230218/</guid><description>對習慣演成的一些隨筆</description></item><item><title>[Algo] 2-4. 回溯法 Backtracking</title><link>https://intervalrain.github.io/cs/algo/backtracking/</link><pubDate>Fri, 27 Jan 2023 10:50:26 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/backtracking/</guid><description>演算法設計，介紹什麼是回溯法，並示範運用回溯法的思維解題</description></item><item><title>[Algo] 2-3. 分治法 Divide and Conquer</title><link>https://intervalrain.github.io/cs/algo/divide_and_conquer/</link><pubDate>Fri, 27 Jan 2023 10:48:42 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/divide_and_conquer/</guid><description>演算法設計，介紹什麼是分治法，分治法的核心思想與例題，與常見的一些技巧。</description></item><item><title>[Algo] 2-2. 貪心演算法 Greedy</title><link>https://intervalrain.github.io/cs/algo/greedy/</link><pubDate>Tue, 24 Jan 2023 18:31:15 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/greedy/</guid><description>演算法設計，介紹什麼是貪心法，貪心法的解題思維</description></item><item><title>[Algo] 2-1. 暴力演算法 Brute Force</title><link>https://intervalrain.github.io/cs/algo/brute_force/</link><pubDate>Tue, 24 Jan 2023 15:57:40 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/brute_force/</guid><description>演算法設計，介紹什麼是暴力演算法，並示範幾種資料結構的遍歷與枚舉</description></item><item><title>[LeetCode] 491. Non-decreasing Subsequences</title><link>https://intervalrain.github.io/leetcode/491/</link><pubDate>Fri, 20 Jan 2023 21:39:50 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/491/</guid><description>&lt;p&gt;&lt;strong&gt;491. Non-decreasing Subsequences&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Backtracking&lt;/code&gt;、&lt;code&gt;Bit Manipulation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, return &lt;em&gt;all the different possible non-decreasing subsequences of the given array with at least two elements.&lt;/em&gt; You may return the answer in &lt;strong&gt;any order&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [4,6,7,7]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [4,4,3,2,1]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [[4,4]]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt; &amp;lt;= nums.length &amp;lt;= 15&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= nums[i] &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="二分析"&gt;二、分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;這一很典型的是一個 &lt;code&gt;backtrack&lt;/code&gt; 的問題，只要熟悉回溯法的框架並注意&lt;strong&gt;終止條件&lt;/strong&gt;與&lt;strong&gt;處理重覆子序列&lt;/strong&gt;即可。&lt;/li&gt;
&lt;li&gt;終止條件為 &lt;code&gt;i == nums.size()&lt;/code&gt;，此時將遍歷過的 &lt;code&gt;path&lt;/code&gt; 加入 &lt;code&gt;res&lt;/code&gt;，但要注意題目有規定至少要 &lt;code&gt;2&lt;/code&gt; 個元素的子序列，故需要再加入前做確認。&lt;/li&gt;
&lt;li&gt;注意題目傳回的子序列不可重覆，故需要額外做處理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="三解題"&gt;三、解題&lt;/h3&gt;
&lt;h4 id="1-backtracking"&gt;1. Backtracking&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Time complexity: \(O(2^n)\)&lt;/li&gt;
&lt;li&gt;Space complexity: \(O(n)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-C++" data-lang="C++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&lt;/span&gt; findSubsequences(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; path;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dfs(nums, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, path, res);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sort(res.begin(), res.end()); &lt;span style="color:#75715e"&gt;// 先做排序後
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; res.size()&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;--&lt;/span&gt;) { &lt;span style="color:#75715e"&gt;// 從後面往前迭代
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (res[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; res[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res.erase(res.begin()&lt;span style="color:#f92672"&gt;+&lt;/span&gt;i); &lt;span style="color:#75715e"&gt;// 刪除重覆的序列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;dfs&lt;/span&gt;(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i, vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; path, vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; res) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; nums.size()) { &lt;span style="color:#75715e"&gt;// 終止條件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (path.size() &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) { &lt;span style="color:#75715e"&gt;// 滿足子序列元素大於等於2個，則加入答案
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; res.push_back(path);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (path.size() &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; path.back()) { &lt;span style="color:#75715e"&gt;// 注意需滿足題意為上升序列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; path.push_back(nums[i]); &lt;span style="color:#75715e"&gt;// 加入子序列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; dfs(nums, i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, path, res);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; path.pop_back(); &lt;span style="color:#75715e"&gt;// 回溯法需將元素 pop 掉
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dfs(nums, i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, path, res); &lt;span style="color:#75715e"&gt;// 跳過不取
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="2-backtrackingoptimized"&gt;2. Backtracking(optimized)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Time complexity: \(O(2^n)\)&lt;/li&gt;
&lt;li&gt;Space complexity: \(O(n)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-C++" data-lang="C++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&lt;/span&gt; findSubsequences(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; path;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dfs(nums, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, path, res);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;dfs&lt;/span&gt;(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i, vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; path, vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; res) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; nums.size()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (path.size() &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res.push_back(path);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (path.size() &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; path.back()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; path.push_back(nums[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dfs(nums, i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, path, res);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; path.pop_back();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (path.size() &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; path.back()) { &lt;span style="color:#75715e"&gt;// 處理重覆子序列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; dfs(nums, i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, path, res);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="https://intervalrain.github.io/leetcode"&gt;回目錄 Catalog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>[IT] C# Depth Ch.2 C# 2</title><link>https://intervalrain.github.io/it/csharp_depth_ch2/</link><pubDate>Fri, 20 Jan 2023 10:10:46 +0800</pubDate><guid>https://intervalrain.github.io/it/csharp_depth_ch2/</guid><description>&lt;h1 id="c-2"&gt;C# 2&lt;/h1&gt;
&lt;h2 id="一泛型"&gt;一、泛型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用泛型(generic type)可以在編寫在編譯時類型安全的通用程式碼，無須事先知道要使用的具體類型。
&lt;em&gt;示例1: array類型: 大小需預先設定，若要添加需要重新分配&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; Main(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PrintNames(GenerateNames());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; PrintNames(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;[] names)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;foreach&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; name &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt; names)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Console.WriteLine(name);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;[] GenerateNames()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;[] names = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; names[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] = &lt;span style="color:#e6db74"&gt;&amp;#34;Mike&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; names[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] = &lt;span style="color:#e6db74"&gt;&amp;#34;Rain&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; names[&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;] = &lt;span style="color:#e6db74"&gt;&amp;#34;Jessica&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; names[&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;] = &lt;span style="color:#e6db74"&gt;&amp;#34;Billy&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; names;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;示例2: ArrayList類型: ArrayList.Add是Object的方法，但如果塞入不適合的參數類型，可能會引發InvalidCastException&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; Main(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PrintNames(GenerateNames());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; PrintNames(ArrayList names)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;foreach&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;object&lt;/span&gt; name &lt;span style="color:#66d9ef"&gt;in&lt;/span&gt; names)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Console.WriteLine(name);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; ArrayList GenerateNames()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ArrayList names = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; ArrayList();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; names.Add(&lt;span style="color:#e6db74"&gt;&amp;#34;Mike&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; names.Add(&lt;span style="color:#e6db74"&gt;&amp;#34;Rain&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; names.Add(&lt;span style="color:#e6db74"&gt;&amp;#34;Jessica&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; names.Add(&lt;span style="color:#e6db74"&gt;&amp;#34;Billy&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; names;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;示例3: StringCollection專用類型: 解決前述兩個問題，但也限制了返回值。&lt;/em&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 974. Subarray Sums Divisible by K</title><link>https://intervalrain.github.io/leetcode/974/</link><pubDate>Thu, 19 Jan 2023 13:50:19 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/974/</guid><description>&lt;p&gt;&lt;strong&gt;974. Subarray Sums Divisible by K&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Prefix Sum&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;k&lt;/code&gt;, return &lt;em&gt;the number of non-empty&lt;/em&gt; &lt;strong&gt;subarrays&lt;/strong&gt; &lt;em&gt;that have a sum divisible by&lt;/em&gt; &lt;code&gt;k&lt;/code&gt;.&lt;br&gt;
A &lt;strong&gt;subarray&lt;/strong&gt; is a &lt;strong&gt;contiguous&lt;/strong&gt; part of an array.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [4,5,0,-2,-3,1], k = 5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 7&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; There are 7 subarrays with a sum divisible by k = 5:&lt;br&gt;
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 53. Maximum Subarray</title><link>https://intervalrain.github.io/leetcode/53/</link><pubDate>Wed, 18 Jan 2023 23:20:08 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/53/</guid><description>&lt;p&gt;&lt;strong&gt;53. Maxmimum Subarray&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Divide and Conquer&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer array &lt;code&gt;num&lt;/code&gt;, find the subarray with the largest sum, and return &lt;em&gt;its sum&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [-2,1,-3,4,-1,2,1,-5,4]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The subarray [4,-1,2,1] has the largest sum 6.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [1]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The subarray [1] has the largest sum 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; [5,4,-1,7,8]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 23&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The subarray [5,4,-1,7,8] has the largest sum 23.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 918. Maximum Sum Circular Subarray</title><link>https://intervalrain.github.io/leetcode/918/</link><pubDate>Wed, 18 Jan 2023 23:07:56 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/918/</guid><description>&lt;p&gt;&lt;strong&gt;918. Maximum Sum Circular Subarray&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Divide and Conquer&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Queue&lt;/code&gt;、&lt;code&gt;Monotonic Queue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given a &lt;strong&gt;circular integer array&lt;/strong&gt; &lt;code&gt;nums&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, return &lt;em&gt;the maximum possible sum of a non-empty &lt;em&gt;&lt;strong&gt;subarray&lt;/strong&gt;&lt;/em&gt; of&lt;/em&gt; &lt;code&gt;nums&lt;/code&gt;.&lt;br&gt;
A &lt;strong&gt;circular array&lt;/strong&gt; means the end of the array connects to the beginning of the array. Formally, the next element of &lt;code&gt;nums[i]&lt;/code&gt; is &lt;code&gt;nums[(i + 1) % n]&lt;/code&gt; and the previous element of &lt;code&gt;nums[i]&lt;/code&gt; is &lt;code&gt;nums[(i - 1 + n) % n]&lt;/code&gt;.&lt;br&gt;
A &lt;strong&gt;subarray&lt;/strong&gt; may only include each element of the fixed buffer &lt;code&gt;nums&lt;/code&gt; at most once. Formally, for a subarray &lt;code&gt;nums[i], nums[i + 1], ..., nums[j]&lt;/code&gt;, there does not exist &lt;code&gt;i &amp;lt;= k1&lt;/code&gt;, &lt;code&gt;k2 &amp;lt;= j&lt;/code&gt; with &lt;code&gt;k1 % n == k2 % n&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>[IT] C# Depth Ch.1 與時俱進的語言</title><link>https://intervalrain.github.io/it/csharp_depth_ch1/</link><pubDate>Tue, 17 Jan 2023 22:27:58 +0800</pubDate><guid>https://intervalrain.github.io/it/csharp_depth_ch1/</guid><description>&lt;h1 id="與時俱進的語言"&gt;與時俱進的語言&lt;/h1&gt;
&lt;h2 id="一system-class"&gt;一、System Class&lt;/h2&gt;
&lt;h3 id="1-泛型genric"&gt;1. 泛型(genric)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可更清楚的描述序列中每個元素的類型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;C#1 示例&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Bookshelf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IEnumerable Books { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt; { ... } }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;C#2 示例：泛型&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Bookshelf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IEnumerable&amp;lt;Book&amp;gt; Books { &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt; { ... } }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id="2-可空值類型nullable-value-type"&gt;2. 可空值類型(nullable value type)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可有效的表示未定的變量值，以擺脫魔數(用&lt;code&gt;-1&lt;/code&gt;當集合索引，用 &lt;code&gt;MinValue&lt;/code&gt; 或 &lt;code&gt;MaxValue&lt;/code&gt; 做為初始值)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;示例&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;string?&lt;/span&gt; a = &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Console.WriteLine(a ?? &lt;span style="color:#e6db74"&gt;&amp;#34;null&amp;#34;&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;a = &lt;span style="color:#e6db74"&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Console.WriteLine(a ?? &lt;span style="color:#e6db74"&gt;&amp;#34;null&amp;#34;&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// abc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id="3-匿名類型anonymous-type隱式局部變數var"&gt;3. 匿名類型(anonymous type)、隱式局部變數(var)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;兩者皆可解決靜態類型語言的缺陷：程式碼冗長。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;示例1: 匿名類型(anonymous type)&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Csharp" data-lang="Csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; book = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Title = &lt;span style="color:#e6db74"&gt;&amp;#34;Harry Potter&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Author = &lt;span style="color:#e6db74"&gt;&amp;#34;J.K. Rowling&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; title = book.Title;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; author = book.Author;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;若已經調用了建構式的話，就無需顯式的宣該告變數的類型了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;示例2: 隱式類型(implicit typing)&lt;/em&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 926. Flip String to Monotone Increasing</title><link>https://intervalrain.github.io/leetcode/926/</link><pubDate>Tue, 17 Jan 2023 16:36:26 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/926/</guid><description>&lt;p&gt;&lt;strong&gt;926. Flip String to Monotone Increasing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;A binary string is monotone increasing if it consists of some number of &lt;code&gt;0&lt;/code&gt;&amp;rsquo;s (possibly none), followed by some number of &lt;code&gt;1&lt;/code&gt;&amp;rsquo;s (also possibly none).&lt;br&gt;
You are given a binary string &lt;code&gt;s&lt;/code&gt;. You can flip &lt;code&gt;s[i]&lt;/code&gt; changing &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; or from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.&lt;br&gt;
Return &lt;em&gt;the minimum number of flips to make&lt;/em&gt; &lt;code&gt;s&lt;/code&gt; &lt;em&gt;monotone increasing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[IT] Shell 筆記</title><link>https://intervalrain.github.io/it/shell/</link><pubDate>Thu, 12 Jan 2023 23:34:41 +0800</pubDate><guid>https://intervalrain.github.io/it/shell/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://blog.csdn.net/w918589859/article/details/108752592"&gt;https://blog.csdn.net/w918589859/article/details/108752592&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.w3cschool.cn/linux/linux-Shell.html"&gt;https://www.w3cschool.cn/linux/linux-Shell.html&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="一shell-簡介"&gt;一、Shell 簡介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什麼是 Shell?&lt;br&gt;
Shell 是一個用 C 語言編寫的程式，它是使用者使用 Linux 的橋樑。Shell 既是一種命令語言，又是一種程式設計語言。&lt;br&gt;
Shell 是指一種應用程式，這個應用程式提供了一個界面，使用者通過這個界面訪問作業系統核心(kernel)的服務。&lt;/li&gt;
&lt;li&gt;為什麼要學習和使用 Shell?&lt;br&gt;
Shell 屬於內建的腳本，程序開發的效率非常高，依賴於功能強大的命令可以迅速的完成開發任務(批次處理)。&lt;/li&gt;
&lt;li&gt;Shell 腳本(Shell script)&lt;br&gt;
是一種為 Shell 編寫的腳本程式。業界所說的 Shell 通常都是指 Shell 腳本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="二-shell-入門"&gt;二、 Shell 入門&lt;/h2&gt;
&lt;h3 id="1-shell-環境"&gt;1. Shell 環境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Shell 編程需要能編寫程式碼的&lt;strong&gt;文本編輯器&lt;/strong&gt;和一個能解釋執行的&lt;strong&gt;腳本解釋器&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在 linux 中有很多類型的 Shell，不同的 Shell 具備不同的功能，Shell 還決定了腳本中函數的語法。&lt;/li&gt;
&lt;li&gt;Bash 是 Linux 中默認的 Shell。一般情況下，人們不區分 Bourne Shell 和 Bourne Again Shell，所以 &lt;code&gt;#!/bin/sh&lt;/code&gt; 也可以被替換成 &lt;code&gt;#!/bin/bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux 的 Shell 種類眾多，不同的 Shell 都有自己的特點以及用途，常見的有：
&lt;ul&gt;
&lt;li&gt;Bourne Shell (&lt;code&gt;/usr/bin/sh&lt;/code&gt; 或 &lt;code&gt;/bin/sh&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Bourne Again Shell (&lt;code&gt;/bin/bash&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;C Shell (&lt;code&gt;/usr/bin/csh&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;K Shell (&lt;code&gt;/usr/bin/ksh&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Shell for Root(&lt;code&gt;sbin/sh&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="2-bash-常用快捷鏈"&gt;2. Bash 常用快捷鏈&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;快捷鏈&lt;/th&gt;
&lt;th style="text-align: left"&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+A&lt;/td&gt;
&lt;td style="text-align: left"&gt;把游標移動到命令行開頭。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+E&lt;/td&gt;
&lt;td style="text-align: left"&gt;把游標移動到命令行結尾。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+C&lt;/td&gt;
&lt;td style="text-align: left"&gt;強制終止當前的命令。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+L&lt;/td&gt;
&lt;td style="text-align: left"&gt;清除螢幕，等於 &lt;code&gt;clear&lt;/code&gt; 指令。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+U&lt;/td&gt;
&lt;td style="text-align: left"&gt;清除並剪下當前命令。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+K&lt;/td&gt;
&lt;td style="text-align: left"&gt;刪除並剪下游標以後的命令。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+Y&lt;/td&gt;
&lt;td style="text-align: left"&gt;貼上。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+R&lt;/td&gt;
&lt;td style="text-align: left"&gt;在歷史命令中搜索，按下 Ctrl+R 之後，就會出現搜索界面，只要輸入搜索內容，就會從歷史命令中搜索。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+D&lt;/td&gt;
&lt;td style="text-align: left"&gt;退出當前終端機。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+Z&lt;/td&gt;
&lt;td style="text-align: left"&gt;暫停，並放入後台。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+S&lt;/td&gt;
&lt;td style="text-align: left"&gt;暫停螢幕輸出。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Ctrl+Q&lt;/td&gt;
&lt;td style="text-align: left"&gt;恢復螢幕輸出。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id="3-輸入與輸出-io"&gt;3. 輸入與輸出 I/O&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;linux 的標準輸入與輸出&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 1519. Number of Nodes in the Sub-Tree With the Same Level</title><link>https://intervalrain.github.io/leetcode/1519/</link><pubDate>Thu, 12 Jan 2023 22:56:18 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1519/</guid><description>&lt;p&gt;&lt;strong&gt;1519. Number of Nodes in the Sub-Tree With the Same Level&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Tree&lt;/code&gt;、&lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Breadth-First Search&lt;/code&gt;、&lt;code&gt;Counting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of &lt;code&gt;n&lt;/code&gt; nodes numbered from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n - 1&lt;/code&gt; and exactly &lt;code&gt;n - 1&lt;/code&gt; &lt;code&gt;edges&lt;/code&gt;. The &lt;strong&gt;root&lt;/strong&gt; of the tree is the node &lt;code&gt;0&lt;/code&gt;, and each node of the tree has &lt;strong&gt;a label&lt;/strong&gt; which is a lower-case character given in the string &lt;strong&gt;labels&lt;/strong&gt; (i.e. The node with the number &lt;code&gt;i&lt;/code&gt; has the label &lt;code&gt;labels[i]&lt;/code&gt;).&lt;br&gt;
The &lt;code&gt;edges&lt;/code&gt; array is given on the form &lt;code&gt;edges[i] = [ai, bi]&lt;/code&gt;, which means there is an edge between nodes &lt;code&gt;ai&lt;/code&gt; and &lt;code&gt;bi&lt;/code&gt; in the tree.&lt;br&gt;
Return &lt;em&gt;an array of size &lt;code&gt;n&lt;/code&gt;&lt;/em&gt; where &lt;code&gt;ans[i]&lt;/code&gt; is the number of nodes in the subtree of the &lt;code&gt;ith&lt;/code&gt; node which have the same label as node &lt;code&gt;i&lt;/code&gt;.&lt;br&gt;
A subtree of a tree &lt;code&gt;T&lt;/code&gt; is the tree consisting of a node in &lt;code&gt;T&lt;/code&gt; and all of its descendant nodes.&lt;/p&gt;</description></item><item><title>[LeetCode] 100. Same Tree</title><link>https://intervalrain.github.io/leetcode/100/</link><pubDate>Tue, 10 Jan 2023 21:48:09 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/100/</guid><description>&lt;p&gt;&lt;strong&gt;100. Same Tree&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Tree&lt;/code&gt;、&lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Breadth-First Search&lt;/code&gt;、&lt;code&gt;Binary Tree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given the roots of two binary tree &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;, write a function to check if they are the same or not.&lt;br&gt;
Two binary tree are considered the same if they are structurally iedntical, and the nodes have the same value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="ex1" loading="lazy" src="https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; p = [1,2,3], q = [1,2,3]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="ex2" loading="lazy" src="https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; p = [1,2], q = [1,null,2]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;
&lt;img alt="ex3" loading="lazy" src="https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg"&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 149. Max Points on a Line</title><link>https://intervalrain.github.io/leetcode/149/</link><pubDate>Sun, 08 Jan 2023 23:44:07 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/149/</guid><description>&lt;p&gt;&lt;strong&gt;149. Max Points on a Line&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;Geometry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an array of &lt;code&gt;points&lt;/code&gt; where &lt;code&gt;points[i] = [xi, yi]&lt;/code&gt; represents a point on the &lt;strong&gt;X-Y&lt;/strong&gt; plane, return &lt;em&gt;the maximum number of points that lie on the same straight line&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="plane1" loading="lazy" src="https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; points = [[1,1],[2,2],[3,3]]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;
&lt;img alt="plane2" loading="lazy" src="https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= points.length &amp;lt;= 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;points[i].length == 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^4 &amp;lt;= xi, yi &amp;lt;= 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All the &lt;code&gt;points&lt;/code&gt; are &lt;strong&gt;unique&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="二分析"&gt;二、分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;若干點在同一條線上，表示這些點的斜率都相同，注意題目有提示不會有相同的點，故兩點間必定有斜率。
&lt;ul&gt;
&lt;li&gt;特別注意當分母為 &lt;code&gt;0&lt;/code&gt; 時要特別處理。&lt;/li&gt;
&lt;li&gt;題目有限制 &lt;code&gt;-10^4 &amp;lt;= xi, yi &amp;lt;= 10^4&lt;/code&gt;，故斜率最大 &lt;code&gt;10^8&lt;/code&gt;，所以我們可以將分母為零的斜率暫定為 &lt;code&gt;INT_MAX(2147483647)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;遍歷每個點，並統計該點與其它點之間的斜率，將斜率用 &lt;code&gt;unordered_map&lt;/code&gt; 記錄下來，其每個斜率的直線上總共會有 &lt;code&gt;m+1&lt;/code&gt; (加上自己)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="三解題"&gt;三、解題&lt;/h3&gt;
&lt;h4 id="1"&gt;1.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Time complexity: \(O(n^2)\)&lt;/li&gt;
&lt;li&gt;Space complexity: \(O(n)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-C++" data-lang="C++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;maxPoints&lt;/span&gt;(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; points) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; points.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; x0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; points[i][&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; y0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; points[i][&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;double&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; j) &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 若等於自己則跳過
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; x1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; points[j][&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; y1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; points[j][&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (x0 &lt;span style="color:#f92672"&gt;==&lt;/span&gt; x1) { &lt;span style="color:#75715e"&gt;// 當分母為 0 時特別處理
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; cnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;map[INT_MAX];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, cnt);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;double&lt;/span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (y1&lt;span style="color:#f92672"&gt;-&lt;/span&gt;y0)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1.0&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;(x1&lt;span style="color:#f92672"&gt;-&lt;/span&gt;x0)); &lt;span style="color:#75715e"&gt;// 注意將斜率轉成 double
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; cnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;map[m];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, cnt);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 答案記得加 1，加上自己
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="https://intervalrain.github.io/leetcode"&gt;回目錄 Catalog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 452. Minimum Number of Arrows to Burst Balloons</title><link>https://intervalrain.github.io/leetcode/452/</link><pubDate>Thu, 05 Jan 2023 20:19:49 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/452/</guid><description>&lt;p&gt;&lt;strong&gt;452. Minimum Number of Arrows to Burst Balloons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;,&lt;code&gt;Greedy&lt;/code&gt;,&lt;code&gt;Sorting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array &lt;code&gt;points&lt;/code&gt; where &lt;code&gt;points[i] = [x_start, x_end]&lt;/code&gt; denotes a balloon whose &lt;strong&gt;horizontal diameter&lt;/strong&gt; stretches between &lt;code&gt;x_start&lt;/code&gt; and &lt;code&gt;x_end&lt;/code&gt;. You do not know the exact y-coordinates of the balloons.&lt;br&gt;
Arrows can be shot up &lt;strong&gt;directly vertically&lt;/strong&gt; (in the positive y-direction) from different points along the x-axis. A balloon with &lt;code&gt;x_start&lt;/code&gt; and &lt;code&gt;x_end&lt;/code&gt; is &lt;strong&gt;burst&lt;/strong&gt; by an arrow shot at &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;x_start &amp;lt;= x &amp;lt;= x_end&lt;/code&gt;. There is &lt;strong&gt;no limit&lt;/strong&gt; to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.&lt;br&gt;
Given the array &lt;code&gt;points&lt;/code&gt;, return &lt;em&gt;the &lt;em&gt;&lt;strong&gt;minimum&lt;/strong&gt;&lt;/em&gt; number of arrows that must be shot to burst all balloons&lt;/em&gt;.&lt;/p&gt;</description></item><item><title>[Algo] 1-9. Algorithm</title><link>https://intervalrain.github.io/cs/algo/algorithm/</link><pubDate>Tue, 03 Jan 2023 21:49:42 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/algorithm/</guid><description>C++ 的內建演算法庫使用與範例</description></item><item><title>[LeetCode] 944. Delete Columns to Make Sorted</title><link>https://intervalrain.github.io/leetcode/944/</link><pubDate>Tue, 03 Jan 2023 20:09:30 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/944/</guid><description>&lt;p&gt;&lt;strong&gt;944. Delete Columns to Make Sorted&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an array of &lt;code&gt;n&lt;/code&gt; string &lt;code&gt;strs&lt;/code&gt;, all of the same length.&lt;br&gt;
The string s can be arranged such that there is one on each line, making a grid. For example, &lt;code&gt;strs = [&amp;quot;abc&amp;quot;, &amp;quot;bce&amp;quot;, &amp;quot;cae&amp;quot;&lt;/code&gt; can be arranged as :&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;abc
bce
cae
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You want to &lt;strong&gt;delete&lt;/strong&gt; the columns that are &lt;strong&gt;not sorted lexicographically&lt;/strong&gt;. In the aove example (0-indexed), columns 0(&lt;code&gt;'a'&lt;/code&gt;,&lt;code&gt;'b'&lt;/code&gt;,&lt;code&gt;'c'&lt;/code&gt;) and 2(&lt;code&gt;'c'&lt;/code&gt;,&lt;code&gt;'e'&lt;/code&gt;,&lt;code&gt;'e'&lt;/code&gt;) are sorted while column 1(&lt;code&gt;'b'&lt;/code&gt;,&lt;code&gt;'c'&lt;/code&gt;,&lt;code&gt;'a'&lt;/code&gt;) is not, so you would delete column 1.&lt;br&gt;
Return &lt;em&gt;the number of columns that you will delete&lt;/em&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 2522. Partition String Into Substrings With Values at Most K</title><link>https://intervalrain.github.io/leetcode/2522/</link><pubDate>Mon, 02 Jan 2023 23:15:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2522/</guid><description>&lt;p&gt;&lt;strong&gt;2522. Partition String Into Substrings With Values at Most K&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics:&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 323}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given a string &lt;code&gt;s&lt;/code&gt; consisting of digits from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt; and an integer &lt;code&gt;k&lt;/code&gt;.&lt;br&gt;
A partition of a string &lt;code&gt;s&lt;/code&gt; is called &lt;strong&gt;good&lt;/strong&gt; if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each digit of &lt;code&gt;s&lt;/code&gt; is part of &lt;strong&gt;exactly&lt;/strong&gt; one substring.&lt;/li&gt;
&lt;li&gt;The value of each substring is less than or equal to &lt;code&gt;k&lt;/code&gt;.
Return &lt;em&gt;the &lt;em&gt;&lt;strong&gt;minimum&lt;/strong&gt;&lt;/em&gt; number of substrings in a &lt;em&gt;&lt;strong&gt;good&lt;/strong&gt;&lt;/em&gt; partition of&lt;/em&gt; &lt;code&gt;s&lt;/code&gt;. If no &lt;strong&gt;good&lt;/strong&gt; partition of &lt;code&gt;s&lt;/code&gt; exists, return &lt;code&gt;-1&lt;/code&gt;.&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; that:&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;value&lt;/strong&gt; of a string is its result when interpreted as an integer. For example, the value of &lt;code&gt;&amp;quot;123&amp;quot;&lt;/code&gt; is &lt;code&gt;123&lt;/code&gt; and the value of &lt;code&gt;&amp;quot;1&amp;quot;&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;substring&lt;/strong&gt; is a contiguous sequence of characters within a string.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2523. Closest Prime Numbers in Range</title><link>https://intervalrain.github.io/leetcode/2523/</link><pubDate>Mon, 02 Jan 2023 16:33:40 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2523/</guid><description>&lt;p&gt;&lt;strong&gt;2523. Closest Prime Numbers in Range&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics:&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 323}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given two positive integers &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;, find the two integers num1 and num2 such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;left &amp;lt;= nums1 &amp;lt; nums2 &amp;lt;= right&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums1&lt;/code&gt; and &lt;code&gt;nums2&lt;/code&gt; are both &lt;strong&gt;prime&lt;/strong&gt; numbers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums2 - nums1&lt;/code&gt; is the &lt;strong&gt;minimum&lt;/strong&gt; amongst all other pairs satisfying the above conditions.&lt;br&gt;
Return &lt;em&gt;the positive integer array&lt;/em&gt; &lt;code&gt;ans = [nums1, nums2]&lt;/code&gt;. &lt;em&gt;If there are multiple pairs satisfying these conditions, return the one with the minimum&lt;/em&gt; &lt;code&gt;nums1&lt;/code&gt; &lt;em&gt;value or&lt;/em&gt; &lt;code&gt;[-1, -1]&lt;/code&gt; &lt;em&gt;if such numbers do not exist.&lt;/em&gt;&lt;br&gt;
A number greater than &lt;code&gt;1&lt;/code&gt; is called &lt;strong&gt;prime&lt;/strong&gt; if it is only divisible by &lt;code&gt;1&lt;/code&gt; and itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 520. Detect Capital</title><link>https://intervalrain.github.io/leetcode/520/</link><pubDate>Mon, 02 Jan 2023 11:05:30 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/520/</guid><description>&lt;p&gt;&lt;strong&gt;520. Detect Capital&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;We define the usage of capitals in a word to be right when one of the following cases holds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All letters in this word are capitals, like &lt;code&gt;&amp;quot;USA&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;All letters in this word are not capitals, like &lt;code&gt;&amp;quot;leetcode&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Only the first letter in this word is capital, like &lt;code&gt;&amp;quot;Google&amp;quot;&lt;/code&gt;.&lt;br&gt;
Given a string &lt;code&gt;word&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt; if the usage of capitals in it is right.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2521. Distinct Prime Factors of Product of Array</title><link>https://intervalrain.github.io/leetcode/2521/</link><pubDate>Sun, 01 Jan 2023 23:52:02 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2521/</guid><description>&lt;p&gt;&lt;strong&gt;2521. Distinct Prime Factors of Product of Array&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics:&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 323}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an array of positive integers &lt;code&gt;nums&lt;/code&gt;, return &lt;em&gt;the number of &lt;em&gt;&lt;strong&gt;distinct prime factors&lt;/strong&gt;&lt;/em&gt; in the product of the elements of&lt;/em&gt; &lt;code&gt;nums&lt;/code&gt;.&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A number greater than &lt;code&gt;1&lt;/code&gt; is called &lt;strong&gt;prime&lt;/strong&gt; if it is divisible by only &lt;code&gt;1&lt;/code&gt; and itself.&lt;/li&gt;
&lt;li&gt;An integer &lt;code&gt;val1&lt;/code&gt; is a factor of another integer val2 if &lt;code&gt;val2 / val1&lt;/code&gt; is an integer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2520. Count the Digits That Divide a Number</title><link>https://intervalrain.github.io/leetcode/2520/</link><pubDate>Sun, 01 Jan 2023 23:41:54 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2520/</guid><description>&lt;p&gt;&lt;strong&gt;2520. Count the Digits That Divide a Number&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics:&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 323}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer &lt;code&gt;num&lt;/code&gt;, return &lt;em&gt;the number of digits in &lt;code&gt;num&lt;/code&gt; that divide &lt;code&gt;num&lt;/code&gt;.&lt;/em&gt;
An integer &lt;code&gt;val&lt;/code&gt; divides &lt;code&gt;nums&lt;/code&gt; if &lt;code&gt;nums % val == 0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; num = 7&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; 7 divides itself, hence the answer is 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; num = 121&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 290. Word Pattern</title><link>https://intervalrain.github.io/leetcode/290/</link><pubDate>Sun, 01 Jan 2023 23:14:56 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/290/</guid><description>&lt;p&gt;&lt;strong&gt;290. Word Pattern&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given a &lt;code&gt;pattern&lt;/code&gt; and a string &lt;code&gt;s&lt;/code&gt;, find if &lt;code&gt;s&lt;/code&gt; follows the same pattern.&lt;br&gt;
Here &lt;strong&gt;follow&lt;/strong&gt; means a full match, such that there is a bijection between a letter in &lt;code&gt;pattern&lt;/code&gt; and &lt;strong&gt;non-empty&lt;/strong&gt; word in &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; pattern = &amp;ldquo;abba&amp;rdquo;, s = &amp;ldquo;dog cat cat dog&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; pattern = &amp;ldquo;abba&amp;rdquo;, s = &amp;ldquo;dog cat cat fish&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[C#] Yield Return</title><link>https://intervalrain.github.io/csharp/yield/</link><pubDate>Sun, 01 Jan 2023 21:40:25 +0800</pubDate><guid>https://intervalrain.github.io/csharp/yield/</guid><description>Introduction to yield return in C#, and the background of IEnumerable and IEnumerator</description></item><item><title>[LeetCode] 1834. Single-Threaded CPU</title><link>https://intervalrain.github.io/leetcode/1834/</link><pubDate>Thu, 29 Dec 2022 22:49:27 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1834/</guid><description>&lt;p&gt;&lt;strong&gt;1834. Single-Threaded CPU&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;、&lt;code&gt;Heap (Priority Queue&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given &lt;code&gt;n&lt;/code&gt;​​​​ tasks labeled from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n - 1&lt;/code&gt; represented by a 2D integer array &lt;code&gt;tasks&lt;/code&gt;, where &lt;code&gt;tasks[i] = [enqueueTimei, processingTimei]&lt;/code&gt; means that the &lt;code&gt;i​​​​​​th​​​​&lt;/code&gt; task will be available to process at &lt;code&gt;enqueueTimei&lt;/code&gt; and will take &lt;code&gt;processingTimei&lt;/code&gt; to finish processing.&lt;br&gt;
You have a single-threaded CPU that can process &lt;strong&gt;at most one&lt;/strong&gt; task at a time and will act in the following way:&lt;/p&gt;</description></item><item><title>[LeetCode] 1962. Remove Stones to Minimize the Total</title><link>https://intervalrain.github.io/leetcode/1962/</link><pubDate>Thu, 29 Dec 2022 00:03:22 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1962/</guid><description>&lt;p&gt;&lt;strong&gt;1962. Remove Stones to Minimize the Total&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Heap (Priority Queue)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given a &lt;strong&gt;0-indexed&lt;/strong&gt; integer array &lt;code&gt;piles&lt;/code&gt;, where &lt;code&gt;piles[i]&lt;/code&gt; represents the number of stones in the &lt;code&gt;ith&lt;/code&gt; pile, and an integer &lt;code&gt;k&lt;/code&gt;. You should apply the following operation &lt;strong&gt;exactly&lt;/strong&gt; &lt;code&gt;k&lt;/code&gt; times:&lt;br&gt;
Choose any &lt;code&gt;piles[i]&lt;/code&gt; and &lt;strong&gt;remove&lt;/strong&gt; &lt;code&gt;floor(piles[i] / 2)&lt;/code&gt; stones from it.
&lt;strong&gt;Notice&lt;/strong&gt; that you can apply the operation on the &lt;strong&gt;same&lt;/strong&gt; pile more than once.&lt;br&gt;
Return &lt;em&gt;the minimum possible total number of stones remaining after applying the&lt;/em&gt; &lt;code&gt;k&lt;/code&gt; &lt;em&gt;operations.&lt;/em&gt;&lt;br&gt;
&lt;code&gt;floor(x)&lt;/code&gt; is the &lt;strong&gt;greatest&lt;/strong&gt; integer that is &lt;strong&gt;smaller&lt;/strong&gt; than or &lt;strong&gt;equal&lt;/strong&gt; to &lt;code&gt;x&lt;/code&gt; (i.e., rounds &lt;code&gt;x&lt;/code&gt; down).&lt;/p&gt;</description></item><item><title>[LeetCode] 2279. Maximum Bags With Full Capacity of Rocks</title><link>https://intervalrain.github.io/leetcode/2279/</link><pubDate>Tue, 27 Dec 2022 20:48:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2279/</guid><description>&lt;p&gt;&lt;strong&gt;2279. Maximum Bags With Full Capacity of Rocks&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Greedy&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You have &lt;code&gt;n&lt;/code&gt; bags numbered from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n - 1&lt;/code&gt;. You are given two &lt;strong&gt;0-indexed&lt;/strong&gt; integer arrays &lt;code&gt;capacity&lt;/code&gt; and &lt;code&gt;rocks&lt;/code&gt;. The &lt;code&gt;ith&lt;/code&gt; bag can hold a maximum of &lt;code&gt;capacity[i]&lt;/code&gt; rocks and currently contains &lt;code&gt;rocks[i]&lt;/code&gt; rocks. You are also given an integer &lt;code&gt;additionalRocks&lt;/code&gt;, the number of additional rocks you can place in &lt;strong&gt;any&lt;/strong&gt; of the bags.&lt;br&gt;
Return &lt;em&gt;the &lt;strong&gt;maximum&lt;/strong&gt; number of bags that could have full capacity after placing the additional rocks in some bags.&lt;/em&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2389. Longest Subsequence With Limited Sum</title><link>https://intervalrain.github.io/leetcode/2389/</link><pubDate>Sun, 25 Dec 2022 20:07:51 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2389/</guid><description>&lt;p&gt;&lt;strong&gt;2389. Longest Subsequence With Limited Sum&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Binary Search&lt;/code&gt;、&lt;code&gt;Greedy&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;、&lt;code&gt;Prefix Sum&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an integer array &lt;code&gt;nums&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, and an integer array queries of length &lt;code&gt;m&lt;/code&gt;.&lt;br&gt;
Return &lt;em&gt;an array&lt;/em&gt; &lt;code&gt;answer&lt;/code&gt; &lt;em&gt;of length&lt;/em&gt; &lt;code&gt;m&lt;/code&gt; &lt;em&gt;where&lt;/em&gt; &lt;code&gt;answer[i]&lt;/code&gt; &lt;em&gt;is the&lt;/em&gt; &lt;em&gt;&lt;strong&gt;maximum&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;size of a&lt;/em&gt; &lt;em&gt;&lt;strong&gt;subsequence&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;that you can take from&lt;/em&gt; &lt;code&gt;nums&lt;/code&gt; &lt;em&gt;such that the&lt;/em&gt; &lt;em&gt;&lt;strong&gt;sum&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;of its elements is less than or equal to&lt;/em&gt; &lt;code&gt;queries[i]&lt;/code&gt;.&lt;br&gt;
A &lt;strong&gt;subsequence&lt;/strong&gt; is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.&lt;/p&gt;</description></item><item><title>[LeetCode] 790. Domino and Tromino Tiling</title><link>https://intervalrain.github.io/leetcode/790/</link><pubDate>Sat, 24 Dec 2022 23:53:10 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/790/</guid><description>&lt;p&gt;&lt;strong&gt;790. Domino and Tromino Tiling&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Dynamic Programming&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You have two types of tiles: a &lt;code&gt;2 x 1&lt;/code&gt; domino shape and a tromino shape. You may rotate these shapes.&lt;br&gt;
&lt;img alt="domino" loading="lazy" src="https://assets.leetcode.com/uploads/2021/07/15/lc-domino.jpg"&gt;
Given an integer n, return &lt;em&gt;the number of ways to tile an&lt;/em&gt; &lt;code&gt;2 x n&lt;/code&gt; &lt;em&gt;board&lt;/em&gt;. Since the answer may be very large, return it &lt;strong&gt;modulo&lt;/strong&gt; &lt;code&gt;10^9 + 7&lt;/code&gt;.&lt;br&gt;
In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.&lt;/p&gt;</description></item><item><title>[LeetCode] 841. Keys and Rooms</title><link>https://intervalrain.github.io/leetcode/841/</link><pubDate>Tue, 20 Dec 2022 23:00:22 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/841/</guid><description>&lt;p&gt;&lt;strong&gt;841. Keys and Rooms&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Breadth-First Search&lt;/code&gt;、&lt;code&gt;Graph&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;There are &lt;code&gt;n&lt;/code&gt; rooms labeled from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n - 1&lt;/code&gt; and all the rooms are locked except for room &lt;code&gt;0&lt;/code&gt;. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.&lt;br&gt;
When you visit a room, you may find a set of &lt;strong&gt;distinct keys&lt;/strong&gt; in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.&lt;br&gt;
Given an array &lt;code&gt;rooms&lt;/code&gt; where &lt;code&gt;rooms[i]&lt;/code&gt; is the set of keys that you can obtain if you visited room &lt;code&gt;i&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt; &lt;em&gt;if you can visit all the rooms, or&lt;/em&gt; &lt;code&gt;false&lt;/code&gt; &lt;em&gt;otherwise&lt;/em&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 25. Reverse Nodes in k-Group</title><link>https://intervalrain.github.io/leetcode/25/</link><pubDate>Fri, 16 Dec 2022 23:32:48 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/25/</guid><description>&lt;p&gt;&lt;strong&gt;25. Reverse Nodes in k-Group&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Linked List&lt;/code&gt;、&lt;code&gt;Recursion&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given the &lt;code&gt;head&lt;/code&gt; of a linked list, reverse the nodes of the list &lt;code&gt;k&lt;/code&gt; at a time, and return &lt;em&gt;the modified list&lt;/em&gt;.&lt;br&gt;
&lt;code&gt;k&lt;/code&gt; is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of &lt;code&gt;k&lt;/code&gt; then left-out nodes, in the end, should remain as it is.&lt;br&gt;
You may not alter the values in the list&amp;rsquo;s nodes, only nodes themselves may be changed.&lt;/p&gt;</description></item><item><title>[LeetCode] 24. Swap Nodes in Pairs</title><link>https://intervalrain.github.io/leetcode/24/</link><pubDate>Wed, 14 Dec 2022 23:35:28 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/24/</guid><description>&lt;p&gt;&lt;strong&gt;24. Swap Nodes in Pairs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Linked List&lt;/code&gt;、&lt;code&gt;Recursion&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list&amp;rsquo;s nodes (i.e., only nodes themselves may be changed.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="swap_ex1" loading="lazy" src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; head = [1,2,3,4]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [2,1,4,3]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; head = []&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; []&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; head = [1]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [1]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 931. Minimum Falling Path Sum</title><link>https://intervalrain.github.io/leetcode/931/</link><pubDate>Tue, 13 Dec 2022 21:53:27 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/931/</guid><description>&lt;p&gt;&lt;strong&gt;931. Minimum Falling Path Sum&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Matrix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an &lt;code&gt;n x n&lt;/code&gt; array of integers &lt;code&gt;matrix&lt;/code&gt;, return &lt;em&gt;the &lt;strong&gt;minimum sum&lt;/strong&gt; of any &lt;strong&gt;falling path&lt;/strong&gt; through&lt;/em&gt; &lt;code&gt;matrix&lt;/code&gt;.&lt;br&gt;
A &lt;strong&gt;falling path&lt;/strong&gt; starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position &lt;code&gt;(row, col)&lt;/code&gt; will be &lt;code&gt;(row + 1, col - 1)&lt;/code&gt;, &lt;code&gt;(row + 1, col)&lt;/code&gt;, or &lt;code&gt;(row + 1, col + 1)&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 70. Climbing Stairs</title><link>https://intervalrain.github.io/leetcode/70/</link><pubDate>Mon, 12 Dec 2022 22:43:20 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/70/</guid><description>&lt;p&gt;&lt;strong&gt;70. Climbing Stairs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Memoization&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are climbing a staircase. It takes &lt;code&gt;n&lt;/code&gt; steps to reach the top.&lt;br&gt;
Each time you can either climb &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; steps. In how many distinct ways can you climb to the top?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; n = 2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; There are two ways to climb to the top.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;1 step + 1 step&lt;/li&gt;
&lt;li&gt;2 steps&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2501. Longest Square Streak in an Array</title><link>https://intervalrain.github.io/leetcode/2501/</link><pubDate>Sun, 11 Dec 2022 22:42:14 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2501/</guid><description>&lt;p&gt;&lt;strong&gt;2501. Longest Square Streak in an Array&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Binary Search&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 323}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an integer array &lt;code&gt;nums&lt;/code&gt;. A subsequence of &lt;code&gt;nums&lt;/code&gt; is called a &lt;strong&gt;square streak&lt;/strong&gt; if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The length of the subsequence is at least &lt;code&gt;2&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;after&lt;/strong&gt; sorting the subsequence, each element (except the first element) is the &lt;strong&gt;square&lt;/strong&gt; of the previous number.&lt;br&gt;
Return &lt;em&gt;the length of the &lt;strong&gt;longest square streak&lt;/strong&gt; in &lt;code&gt;nums&lt;/code&gt;, or return &lt;code&gt;-1&lt;/code&gt; if there is no &lt;strong&gt;square streak&lt;/strong&gt;&lt;/em&gt;.&lt;br&gt;
A &lt;strong&gt;subsequence&lt;/strong&gt; is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2500. Delete Greatest Value in Each Row</title><link>https://intervalrain.github.io/leetcode/2500/</link><pubDate>Sun, 11 Dec 2022 22:42:12 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2500/</guid><description>&lt;p&gt;&lt;strong&gt;2500. Delete Greatest Value in Each Row&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Binary Search&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 323}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an &lt;code&gt;m x n&lt;/code&gt; matrix &lt;code&gt;grid&lt;/code&gt; consisting of positive integers.&lt;br&gt;
Perform the following operation until &lt;code&gt;grid&lt;/code&gt; becomes empty:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delete the element with the greatest value from each row. If multiple such elements exist, delete any of them.&lt;/li&gt;
&lt;li&gt;Add the maximum of deleted elements to the answer.&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; that the number of columns decreases by one after each operation.&lt;br&gt;
Return &lt;em&gt;the answer after performing the operations described above&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="q1ex1" loading="lazy" src="https://assets.leetcode.com/uploads/2022/10/19/q1ex1.jpg"&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 124. Binary Tree Maximum Path Sum</title><link>https://intervalrain.github.io/leetcode/124/</link><pubDate>Sun, 11 Dec 2022 21:53:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/124/</guid><description>&lt;p&gt;&lt;strong&gt;124. Binary Tree Maximum Path Sum&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Tree&lt;/code&gt;、&lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Binary Tree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;path&lt;/strong&gt; in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence &lt;strong&gt;at most once&lt;/strong&gt;. Note that the path does not need to pass through the root.&lt;br&gt;
The &lt;strong&gt;path sum&lt;/strong&gt; of a path is the sum of the node&amp;rsquo;s values in the path.&lt;br&gt;
Given the &lt;code&gt;root&lt;/code&gt; of a binary tree, return &lt;em&gt;the maximum &lt;strong&gt;path sum&lt;/strong&gt; of any &lt;strong&gt;non-empty&lt;/strong&gt; path&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="exx1" loading="lazy" src="https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg"&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 1339. Maximum Product of Splitted Binary Tree</title><link>https://intervalrain.github.io/leetcode/1339/</link><pubDate>Sat, 10 Dec 2022 20:12:36 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1339/</guid><description>&lt;p&gt;&lt;strong&gt;1339. Maximum Product of Splitted Binary Tree&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Tree&lt;/code&gt;、&lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Binary Tree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a binary tree, split the bianry tree into two subtrees by removing one edge such that the product of the sums of the subtreesis maximized.&lt;br&gt;
Return &lt;em&gt;the maximum product of the sums of the two subtrees&lt;/em&gt;. Since the answer may be too large, return it &lt;strong&gt;modulo&lt;/strong&gt; &lt;code&gt;10^9 + 7&lt;/code&gt;.&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; that you need to maximize the answer before taking the mod and not after taking it.&lt;/p&gt;</description></item><item><title>[LeetCode] 1026. Maximum Difference Between Node and Ancestor</title><link>https://intervalrain.github.io/leetcode/1026/</link><pubDate>Sat, 10 Dec 2022 00:49:10 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1026/</guid><description>&lt;p&gt;&lt;strong&gt;1026. Maximum Difference Between Node and Ancestor&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Tree&lt;/code&gt;、&lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Binary Tree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a binary tree, find the maximum value &lt;code&gt;v&lt;/code&gt; for which there exist &lt;strong&gt;different&lt;/strong&gt; nodes &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; where &lt;code&gt;v = |a.val - b.val|&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is an ancestor of &lt;code&gt;b&lt;/code&gt;.&lt;br&gt;
A node &lt;code&gt;a&lt;/code&gt; is an ancestor of &lt;code&gt;b&lt;/code&gt; if either: any child of &lt;code&gt;a&lt;/code&gt; is equal to &lt;code&gt;b&lt;/code&gt; or any child of &lt;code&gt;a&lt;/code&gt; is an ancestor of &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 872. Leaf-Similar Trees</title><link>https://intervalrain.github.io/leetcode/872/</link><pubDate>Thu, 08 Dec 2022 21:41:10 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/872/</guid><description>&lt;p&gt;&lt;strong&gt;872. Leaf-Similar Trees&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Tree&lt;/code&gt;、&lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Binary Tree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Consider all the leaves of a binary tree, from left to right order, the values of those leaves form &lt;strong&gt;a leaf value sequence&lt;/strong&gt;.
&lt;img alt="tree" loading="lazy" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png"&gt;
For example, in the given tree above, the leaf value sequence is &lt;code&gt;(6, 7, 4, 9, 8)&lt;/code&gt;.&lt;br&gt;
Two binary trees are considered leaf-similar if their leaf value sequence is the same.&lt;br&gt;
Return &lt;code&gt;true&lt;/code&gt; if and only if the two given trees with head nodes &lt;code&gt;root1&lt;/code&gt; and &lt;code&gt;root2&lt;/code&gt; are leaf-similar.&lt;/p&gt;</description></item><item><title>[LeetCode] 938. Range Sum of BST</title><link>https://intervalrain.github.io/leetcode/938/</link><pubDate>Wed, 07 Dec 2022 23:41:31 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/938/</guid><description>&lt;p&gt;&lt;strong&gt;938. Range Sum of BST&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Tree&lt;/code&gt;、&lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Binary Search Tree&lt;/code&gt;、&lt;code&gt;Binary Tree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; node of a binary search tree and two integers &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt;, return &lt;em&gt;the sum of values of all nodes with a value in the &lt;em&gt;&lt;strong&gt;inclusive&lt;/strong&gt;&lt;/em&gt; range&lt;/em&gt; &lt;code&gt;[low, high]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="bst1" loading="lazy" src="https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; root = [10,5,15,3,7,null,18], low = 7, high = 15&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 32&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;
&lt;img alt="bst2" loading="lazy" src="https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg"&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 328. Odd Even Linked List</title><link>https://intervalrain.github.io/leetcode/328/</link><pubDate>Tue, 06 Dec 2022 23:56:11 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/328/</guid><description>&lt;p&gt;&lt;strong&gt;328. Odd Even Linked List&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Linked List&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given the &lt;code&gt;head&lt;/code&gt; of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return &lt;em&gt;the reordered list&lt;/em&gt;.&lt;br&gt;
The &lt;strong&gt;first&lt;/strong&gt; node is considered &lt;strong&gt;odd&lt;/strong&gt;, and the &lt;strong&gt;second&lt;/strong&gt; node is &lt;strong&gt;even&lt;/strong&gt;, and so on.&lt;br&gt;
Note that the relative order inside both the even and odd groups should remain as it was in the input.&lt;br&gt;
You must solve the problem in &lt;code&gt;O(1)&lt;/code&gt; extra space complexity and &lt;code&gt;O(n)&lt;/code&gt; time complexity.&lt;/p&gt;</description></item><item><title>[LeetCode] 2472. Maximum Number of Non-overlapping Palindrome Substrings</title><link>https://intervalrain.github.io/leetcode/2472/</link><pubDate>Tue, 29 Nov 2022 23:55:22 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2472/</guid><description>&lt;p&gt;&lt;strong&gt;2472. Maximum Number of Non-overlapping Palindrome Substrings&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{weekly Contest 319}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given a string &lt;code&gt;s&lt;/code&gt; and a &lt;strong&gt;positive&lt;/strong&gt; integer &lt;code&gt;k&lt;/code&gt;.
Select a set of &lt;strong&gt;non-overlapping&lt;/strong&gt; substrings from the string &lt;code&gt;s&lt;/code&gt; that satisfy the following conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;length&lt;/strong&gt; of each substring is &lt;strong&gt;at least&lt;/strong&gt; &lt;code&gt;k&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each substring is a &lt;strong&gt;palindrome&lt;/strong&gt;.
Return &lt;em&gt;the &lt;em&gt;&lt;strong&gt;maximum&lt;/strong&gt;&lt;/em&gt; number of substrings in an optimal selection&lt;/em&gt;.
A &lt;strong&gt;substring&lt;/strong&gt; is a contiguous sequence of characters within a string.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2471. Minimum Number of Operations to Sort a Binary Tree by Level</title><link>https://intervalrain.github.io/leetcode/2471/</link><pubDate>Tue, 29 Nov 2022 23:55:20 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2471/</guid><description>&lt;p&gt;&lt;strong&gt;2471. Minimum Number of Operations to Sort a Binary Tree by Level&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Tree&lt;/code&gt;、&lt;code&gt;Breadth-First Search&lt;/code&gt;、&lt;code&gt;Binary Tree&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{weekly Contest 319}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given the &lt;code&gt;root&lt;/code&gt; of a binary tree with &lt;strong&gt;unique values&lt;/strong&gt;.
In one operation, you can choose any two nodes &lt;strong&gt;at the same level&lt;/strong&gt; and swap their values.
Return &lt;em&gt;the minimum number of operations needed to make the values at each level sorted in a &lt;em&gt;&lt;strong&gt;strictly increasing order&lt;/strong&gt;&lt;/em&gt;&lt;/em&gt;.
The &lt;strong&gt;level&lt;/strong&gt; of a node is the number of edges along the path between it and the root node.&lt;/p&gt;</description></item><item><title>[LeetCode] 2470. Number of Subarrays With LCM Equal to K</title><link>https://intervalrain.github.io/leetcode/2470/</link><pubDate>Tue, 29 Nov 2022 23:55:18 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2470/</guid><description>&lt;p&gt;&lt;strong&gt;2470. Number of Subarrays With LCM Equal to K&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;Number Theory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{weekly Contest 319}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;k&lt;/code&gt;, return &lt;em&gt;the number of &lt;em&gt;&lt;strong&gt;subarrays&lt;/strong&gt;&lt;/em&gt; of &lt;code&gt;nums&lt;/code&gt; where the least common multiple of the subarray&amp;rsquo;s elements is&lt;/em&gt; &lt;code&gt;k&lt;/code&gt;.
A &lt;strong&gt;subarray&lt;/strong&gt; is a contiguous non-empty sequence of elements within an array.
The &lt;strong&gt;least common multiple of an array&lt;/strong&gt; is the smallest positive integer that is divisible by all the array elements.&lt;/p&gt;</description></item><item><title>[LeetCode] 2469. Convert the Temperature</title><link>https://intervalrain.github.io/leetcode/2469/</link><pubDate>Tue, 29 Nov 2022 23:55:11 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2469/</guid><description>&lt;p&gt;&lt;strong&gt;2469. Convert the Temperature&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Math&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{weekly Contest 319}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given a non-negative floating point number rounded to two decimal places &lt;code&gt;celsius&lt;/code&gt;, that denotes the &lt;strong&gt;temperature in Celsius&lt;/strong&gt;.
You should convert Celsius into &lt;strong&gt;Kelvin&lt;/strong&gt; and &lt;strong&gt;Fahrenheit&lt;/strong&gt; and return it as an array &lt;code&gt;ans = [kelvin, fahrenheit]&lt;/code&gt;.
Return &lt;em&gt;the array &lt;code&gt;ans&lt;/code&gt;&lt;/em&gt;. Answers within &lt;code&gt;10^-5&lt;/code&gt; of the actual answer will be accepted.
&lt;strong&gt;Note that:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Kelvin = Celsius + 273.15&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fahrenheit = Celsius * 1.80 + 32.00&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 446. Arithmetic Slices II - Subsequence</title><link>https://intervalrain.github.io/leetcode/446/</link><pubDate>Mon, 28 Nov 2022 23:39:03 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/446/</guid><description>&lt;p&gt;&lt;strong&gt;446. Arithmetic Slices II - Subsequence&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, return &lt;em&gt;the number of all the &lt;em&gt;&lt;strong&gt;arithmetic subsequences&lt;/strong&gt;&lt;/em&gt; of&lt;/em&gt; &lt;code&gt;nums&lt;/code&gt;.
A sequence of numbers is called arithmetic if it consists of &lt;strong&gt;at least three elements&lt;/strong&gt; and if the difference between any two consecutive elements is the same.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example, &lt;code&gt;[1, 3, 5, 7, 9]&lt;/code&gt;, &lt;code&gt;[7, 7, 7, 7]&lt;/code&gt;, and &lt;code&gt;[3, -1, -5, -9]&lt;/code&gt; are arithmetic sequences.&lt;/li&gt;
&lt;li&gt;For example, &lt;code&gt;[1, 1, 2, 5, 7]&lt;/code&gt; is not an arithmetic sequence.
A &lt;strong&gt;subsequence&lt;/strong&gt; of an array is a sequence that can be formed by removing some elements (possibly none) of the array.&lt;/li&gt;
&lt;li&gt;For example, &lt;code&gt;[2,5,10]&lt;/code&gt; is a subsequence of &lt;code&gt;[1,2,1,2,4,1,5,10]&lt;/code&gt;.
The test cases are generated so that the answer fits in &lt;strong&gt;32-bit&lt;/strong&gt; integer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2488. Count Subarrays With Median K</title><link>https://intervalrain.github.io/leetcode/2488/</link><pubDate>Sun, 27 Nov 2022 21:04:55 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2488/</guid><description>&lt;p&gt;&lt;strong&gt;2488. Count Subarrays With Median K&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Prefix Sum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 321}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an array &lt;code&gt;nums&lt;/code&gt; of size &lt;code&gt;n&lt;/code&gt; consisting of &lt;strong&gt;distinct&lt;/strong&gt; integers from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt; and a positive integer &lt;code&gt;k&lt;/code&gt;.&lt;br&gt;
Return &lt;em&gt;the number of non-empty subarrays in &lt;code&gt;nums&lt;/code&gt; that have a &lt;em&gt;&lt;strong&gt;median&lt;/strong&gt;&lt;/em&gt; equal to k.&lt;/em&gt;
&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The median of an array is the &lt;strong&gt;middle&lt;/strong&gt; element after sorting the array in &lt;strong&gt;ascending&lt;/strong&gt; order. If the array is of even length, the median is the &lt;strong&gt;left&lt;/strong&gt; middle element.
&lt;ul&gt;
&lt;li&gt;For example, the median of &lt;code&gt;[2,3,1,4]&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, and the median of &lt;code&gt;[8,4,3,5,1]&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A subarray is a contiguous part of an array.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2487. Remove Nodes From Linked List</title><link>https://intervalrain.github.io/leetcode/2487/</link><pubDate>Sun, 27 Nov 2022 21:04:51 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2487/</guid><description>&lt;p&gt;&lt;strong&gt;2487. Remove Nodes From Linked List&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Linked List&lt;/code&gt;、&lt;code&gt;Stack&lt;/code&gt;、&lt;code&gt;Recursion&lt;/code&gt;、&lt;code&gt;Monotonic Stack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 321}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given the &lt;code&gt;head&lt;/code&gt; of a linked list.&lt;br&gt;
Remove every node which has a node with &lt;strong&gt;strictly greater&lt;/strong&gt; value anywhere to the right side of it.&lt;br&gt;
Return &lt;em&gt;the &lt;code&gt;head&lt;/code&gt; of the modified linked list&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="drawio" loading="lazy" src="https://assets.leetcode.com/uploads/2022/10/02/drawio.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; head = [5,2,13,3,8]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [13,8]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The nodes that should be removed are 5, 2 and 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Node 13 is to the right of node 5.&lt;/li&gt;
&lt;li&gt;Node 13 is to the right of node 2.&lt;/li&gt;
&lt;li&gt;Node 8 is to the right of node 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2486. Accept Characters to String to Make Subsequence</title><link>https://intervalrain.github.io/leetcode/2486/</link><pubDate>Sun, 27 Nov 2022 21:04:50 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2486/</guid><description>&lt;p&gt;&lt;strong&gt;2486. Accept Characters to String to Make Subsequence&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Two Pointer&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Greedy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 321}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You are given two strings &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; consisting of only lowercase English letters.
Return &lt;em&gt;the minimum number of characters that need to be appended to the end of &lt;code&gt;s&lt;/code&gt; so that &lt;code&gt;t&lt;/code&gt; becomes a &lt;em&gt;&lt;strong&gt;subsequence&lt;/strong&gt;&lt;/em&gt; of &lt;code&gt;s&lt;/code&gt;.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A &lt;strong&gt;subsequence&lt;/strong&gt; is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.&lt;/p&gt;</description></item><item><title>[LeetCode] 2485. Find the Pivot Integer</title><link>https://intervalrain.github.io/leetcode/2485/</link><pubDate>Sun, 27 Nov 2022 21:04:47 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2485/</guid><description>&lt;p&gt;&lt;strong&gt;2485. Find the Pivot Integer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;Prefix Sum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 321}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given a positive integer &lt;code&gt;n&lt;/code&gt;, find the &lt;strong&gt;pivot integer&lt;/strong&gt; &lt;code&gt;x&lt;/code&gt; such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sum of all elements between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; inclusively equals the sum of all elements between &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; inclusively.
Return &lt;em&gt;the pivot integer&lt;/em&gt; &lt;code&gt;x&lt;/code&gt;. If no such integer exists, return &lt;code&gt;-1&lt;/code&gt;. It is guaranteed that there will be at most one pivot index for the given input.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 1235. Maximum Profit in Job Scheduling</title><link>https://intervalrain.github.io/leetcode/1235/</link><pubDate>Sat, 26 Nov 2022 14:09:56 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1235/</guid><description>&lt;p&gt;&lt;strong&gt;1235. Maximum Profit in Job Scheduling&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Binary Search&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;We have &lt;code&gt;n&lt;/code&gt; jobs, where every job is scheduled to be done from &lt;code&gt;startTime[i]&lt;/code&gt; to &lt;code&gt;endTime[i]&lt;/code&gt;, obtaining a profit of &lt;code&gt;profit[i]&lt;/code&gt;.&lt;br&gt;
You&amp;rsquo;re given the &lt;code&gt;startTime&lt;/code&gt;, &lt;code&gt;endTime&lt;/code&gt; and &lt;code&gt;profit&lt;/code&gt; arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.&lt;br&gt;
If you choose a job that ends at time &lt;code&gt;X&lt;/code&gt; you will be able to start another job that starts at time &lt;code&gt;X&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 1143. Longest Common Subsequence</title><link>https://intervalrain.github.io/leetcode/1143/</link><pubDate>Thu, 24 Nov 2022 23:15:24 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1143/</guid><description>&lt;p&gt;&lt;strong&gt;1143. Longest Common Subsequence&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given two strings &lt;code&gt;text1&lt;/code&gt; and &lt;code&gt;text2&lt;/code&gt;, return &lt;em&gt;the length of their longest &lt;strong&gt;common subsequence&lt;/strong&gt;&lt;/em&gt;. If there is no &lt;strong&gt;common subsequence&lt;/strong&gt;, return &lt;code&gt;0&lt;/code&gt;.
A &lt;strong&gt;subsequence&lt;/strong&gt; of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example, &lt;code&gt;&amp;quot;ace&amp;quot;&lt;/code&gt; is a subsequence of &lt;code&gt;&amp;quot;abcde&amp;quot;&lt;/code&gt;.
A &lt;strong&gt;common subsequence&lt;/strong&gt; of two strings is a subsequence that is common to both strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 300. Longest Increasing Subsequence</title><link>https://intervalrain.github.io/leetcode/300/</link><pubDate>Thu, 24 Nov 2022 20:59:40 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/300/</guid><description>&lt;p&gt;&lt;strong&gt;300. Longest Increasing Subsequence&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Binary Search&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, return &lt;em&gt;the length of the longest &lt;em&gt;&lt;strong&gt;strictly increasing subsequence&lt;/strong&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [10,9,2,5,3,7,101,18]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The longest increasing subsequence is [2,3,7,101], therefore the length is 4.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [0,1,0,3,2,3]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [7,7,7,7,7,7,7]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 2500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-104 &amp;lt;= nums[i] &amp;lt;= 104&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt; Can you come up with an algorithm that runs in &lt;code&gt;O(n log n)&lt;/code&gt; time complexity&lt;/p&gt;</description></item><item><title>[LeetCode] 2468. Split Message Based on Limit</title><link>https://intervalrain.github.io/leetcode/2468/</link><pubDate>Thu, 24 Nov 2022 01:09:57 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2468/</guid><description>&lt;p&gt;&lt;strong&gt;2468. Split Message Based on Limit&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Binary Search&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Biweekly Contest 91}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given a string, &lt;code&gt;message&lt;/code&gt;, and a positive integer, &lt;code&gt;limit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You must &lt;strong&gt;split&lt;/strong&gt; &lt;code&gt;message&lt;/code&gt; into one or more &lt;strong&gt;parts&lt;/strong&gt; based on &lt;code&gt;limit&lt;/code&gt;. Each resulting part should have the suffix &lt;code&gt;&amp;quot;&amp;lt;a/b&amp;gt;&amp;quot;&lt;/code&gt;, where &lt;code&gt;&amp;quot;b&amp;quot;&lt;/code&gt; is to be &lt;strong&gt;replaced&lt;/strong&gt; with the total number of parts and &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; is to be &lt;strong&gt;replaced&lt;/strong&gt; with the index of the part, starting from &lt;code&gt;1&lt;/code&gt; and going up to &lt;code&gt;b&lt;/code&gt;. Additionally, the length of each resulting part (including its suffix) should be &lt;strong&gt;equal&lt;/strong&gt; to &lt;code&gt;limit&lt;/code&gt;, except for the last part whose length can be &lt;strong&gt;at most&lt;/strong&gt; &lt;code&gt;limit&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 2467. Most Profitable Path in a Tree</title><link>https://intervalrain.github.io/leetcode/2467/</link><pubDate>Thu, 24 Nov 2022 01:09:51 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2467/</guid><description>&lt;p&gt;&lt;strong&gt;2467. Most Profitable Path in a Tree&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Tree&lt;/code&gt;、&lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Breadth-First Search&lt;/code&gt;、&lt;code&gt;Graph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Biweekly Contest 91}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;There is an undirected tree with &lt;code&gt;n&lt;/code&gt; nodes labeled from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n - 1&lt;/code&gt;, rooted at node &lt;code&gt;0&lt;/code&gt;. You are given a 2D integer array &lt;code&gt;edges&lt;/code&gt; of length &lt;code&gt;n - 1&lt;/code&gt; where &lt;code&gt;edges[i] = [ai, bi]&lt;/code&gt; indicates that there is an edge between nodes &lt;code&gt;ai&lt;/code&gt; and &lt;code&gt;bi&lt;/code&gt; in the tree.
At every node &lt;code&gt;i&lt;/code&gt;, there is a gate. You are also given an array of even integers &lt;code&gt;amount&lt;/code&gt;, where &lt;code&gt;amount[i]&lt;/code&gt; represents:&lt;/p&gt;</description></item><item><title>[LeetCode] 1926. Nearest Exit from Entrance in Maze</title><link>https://intervalrain.github.io/leetcode/1926/</link><pubDate>Tue, 22 Nov 2022 23:41:58 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1926/</guid><description>&lt;p&gt;&lt;strong&gt;1926. Nearest Exit from Entrance in Maze&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Breadth-First Search&lt;/code&gt;、&lt;code&gt;Matrix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an &lt;code&gt;m x n&lt;/code&gt; matrix &lt;code&gt;maze&lt;/code&gt; (&lt;strong&gt;0-indexed&lt;/strong&gt;) with empty cells (represented as &lt;code&gt;'.'&lt;/code&gt;) and walls (represented as &lt;code&gt;'+'&lt;/code&gt;). You are also given the &lt;code&gt;entrance&lt;/code&gt; of the maze, where &lt;code&gt;entrance = [entrancerow, entrancecol]&lt;/code&gt; denotes the row and column of the cell you are initially standing at.&lt;/p&gt;
&lt;p&gt;In one step, you can move one cell &lt;strong&gt;up&lt;/strong&gt;, &lt;strong&gt;down&lt;/strong&gt;, &lt;strong&gt;left&lt;/strong&gt;, or &lt;strong&gt;right&lt;/strong&gt;. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the nearest exit from the &lt;code&gt;entrance&lt;/code&gt;. An &lt;strong&gt;exit&lt;/strong&gt; is defined as an &lt;strong&gt;empty cell&lt;/strong&gt; that is at the &lt;strong&gt;border&lt;/strong&gt; of the &lt;code&gt;maze&lt;/code&gt;. The &lt;code&gt;entrance&lt;/code&gt; &lt;strong&gt;does not count&lt;/strong&gt; as an exit.&lt;/p&gt;</description></item><item><title>[LeetCode] 279. Perfect Squares</title><link>https://intervalrain.github.io/leetcode/279/</link><pubDate>Tue, 22 Nov 2022 19:40:18 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/279/</guid><description>&lt;p&gt;&lt;strong&gt;279. Perfect Squares&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Breadth-First Search&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer &lt;code&gt;n&lt;/code&gt;, return &lt;em&gt;the least number of perfect square numbers that sum to&lt;/em&gt; &lt;code&gt;n&lt;/code&gt;.
A &lt;strong&gt;perfect square&lt;/strong&gt; is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;9&lt;/code&gt;, and &lt;code&gt;16&lt;/code&gt; are perfect squares while &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;11&lt;/code&gt; are not.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 337. House Robber III</title><link>https://intervalrain.github.io/leetcode/337/</link><pubDate>Sat, 19 Nov 2022 21:43:08 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/337/</guid><description>&lt;p&gt;&lt;strong&gt;337. House Robber III&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Tree&lt;/code&gt;、&lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Binary Tree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;The thief has found himself a new place for his thievery again. There is only one entrance to this area, called &lt;code&gt;root&lt;/code&gt;.
Besides the &lt;code&gt;root&lt;/code&gt;, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if &lt;strong&gt;two directly-linked houses were broken into on the same night&lt;/strong&gt;.
Given the &lt;code&gt;root&lt;/code&gt; of the binary tree, return &lt;em&gt;the maximum amount of money the thief can rob &lt;em&gt;&lt;strong&gt;without alerting the police&lt;/strong&gt;&lt;/em&gt;&lt;/em&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 587. Erect the Fence</title><link>https://intervalrain.github.io/leetcode/587/</link><pubDate>Sat, 19 Nov 2022 16:56:09 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/587/</guid><description>&lt;p&gt;&lt;strong&gt;587. Erect the Rence&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;Geometry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an array &lt;code&gt;trees&lt;/code&gt; where &lt;code&gt;trees[i] = [xi, yi]&lt;/code&gt; represents the location of a tree in the garden.
You are asked to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only &lt;strong&gt;if all the trees are enclosed&lt;/strong&gt;.
Return &lt;em&gt;the coordinates of trees that are exactly located on the fence perimeter&lt;/em&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 322. Coin Change</title><link>https://intervalrain.github.io/leetcode/322/</link><pubDate>Thu, 17 Nov 2022 21:31:45 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/322/</guid><description>&lt;p&gt;&lt;strong&gt;322. Coin Change&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Breadth-First Search&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an integer array &lt;code&gt;coins&lt;/code&gt; representing coins of different denominations and an integer &lt;code&gt;amount&lt;/code&gt; representing a total amount of money.
Return &lt;em&gt;the fewest number of coins that you need to make up that amount&lt;/em&gt;. If that amount of money cannot be made up by any combination of the coins, return &lt;code&gt;-1&lt;/code&gt;.
You may assume that you have an infinite number of each kind of coin.&lt;/p&gt;</description></item><item><title>[LeetCode] 2466. Count Ways To Build Good Strings</title><link>https://intervalrain.github.io/leetcode/2466/</link><pubDate>Thu, 17 Nov 2022 21:23:24 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2466/</guid><description>&lt;p&gt;&lt;strong&gt;2466. Count Ways To Build Good Strings&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Dynamic Programming&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Biweekly Contest 91}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given the integers &lt;code&gt;zero&lt;/code&gt;, &lt;code&gt;one&lt;/code&gt;, &lt;code&gt;low&lt;/code&gt;, and &lt;code&gt;high&lt;/code&gt;, we can construct a string by starting with an empty string, and then at each step perform either of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Append the character &lt;code&gt;'0'&lt;/code&gt; &lt;code&gt;zero&lt;/code&gt; times.&lt;/li&gt;
&lt;li&gt;Append the character &lt;code&gt;'1'&lt;/code&gt; &lt;code&gt;one&lt;/code&gt; times.
This can be performed any number of times.
A &lt;strong&gt;good&lt;/strong&gt; string is a string constructed by the above process having a &lt;strong&gt;length&lt;/strong&gt; between &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt; (&lt;strong&gt;inclusive&lt;/strong&gt;).
Return &lt;em&gt;the number of &lt;em&gt;&lt;strong&gt;different&lt;/strong&gt;&lt;/em&gt; good strings that can be constructed satisfying these properties&lt;/em&gt;. Since the answer can be large, return it &lt;strong&gt;modulo&lt;/strong&gt; &lt;code&gt;10^9 + 7&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2465. Number of Distinct Averages</title><link>https://intervalrain.github.io/leetcode/2465/</link><pubDate>Thu, 17 Nov 2022 21:00:05 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2465/</guid><description>&lt;p&gt;&lt;strong&gt;2465. Number of Distinct Averages&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Two Pointers&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Biweekly Contest 91}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given a &lt;strong&gt;0-indexed&lt;/strong&gt; integer array &lt;code&gt;nums&lt;/code&gt; of &lt;strong&gt;even&lt;/strong&gt; length.
As long as &lt;code&gt;nums&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; empty, you must repetitively:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the minimum number in &lt;code&gt;nums&lt;/code&gt; and remove it.&lt;/li&gt;
&lt;li&gt;Find the maximum number in &lt;code&gt;nums&lt;/code&gt; and remove it.&lt;/li&gt;
&lt;li&gt;Calculate the average of the two removed numbers.
The &lt;strong&gt;average&lt;/strong&gt; of two numbers &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;(a + b) / 2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For example, the average of &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; is &lt;code&gt;(2 + 3) / 2 = 2.5&lt;/code&gt;.
Return &lt;em&gt;the number of &lt;em&gt;&lt;strong&gt;distinct&lt;/strong&gt;&lt;/em&gt; averages calculated using the above process&lt;/em&gt;.
&lt;strong&gt;Note&lt;/strong&gt; that when there is a tie for a minimum or maximum number, any can be removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 223. Rectangle Area</title><link>https://intervalrain.github.io/leetcode/223/</link><pubDate>Thu, 17 Nov 2022 20:39:17 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/223/</guid><description>&lt;p&gt;&lt;strong&gt;223. Rectangle Area&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;Geometry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given the coordinates of two &lt;strong&gt;rectilinear&lt;/strong&gt; rectangles in a 2D plane, return &lt;em&gt;the total area covered by the two rectangles.&lt;/em&gt;
The first rectangle is defined by its &lt;strong&gt;bottom-left&lt;/strong&gt; corner &lt;code&gt;(ax1, ay1)&lt;/code&gt; and its &lt;strong&gt;top-right&lt;/strong&gt; corner &lt;code&gt;(ax2, ay2)&lt;/code&gt;.
The second rectangle is defined by its &lt;strong&gt;bottom-left&lt;/strong&gt; corner &lt;code&gt;(bx1, by1)&lt;/code&gt; and tis &lt;strong&gt;top-right&lt;/strong&gt; corner &lt;code&gt;(bx2, by2)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="rectangle-plane" loading="lazy" src="https://assets.leetcode.com/uploads/2021/05/08/rectangle-plane.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 45&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 374. Guess Number Higher or Lower</title><link>https://intervalrain.github.io/leetcode/374/</link><pubDate>Wed, 16 Nov 2022 22:57:11 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/374/</guid><description>&lt;p&gt;&lt;strong&gt;374. Guess Number Higher or Lower&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Binary Search&lt;/code&gt;、&lt;code&gt;Interactive&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;We are playing the Guess Game. The game is as follows:
I pick a number from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt;. You have to guess which number I picked.
Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.
You call a pre-defined API &lt;code&gt;int guess(int num)&lt;/code&gt;, which returns three possible results:&lt;/p&gt;</description></item><item><title>[LeetCode] 213. House Robber II</title><link>https://intervalrain.github.io/leetcode/213/</link><pubDate>Tue, 15 Nov 2022 23:45:49 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/213/</guid><description>&lt;p&gt;&lt;strong&gt;213. House Robber II&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are &lt;strong&gt;arranged in a circle&lt;/strong&gt;. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and &lt;strong&gt;it will automatically contact the police if two adjacent houses were broken into on the same night.&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 198. House Robber</title><link>https://intervalrain.github.io/leetcode/198/</link><pubDate>Tue, 15 Nov 2022 23:33:01 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/198/</guid><description>&lt;p&gt;&lt;strong&gt;198. House Robber&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and &lt;strong&gt;it will automatically contact the police if two adjacent houses were broken into on the same night.&lt;/strong&gt;
Given an integer array &lt;code&gt;nums&lt;/code&gt; representing the amount of money of each house, return &lt;em&gt;the maximum amount of money you can rob tonight&lt;/em&gt; &lt;em&gt;&lt;strong&gt;without alerting the police&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;</description></item><item><title>[Algo] 2-5. 動態規劃 Dynamic Programming</title><link>https://intervalrain.github.io/cs/algo/dp/</link><pubDate>Tue, 15 Nov 2022 16:10:53 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/dp/</guid><description>演算法設計，介紹什麼是動態規劃，並介紹幾種動態規劃常見的題型，與解題框架</description></item><item><title>[LeetCode] 947. Most Stones Removed with Same Row or Column</title><link>https://intervalrain.github.io/leetcode/947/</link><pubDate>Tue, 15 Nov 2022 00:12:30 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/947/</guid><description>&lt;p&gt;&lt;strong&gt;947. Most Stones Removed with Same Row or Column&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Union Find&lt;/code&gt;、&lt;code&gt;Graph&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;On a 2D plane, we place &lt;code&gt;n&lt;/code&gt; stones at some integer coordinate points. Each coordinate point may have at most one stone.
A stone can be removed if it shares either &lt;strong&gt;the same row or the same column&lt;/strong&gt; as another stone that has not been removed.
Given an array &lt;code&gt;stones&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt; where &lt;code&gt;stones[i] = [xi, yi]&lt;/code&gt; represents the location of the &lt;code&gt;ith&lt;/code&gt; stone, return &lt;em&gt;the largest possible number of stones that can be removed&lt;/em&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 151. Reverse Words in a String</title><link>https://intervalrain.github.io/leetcode/151/</link><pubDate>Sun, 13 Nov 2022 17:35:59 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/151/</guid><description>&lt;p&gt;&lt;strong&gt;151. Reverse Words in a String&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Two Pointers&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an input string &lt;code&gt;s&lt;/code&gt;, reverse the order of the &lt;strong&gt;words&lt;/strong&gt;.&lt;br&gt;
A &lt;strong&gt;word&lt;/strong&gt; is defined as a sequence of non-space characters. The &lt;strong&gt;words&lt;/strong&gt; in &lt;code&gt;s&lt;/code&gt; will be separated by at least one space.&lt;br&gt;
Return &lt;em&gt;a string of the words in reverse order concatenated by a single space&lt;/em&gt;.
&lt;strong&gt;Note&lt;/strong&gt; that &lt;code&gt;s&lt;/code&gt; may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.&lt;/p&gt;</description></item><item><title>[LeetCode] 23. Merge k Sorted Lists</title><link>https://intervalrain.github.io/leetcode/23/</link><pubDate>Fri, 11 Nov 2022 00:24:47 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/23/</guid><description>&lt;p&gt;&lt;strong&gt;23. Merge k Sorted Lists&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Linked List&lt;/code&gt;、&lt;code&gt;Divide and Conquer&lt;/code&gt;、&lt;code&gt;Heap (Priority Queue)&lt;/code&gt;、&lt;code&gt;Merge Sort&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an array of &lt;code&gt;k&lt;/code&gt; linked-lists &lt;code&gt;lists&lt;/code&gt;, each linked-list is sorted in ascending order.
&lt;em&gt;Merge all the linked-lists into one sorted linked-list and return it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; lists = [[1,4,5],[1,3,4],[2,6]]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [1,1,2,3,4,4,5,6]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The linked-lists are:&lt;br&gt;
[&lt;br&gt;
1-&amp;gt;4-&amp;gt;5,&lt;br&gt;
1-&amp;gt;3-&amp;gt;4,&lt;br&gt;
2-&amp;gt;6&lt;br&gt;
]&lt;br&gt;
merging them into one sorted list:&lt;br&gt;
1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 22. Generate Parentheses</title><link>https://intervalrain.github.io/leetcode/22/</link><pubDate>Thu, 10 Nov 2022 23:44:24 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/22/</guid><description>&lt;p&gt;&lt;strong&gt;22. Generate Parentheses&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Backtracking&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given &lt;code&gt;n&lt;/code&gt; pairs of parentheses, write a function to &lt;em&gt;generate all combinations of well-formed parentheses&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; n = 3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [&amp;quot;((()))&amp;quot;,&amp;quot;(()())&amp;quot;,&amp;quot;(())()&amp;quot;,&amp;quot;()(())&amp;quot;,&amp;quot;()()()&amp;quot;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; n = 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [&amp;quot;()&amp;quot;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="二分析"&gt;二、分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DFS 演算法是在遍歷「節點」，而回溯法是在遍歷「樹枝」。站在一個節點上，需思考三個問題：
&lt;ol&gt;
&lt;li&gt;路徑(PATH)：已做出的選擇。&lt;/li&gt;
&lt;li&gt;選項(OPTION)：當前可以做的選擇。&lt;/li&gt;
&lt;li&gt;終止條件(TERMINATE)：到達決策樹的底層，無法再做其它選擇。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;以下為回溯法的框架：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-C++" data-lang="C++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;PATH&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrack&lt;/span&gt;(PATH, OPTION) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (TERMINATE) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res.push_back(PATH);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (CHOICE : OPTION) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; DO OPTION;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; backtrack(PATH, OPTION);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CANCEL OPTION;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;本題的終止條件是當 &lt;code&gt;path&lt;/code&gt; 的長度為 &lt;code&gt;2n&lt;/code&gt; 的時候。&lt;/li&gt;
&lt;li&gt;而選項是增加&lt;strong&gt;左括號&lt;/strong&gt; &lt;code&gt;(&lt;/code&gt; 與增加&lt;strong&gt;右括號&lt;/strong&gt; &lt;code&gt;)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;加上兩個子節點的條件便完成，
&lt;ul&gt;
&lt;li&gt;左節點需滿足 &lt;code&gt;left &amp;lt; n&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;右節點需滿足 &lt;code&gt;right &amp;lt; n &amp;amp;&amp;amp; right &amp;lt; left&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DP 動態規劃則需觀察轉移方程式。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dp[0]&lt;/code&gt; base case： ``&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dp[1]&lt;/code&gt; 很容易得到：&lt;code&gt;()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dp[2]&lt;/code&gt; 也不難：&lt;code&gt;()()&lt;/code&gt;、&lt;code&gt;(())&lt;/code&gt;
接下來觀察 &lt;code&gt;dp[3]&lt;/code&gt;，可以分解為下面三個：
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(&lt;/code&gt; + dp[0] + &lt;code&gt;)&lt;/code&gt; + dp[2]：&lt;code&gt;()()()&lt;/code&gt;、&lt;code&gt;()(())&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(&lt;/code&gt; + dp[1] + &lt;code&gt;)&lt;/code&gt; + dp[1]：&lt;code&gt;(())()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(&lt;/code&gt; + dp[2] + &lt;code&gt;)&lt;/code&gt; + dp[0]：&lt;code&gt;(()())&lt;/code&gt;、&lt;code&gt;((()))&lt;/code&gt;
換句話說，轉移方程式可以寫成：&lt;code&gt;dp[i] = &amp;quot;(&amp;quot; + dp[j] + &amp;quot;)&amp;quot; + dp[i-j-1]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="三解題"&gt;三、解題&lt;/h3&gt;
&lt;h4 id="1-backtrack"&gt;1. Backtrack&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Time complexity: \(O(2^{2n})\)，&lt;a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%A1%94%E5%85%B0%E6%95%B0"&gt;Wiki - Catalan number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Space complexity: \(O(n)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-C++" data-lang="C++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; generateParenthesis(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string path;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; backtrack(n, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res, path);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrack&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; right, vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; res, string&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; path) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// terminate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (path.length() &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res.push_back(path);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// select
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (left &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; path.push_back(&lt;span style="color:#e6db74"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; backtrack(n, left&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, right, res, path);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; path.pop_back();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; left) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; path.push_back(&lt;span style="color:#e6db74"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; backtrack(n, left, right&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, res, path);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; path.pop_back();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="2-dynamic-programming"&gt;2. Dynamic Programming&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Time complexity: \(O(n^4)\)&lt;/li&gt;
&lt;li&gt;Space complexity: \(O(n)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-C++" data-lang="C++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; generateParenthesis(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&lt;/span&gt; dp(n&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dp[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;i&lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;j&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;i;j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dp[j];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dp[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;k&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;left.size();k&lt;span style="color:#f92672"&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; l&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;l&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;right.size();l&lt;span style="color:#f92672"&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dp[i].push_back(&lt;span style="color:#e6db74"&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; left[k] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;)&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; right[l]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; dp[n];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="https://intervalrain.github.io/leetcode"&gt;回目錄 Catalog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 21. Merge Two Sorted Lists</title><link>https://intervalrain.github.io/leetcode/21/</link><pubDate>Thu, 10 Nov 2022 20:25:07 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/21/</guid><description>&lt;p&gt;&lt;strong&gt;21. Merge Two Sorted Lists&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Linked List&lt;/code&gt;、&lt;code&gt;Recursion&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given the heads of two sorted linked lists &lt;code&gt;list1&lt;/code&gt; and &lt;code&gt;list2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Merge the two lists in a one &lt;strong&gt;sorted&lt;/strong&gt; list. The list should be made by splicing together the nodes of the first two lists.&lt;/p&gt;
&lt;p&gt;Return &lt;em&gt;the head of the merged linked list&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; list1 = [1,2,4], list2 = [1,3,4]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [1,1,2,3,4,4]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 1047. Remove All Adjacent Duplicates In String</title><link>https://intervalrain.github.io/leetcode/1047/</link><pubDate>Thu, 10 Nov 2022 20:01:29 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1047/</guid><description>&lt;p&gt;&lt;strong&gt;1047. Remove All Adjacent Duplicates In String&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Stack&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given a string &lt;code&gt;s&lt;/code&gt; consisting of lowercase English letters. A &lt;strong&gt;duplicate removal&lt;/strong&gt; consists of choosing two &lt;strong&gt;adjacent&lt;/strong&gt; and &lt;strong&gt;equal&lt;/strong&gt; letters and removing them.&lt;/p&gt;
&lt;p&gt;We repeatly make &lt;strong&gt;duplicate removals&lt;/strong&gt; on &lt;code&gt;s&lt;/code&gt; until we no longer can.&lt;/p&gt;
&lt;p&gt;Return &lt;em&gt;the final string after all such duplicate removals have been made&lt;/em&gt;. It can be proven that the answer is &lt;strong&gt;unique&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 901. Online Stock Span</title><link>https://intervalrain.github.io/leetcode/901/</link><pubDate>Wed, 09 Nov 2022 23:35:42 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/901/</guid><description>&lt;p&gt;&lt;strong&gt;901. Online Stock Span&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Stack&lt;/code&gt;、&lt;code&gt;Design&lt;/code&gt;、&lt;code&gt;Monotonic Stack&lt;/code&gt;、&lt;code&gt;Data Stream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Design an algorithm that collects daily price quotes for some stock and returns &lt;strong&gt;the span&lt;/strong&gt; of that stock&amp;rsquo;s price for the current day.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;span&lt;/strong&gt; of the stock&amp;rsquo;s price today is defined as the maximum number of consecutive days (starting from today and going backward) for which the stock price was less than or equal to today&amp;rsquo;s price.&lt;/p&gt;</description></item><item><title>[LeetCode] 1544. Make The String Great</title><link>https://intervalrain.github.io/leetcode/1544/</link><pubDate>Tue, 08 Nov 2022 23:14:34 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1544/</guid><description>&lt;p&gt;&lt;strong&gt;1544. Make The String Great&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Stack&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given a string &lt;code&gt;s&lt;/code&gt; of lower and upper case English letters.&lt;br&gt;
A good string is a string which doesn&amp;rsquo;t have &lt;strong&gt;two adjacent characters&lt;/strong&gt; &lt;code&gt;s[i]&lt;/code&gt; and &lt;code&gt;s[i + 1]&lt;/code&gt; where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= i &amp;lt;= s.length - 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[i]&lt;/code&gt; is a lower-case letter and &lt;code&gt;s[i + 1]&lt;/code&gt; is the same letter but in upper-case or &lt;strong&gt;vice-versa&lt;/strong&gt;.&lt;br&gt;
To make the string good, you can choose &lt;strong&gt;two adjacent&lt;/strong&gt; characters that make the string bad and remove them. You can keep doing this until the string becomes good.&lt;br&gt;
Return the string after making it good. The answer is guaranteed to be unique under the given constraints.&lt;br&gt;
&lt;strong&gt;Notice&lt;/strong&gt; that an empty string is also good.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2463. Minimum Total Distance Traveled</title><link>https://intervalrain.github.io/leetcode/2463/</link><pubDate>Tue, 08 Nov 2022 23:13:52 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2463/</guid><description>&lt;p&gt;&lt;strong&gt;2463. Minimum Total Distance Traveled&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 318}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;There are some robots and factories on the X-axis. You are given an integer array &lt;code&gt;robot&lt;/code&gt; where &lt;code&gt;robot[i]&lt;/code&gt; is the position of the &lt;code&gt;ith&lt;/code&gt; robot. You are also given a 2D integer array &lt;code&gt;factory&lt;/code&gt; where &lt;code&gt;factory[j] = [positionj, limitj]&lt;/code&gt; indicates that &lt;code&gt;positionj&lt;/code&gt; is the position of the &lt;code&gt;jth&lt;/code&gt; factory and that the &lt;code&gt;jth&lt;/code&gt; factory can repair at most &lt;code&gt;limitj&lt;/code&gt; robots.&lt;/p&gt;</description></item><item><title>[LeetCode] 2462. Total Cost to Hire K</title><link>https://intervalrain.github.io/leetcode/2462/</link><pubDate>Tue, 08 Nov 2022 00:53:08 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2462/</guid><description>&lt;p&gt;&lt;strong&gt;2462. Total Cost to Hire K&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Two Pointer&lt;/code&gt;、&lt;code&gt;Heap (Priority Queue)&lt;/code&gt;、&lt;code&gt;Simulation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 318}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given a &lt;strong&gt;0-indexed&lt;/strong&gt; integer array &lt;code&gt;costs&lt;/code&gt; where &lt;code&gt;costs[i]&lt;/code&gt; is the cost of hiring the &lt;code&gt;ith&lt;/code&gt; worker.
You are also given two integers &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;candidates&lt;/code&gt;. We want to hire exactly &lt;code&gt;k&lt;/code&gt; workers according to the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You will run &lt;code&gt;k&lt;/code&gt; sessions and hire exactly one worker in each session.&lt;/li&gt;
&lt;li&gt;In each hiring session, choose the worker with the lowest cost from either the first &lt;code&gt;candidates&lt;/code&gt; workers or the last &lt;code&gt;candidates&lt;/code&gt; workers. Break the tie by the smallest index.
&lt;ul&gt;
&lt;li&gt;For example, if &lt;code&gt;costs = [3,2,7,7,1,2]&lt;/code&gt; and &lt;code&gt;candidates = 2&lt;/code&gt;, then in the first hiring session, we will choose the &lt;code&gt;4th&lt;/code&gt; worker because they have the lowest cost &lt;code&gt;[3,2,7,7,1,2]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the second hiring session, we will choose &lt;code&gt;1st&lt;/code&gt; worker because they have the same lowest cost as &lt;code&gt;4th&lt;/code&gt; worker but they have the smallest index &lt;code&gt;[3,2,7,7,2]&lt;/code&gt;. Please note that the indexing may be changed in the process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.&lt;/li&gt;
&lt;li&gt;A worker can only be chosen once.
Return &lt;em&gt;the total cost to hire exactly&lt;/em&gt; &lt;code&gt;k&lt;/code&gt; &lt;em&gt;workers&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2461. Maximum Sum of Distinct Subarrays With Length K</title><link>https://intervalrain.github.io/leetcode/2461/</link><pubDate>Tue, 08 Nov 2022 00:36:35 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2461/</guid><description>&lt;p&gt;&lt;strong&gt;2461. Maximum Sum of Distinct Subarrays With Length K&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Sliding Window&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 318}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an integer array &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;k&lt;/code&gt;. Find the maximum subarray sum of all the subarrays of &lt;code&gt;nums&lt;/code&gt; that meet the following conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The length of the subarray is &lt;code&gt;k&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;All the elements of the subarray are &lt;strong&gt;distinct&lt;/strong&gt;.
Return &lt;em&gt;the maximum subarray sum of all the subarrays that meet the conditions&lt;/em&gt;. If no subarray meets the conditions, return &lt;code&gt;0&lt;/code&gt;.
&lt;em&gt;A&lt;/em&gt; &lt;em&gt;&lt;strong&gt;subarray&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;is a contiguous non-empty sequence of elements within an array.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2460. Apply Operations to an Array</title><link>https://intervalrain.github.io/leetcode/2460/</link><pubDate>Tue, 08 Nov 2022 00:09:13 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2460/</guid><description>&lt;p&gt;&lt;strong&gt;2460. Apply Operations to an Array&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Simulation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;\(\color{blue}\textsf{Weekly Contest 318}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given a &lt;strong&gt;0-indexed&lt;/strong&gt; array &lt;code&gt;nums&lt;/code&gt; of size &lt;code&gt;n&lt;/code&gt; consisting of &lt;strong&gt;non-negative&lt;/strong&gt; integers.
You need to apply &lt;code&gt;n - 1&lt;/code&gt; operations to this array where, in the &lt;code&gt;ith&lt;/code&gt; operation (&lt;strong&gt;0-indexed&lt;/strong&gt;), you will apply the following on the &lt;code&gt;ith&lt;/code&gt; element of &lt;code&gt;nums&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;nums[i] == nums[i + 1]&lt;/code&gt;, then multiply &lt;code&gt;nums[i]&lt;/code&gt; by &lt;code&gt;2&lt;/code&gt; and set &lt;code&gt;nums[i + 1]&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;. Otherwise, you skip this operation.
After performing &lt;strong&gt;all&lt;/strong&gt; the operations, &lt;strong&gt;shift&lt;/strong&gt; all the 0&amp;rsquo;s to the &lt;strong&gt;end&lt;/strong&gt; of the array.&lt;/li&gt;
&lt;li&gt;For example, the array &lt;code&gt;[1,0,2,0,0,1]&lt;/code&gt; after shifting all its 0&amp;rsquo;s to the end, is &lt;code&gt;[1,2,1,0,0,0]&lt;/code&gt;.
Return &lt;em&gt;the resulting array&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt; that the operations are applied &lt;strong&gt;sequentially&lt;/strong&gt;, not all at once.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 1323. Maximum 69 Number</title><link>https://intervalrain.github.io/leetcode/1323/</link><pubDate>Mon, 07 Nov 2022 23:55:31 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1323/</guid><description>&lt;p&gt;&lt;strong&gt;1323. Maximum 69 Number&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;Greedy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given a positive integer &lt;code&gt;num&lt;/code&gt; consisting only of digits &lt;code&gt;6&lt;/code&gt; and &lt;code&gt;9&lt;/code&gt;.&lt;br&gt;
Return &lt;em&gt;the maximum number you can get by changing&lt;/em&gt; &lt;em&gt;&lt;strong&gt;at most&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;one digit (&lt;code&gt;6&lt;/code&gt; becomes &lt;code&gt;9&lt;/code&gt;, and &lt;code&gt;9&lt;/code&gt; becomes &lt;code&gt;6&lt;/code&gt;).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; num = 9669&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 9969&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;br&gt;
Changing the first digit results in 6669.&lt;br&gt;
Changing the second digit results in 9969.&lt;br&gt;
Changing the third digit results in 9699.&lt;br&gt;
Changing the fourth digit results in 9666.&lt;br&gt;
The maximum number is 9969.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[ML] 機器學習與統計學</title><link>https://intervalrain.github.io/ml/lec1/</link><pubDate>Mon, 07 Nov 2022 18:18:52 +0800</pubDate><guid>https://intervalrain.github.io/ml/lec1/</guid><description>Introduction to Machine Learning</description></item><item><title>[LeetCode] 79. Word Search</title><link>https://intervalrain.github.io/leetcode/79/</link><pubDate>Sat, 05 Nov 2022 21:12:17 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/79/</guid><description>&lt;p&gt;&lt;strong&gt;79. Word Search&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Backtracking&lt;/code&gt;、&lt;code&gt;Matrix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an &lt;code&gt;m x n&lt;/code&gt; grid of characters &lt;code&gt;board&lt;/code&gt; and a string &lt;code&gt;word&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt; &lt;em&gt;if&lt;/em&gt; &lt;code&gt;word&lt;/code&gt; &lt;em&gt;exists in the grid&lt;/em&gt;.&lt;br&gt;
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; board = [[&amp;ldquo;A&amp;rdquo;,&amp;ldquo;B&amp;rdquo;,&amp;ldquo;C&amp;rdquo;,&amp;ldquo;E&amp;rdquo;],[&amp;ldquo;S&amp;rdquo;,&amp;ldquo;F&amp;rdquo;,&amp;ldquo;C&amp;rdquo;,&amp;ldquo;S&amp;rdquo;],[&amp;ldquo;A&amp;rdquo;,&amp;ldquo;D&amp;rdquo;,&amp;ldquo;E&amp;rdquo;,&amp;ldquo;E&amp;rdquo;]], word = &amp;ldquo;ABCCED&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 212. Word Search II</title><link>https://intervalrain.github.io/leetcode/212/</link><pubDate>Sat, 05 Nov 2022 20:58:11 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/212/</guid><description>&lt;p&gt;&lt;strong&gt;212. Word Search II&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Backtracking&lt;/code&gt;、&lt;code&gt;Trie&lt;/code&gt;、&lt;code&gt;Matrix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an &lt;code&gt;m x n&lt;/code&gt; &lt;code&gt;board&lt;/code&gt; of characters and a list of strings &lt;code&gt;words&lt;/code&gt;, return &lt;em&gt;all words on the board&lt;/em&gt;.&lt;br&gt;
Each word must be constructed from letters of sequentially adjacent cells, where &lt;strong&gt;adjacent cells&lt;/strong&gt; are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; board = [[&amp;ldquo;o&amp;rdquo;,&amp;ldquo;a&amp;rdquo;,&amp;ldquo;a&amp;rdquo;,&amp;ldquo;n&amp;rdquo;],[&amp;ldquo;e&amp;rdquo;,&amp;ldquo;t&amp;rdquo;,&amp;ldquo;a&amp;rdquo;,&amp;ldquo;e&amp;rdquo;],[&amp;ldquo;i&amp;rdquo;,&amp;ldquo;h&amp;rdquo;,&amp;ldquo;k&amp;rdquo;,&amp;ldquo;r&amp;rdquo;],[&amp;ldquo;i&amp;rdquo;,&amp;ldquo;f&amp;rdquo;,&amp;ldquo;l&amp;rdquo;,&amp;ldquo;v&amp;rdquo;]], words = [&amp;ldquo;oath&amp;rdquo;,&amp;ldquo;pea&amp;rdquo;,&amp;ldquo;eat&amp;rdquo;,&amp;ldquo;rain&amp;rdquo;]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [&amp;ldquo;eat&amp;rdquo;,&amp;ldquo;oath&amp;rdquo;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2131. Longest Palindrome by Concatenating Two Letter Words</title><link>https://intervalrain.github.io/leetcode/2131/</link><pubDate>Thu, 03 Nov 2022 23:10:10 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2131/</guid><description>&lt;p&gt;&lt;strong&gt;2131. Longest Palindrome by Concatenating Two Letter Words&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Greedy&lt;/code&gt;、&lt;code&gt;Counting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an array of strings &lt;code&gt;words&lt;/code&gt;. Each element of &lt;code&gt;words&lt;/code&gt; consists of &lt;strong&gt;two&lt;/strong&gt; lowercase English letters.&lt;br&gt;
Create the &lt;strong&gt;longest possible palindrome&lt;/strong&gt; by selecting some elements from &lt;code&gt;words&lt;/code&gt; and concatenating them in &lt;strong&gt;any order&lt;/strong&gt;. Each element can be selected &lt;strong&gt;at most once&lt;/strong&gt;.&lt;br&gt;
&lt;em&gt;Return the&lt;/em&gt; &lt;em&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;of the longest palindrome that you can create&lt;/em&gt;. If it is impossible to create any palindrome, return &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 433. Minimum Genetic Mutation</title><link>https://intervalrain.github.io/leetcode/433/</link><pubDate>Wed, 02 Nov 2022 23:36:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/433/</guid><description>&lt;p&gt;&lt;strong&gt;433. Minimum Genetic Mutation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Breadth-First Search&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;A gene string can be represented by an 8-character long string, with choices from &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, and &lt;code&gt;T&lt;/code&gt;.&lt;br&gt;
Suppose we need to investigate a mutation from a gene string &lt;code&gt;start&lt;/code&gt; to a gene string &lt;code&gt;end&lt;/code&gt; where one mutation is defined as one single character changed in the gene string.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example, &lt;code&gt;&amp;quot;AACCGGTT&amp;quot; --&amp;gt; &amp;quot;AACCGGTA&amp;quot;&lt;/code&gt; is one mutation.&lt;br&gt;
There is also a gene bank &lt;code&gt;bank&lt;/code&gt; that records all the valid gene mutations. A gene must be in &lt;code&gt;bank&lt;/code&gt; to make it a valid gene string.&lt;br&gt;
Given the two gene strings &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; and the gene bank &lt;code&gt;bank&lt;/code&gt;, return the &lt;em&gt;minimum number of mutations needed to mutate from&lt;/em&gt; &lt;code&gt;start&lt;/code&gt; &lt;em&gt;to&lt;/em&gt; &lt;code&gt;end&lt;/code&gt;. If there is no such a mutation, return &lt;code&gt;-1&lt;/code&gt;.&lt;br&gt;
Note that the starting point is assumed to be valid, so it might not be included in the bank.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 1610. Maximum Number of Visible Points</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1610/</link><pubDate>Wed, 02 Nov 2022 04:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1610/</guid><description>&lt;ul&gt;
&lt;li&gt;這一題的兩個關鍵點是
&lt;ol&gt;
&lt;li&gt;轉成角度，使用 &lt;code&gt;atan2(dy, dx)&lt;/code&gt; 這個函式，並將 rad 轉成 degree。&lt;/li&gt;
&lt;li&gt;要考慮座標 0 == 360，頭尾要相接。我的做法是將負數 +360 重覆放一遍。(或是只需要放小於 -180 + angle)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;剩下的就是 sliding window 了。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; visiblePoints(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; points, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; angle, vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; location) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;double&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; angles;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; on &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;auto&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; p : points) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; dy &lt;span style="color:#f92672"&gt;=&lt;/span&gt; p[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; location[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; dx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; p[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; location[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (dx &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; dy &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; on&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;double&lt;/span&gt; ang &lt;span style="color:#f92672"&gt;=&lt;/span&gt; atan2(dy, dx) &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;180&lt;/span&gt; &lt;span style="color:#f92672"&gt;/&lt;/span&gt; std&lt;span style="color:#f92672"&gt;::&lt;/span&gt;numbers&lt;span style="color:#f92672"&gt;::&lt;/span&gt;pi;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (ang &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;180&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; angle) angles.push_back(ang &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;360&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; angles.push_back(ang);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sort(angles.begin(), angles.end());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; angles.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;double&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; angles[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;-&lt;/span&gt; angles[left] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; angle) left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right &lt;span style="color:#f92672"&gt;-&lt;/span&gt; left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res &lt;span style="color:#f92672"&gt;+&lt;/span&gt; on;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2009. Minimum Number of Operations to Make Array Continuous</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2009/</link><pubDate>Wed, 02 Nov 2022 03:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2009/</guid><description>&lt;ul&gt;
&lt;li&gt;這一題排序過後就變成簡單的不定長 sliding window 了，但要注意處理 duplicated number&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; minOperations(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sort(nums.begin(), nums.end());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size(), res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; nums[right] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; nums[right &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (nums[right] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; nums[left] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (left &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; nums[left] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; nums[left &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, curr);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; curr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2106. Maximum Fruits Harvested After at Most K Steps</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2106/</link><pubDate>Wed, 02 Nov 2022 03:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2106/</guid><description>&lt;ul&gt;
&lt;li&gt;這一題困難的部分在於計算 windows size&lt;/li&gt;
&lt;li&gt;我的作法是根據 &lt;code&gt;startPos + i&lt;/code&gt; 來計算左指針，左指針位置會在 &lt;code&gt;startPos - max(k - 2*i, (k - i) / 2)&lt;/code&gt;，也就是算出左邊來回或是右邊來回兩種情況下， windowSize 最大的可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxTotalFruits(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; fruits, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; startPos, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sort(fruits.begin(), fruits.end());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; fruits.size() &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; fruits[j][&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k) j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; u &lt;span style="color:#f92672"&gt;=&lt;/span&gt; j;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; fruits.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (fruits[j][&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; i) curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; fruits[j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;][&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (j &lt;span style="color:#f92672"&gt;==&lt;/span&gt; fruits.size()) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; curr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; curr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; k &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; fruits.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;+&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; pos &lt;span style="color:#f92672"&gt;=&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;-&lt;/span&gt; max(k &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;i, (k &lt;span style="color:#f92672"&gt;-&lt;/span&gt; i)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (fruits[j][&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; right) curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; fruits[j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;][&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (left &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; pos) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (fruits[u][&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) curr &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; fruits[u&lt;span style="color:#f92672"&gt;++&lt;/span&gt;][&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, curr);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2555. Maximize Win From Two Segments</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2555/</link><pubDate>Wed, 02 Nov 2022 03:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2555/</guid><description>&lt;ul&gt;
&lt;li&gt;這一題的關鍵在於追縱離開 window 時的數字，可以滿足的最大值，所以可以用 dp + sliding window 來解這一題。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maximizeWin(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size(), left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; dp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; missed &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; nums[right] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (nums[right] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; nums[left] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (nums[right] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; nums[left] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; missed &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(missed, dp[nums[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;]]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dp[nums[right]] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; right &lt;span style="color:#f92672"&gt;-&lt;/span&gt; left &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right &lt;span style="color:#f92672"&gt;-&lt;/span&gt; left &lt;span style="color:#f92672"&gt;+&lt;/span&gt; missed);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2271. Maximum White Tiles Covered by a Carpet</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2271/</link><pubDate>Wed, 02 Nov 2022 02:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2271/</guid><description>&lt;ul&gt;
&lt;li&gt;這一題困難的部分在於計算 windows size&lt;/li&gt;
&lt;li&gt;我的作法是根據 &lt;code&gt;startPos + i&lt;/code&gt; 來計算左指針，左指針位置會在 &lt;code&gt;startPos - max(k - 2*i, (k - i) / 2)&lt;/code&gt;，也就是算出左邊來回或是右邊來回兩種情況下， windowSize 最大的可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxTotalFruits(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; fruits, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; startPos, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sort(fruits.begin(), fruits.end());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; fruits.size() &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; fruits[j][&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k) j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; u &lt;span style="color:#f92672"&gt;=&lt;/span&gt; j;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; fruits.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (fruits[j][&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; i) curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; fruits[j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;][&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (j &lt;span style="color:#f92672"&gt;==&lt;/span&gt; fruits.size()) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; curr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; curr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; k &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; fruits.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;+&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; pos &lt;span style="color:#f92672"&gt;=&lt;/span&gt; startPos &lt;span style="color:#f92672"&gt;-&lt;/span&gt; max(k &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;i, (k &lt;span style="color:#f92672"&gt;-&lt;/span&gt; i)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (fruits[j][&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; right) curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; fruits[j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;][&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (left &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; pos) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (fruits[u][&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) curr &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; fruits[u&lt;span style="color:#f92672"&gt;++&lt;/span&gt;][&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, curr);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2831. Find the Longest Equal Subarray</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2831/</link><pubDate>Wed, 02 Nov 2022 01:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2831/</guid><description>&lt;ul&gt;
&lt;li&gt;這一題是求 maxcnt 而不是求 window size&lt;/li&gt;
&lt;li&gt;condition 是 &lt;code&gt;window_size - maxcnt &amp;gt; k&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接著套不定長 sliding window。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; longestEqualSubarray(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxcnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; cnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; maxcnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(maxcnt, &lt;span style="color:#f92672"&gt;++&lt;/span&gt;cnt[num]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left&lt;span style="color:#f92672"&gt;-&lt;/span&gt;maxcnt &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; k) cnt[nums[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;]]&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, maxcnt);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2516. Take K of Each Character From Left and Right</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2516/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2516/</guid><description>&lt;ul&gt;
&lt;li&gt;這題同樣是經典的 sliding window，可參考 &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1658"&gt;1658&lt;/a&gt;，同樣是頭尾求最短轉換成求最長 window 的題型。&lt;/li&gt;
&lt;li&gt;接著套不定長 sliding window。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; takeCharacters(string s, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 先檢驗題目本身有沒有可能符合，因為 s 至少要 3 * k 才可能有解
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; need &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (n &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; need) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; cnt[&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; memset(cnt, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(cnt));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;auto&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; c : s) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt[c&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 檢查各字元是否至少有 k 個
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt[i] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt[i] &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 如果都符合，字串長度又剛好等於 need，那必定是整個 string 都需要
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (n &lt;span style="color:#f92672"&gt;==&lt;/span&gt; need) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; n;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 剩下的就是經典的 sliding window，滑起來就是了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr[&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; memset(curr, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(curr));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; c &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr[c&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (curr[c&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; cnt[c&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr[s[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 注意要還原
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1658. Minimum Operations to Reduce X to Zero</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1658/</link><pubDate>Tue, 01 Nov 2022 23:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1658/</guid><description>&lt;ul&gt;
&lt;li&gt;這一是經典的頭尾相連問題，可以透過透過以下手法換轉成簡單的 sliding window
&lt;ul&gt;
&lt;li&gt;find &lt;code&gt;head + tail = x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;let &lt;code&gt;head + body + tail == total&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the problem becomes FIND &lt;code&gt;body = total - x&lt;/code&gt;，問題從求最短頭+尾 變成 最長 window&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;套不定長 sliding window。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; minOperations(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; total &lt;span style="color:#f92672"&gt;=&lt;/span&gt; accumulate(nums.begin(), nums.end(), &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; target &lt;span style="color:#f92672"&gt;=&lt;/span&gt; total &lt;span style="color:#f92672"&gt;-&lt;/span&gt; x;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (target &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 注意要處理 boundary condition
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; target &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; left &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; right) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; nums[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;==&lt;/span&gt; target) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; res; &lt;span style="color:#75715e"&gt;// 最後要將長度轉回來
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1838. Frequency of the Most Frequent Element</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1838/</link><pubDate>Tue, 01 Nov 2022 23:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1838/</guid><description>&lt;ul&gt;
&lt;li&gt;這題同樣是經典的 sliding window，經排序過後，我們可以透過 &lt;code&gt;len * max_element_in_window - accumulate_in_window&lt;/code&gt; 的方式來求 token need，&lt;/li&gt;
&lt;li&gt;接著套不定長 sliding window。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxFrequency(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sort(nums.begin(), nums.end());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; ((&lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt;)(right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left) &lt;span style="color:#f92672"&gt;*&lt;/span&gt; num &lt;span style="color:#f92672"&gt;-&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; nums[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1004. Max Consecutive Ones III</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1004/</link><pubDate>Tue, 01 Nov 2022 22:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1004/</guid><description>&lt;ul&gt;
&lt;li&gt;簡單的不定長 sliding window 問題。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; longestOnes(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; cnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (cnt &lt;span style="color:#f92672"&gt;==&lt;/span&gt; k &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; num &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (nums[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) cnt&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (num &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) cnt&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2024. Maximize the Confusion of an Exam</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2024/</link><pubDate>Tue, 01 Nov 2022 21:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2024/</guid><description>&lt;ul&gt;
&lt;li&gt;簡單的不定長 sliding window 問題, 正反各做一遍即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxConsecutiveAnswersWith(string keys, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k, &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; keys.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; cnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; key &lt;span style="color:#f92672"&gt;=&lt;/span&gt; keys[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (key &lt;span style="color:#f92672"&gt;==&lt;/span&gt; c &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cnt &lt;span style="color:#f92672"&gt;==&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (keys[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (key &lt;span style="color:#f92672"&gt;==&lt;/span&gt; c) cnt&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxConsecutiveAnswers(string answerKey, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;max&lt;/span&gt;(maxConsecutiveAnswersWith(answerKey, k, &lt;span style="color:#e6db74"&gt;&amp;#39;T&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; maxConsecutiveAnswersWith(answerKey, k, &lt;span style="color:#e6db74"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 20. Valid Parentheses</title><link>https://intervalrain.github.io/leetcode/20/</link><pubDate>Tue, 01 Nov 2022 20:51:49 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/20/</guid><description>&lt;p&gt;&lt;strong&gt;20. Valid Parentheses&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Stack&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given a string &lt;code&gt;s&lt;/code&gt; containing just the characters &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;, determine if the input string is valid.&lt;br&gt;
An input string is valid if:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open brackets must be closed by the same type of brackets.&lt;/li&gt;
&lt;li&gt;Open brackets must be closed in the correct order.&lt;/li&gt;
&lt;li&gt;Every close bracket has a corresponding open bracket of the same type.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2779. Maximum Beauty of an Array After Applying Operation</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2779/</link><pubDate>Tue, 01 Nov 2022 20:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2779/</guid><description>&lt;ul&gt;
&lt;li&gt;將陣列經過排序後，就變成一個簡單的 sliding window 問題&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maximumBeauty(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sort(nums.begin(), nums.end());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (num &lt;span style="color:#f92672"&gt;-&lt;/span&gt; nums[left] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; k) left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right &lt;span style="color:#f92672"&gt;-&lt;/span&gt; left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2958. Length of Longest Subarray With at Most K Frequency</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2958/</link><pubDate>Tue, 01 Nov 2022 20:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2958/</guid><description>&lt;ul&gt;
&lt;li&gt;套不定長的 Sliding Window pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IWindow&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; add(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;IWindow() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Window&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IWindow {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; _t;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Window(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; threshold)&lt;span style="color:#f92672"&gt;:&lt;/span&gt; _t(threshold) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _map[num]&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _map[num]&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; _map[num] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; _t;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;IWindow&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _w;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxSubarrayLength(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w &lt;span style="color:#f92672"&gt;=&lt;/span&gt; make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Window&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;(k);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;check(num)) _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;erase(nums[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不囉嗦版&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; cnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxSubarrayLength(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size(), left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (cnt[num] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt[nums[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;]]&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt[num]&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right &lt;span style="color:#f92672"&gt;-&lt;/span&gt; left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1706. Where Will the Ball Fall</title><link>https://intervalrain.github.io/leetcode/1706/</link><pubDate>Tue, 01 Nov 2022 19:02:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1706/</guid><description>&lt;p&gt;&lt;strong&gt;1706. Where Will the Ball Fall&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Depth-First Search&lt;/code&gt;、&lt;code&gt;Matrix&lt;/code&gt;、&lt;code&gt;Simulation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You have a 2-D &lt;code&gt;grid&lt;/code&gt; of size &lt;code&gt;m x n&lt;/code&gt; representing a box, and you have &lt;code&gt;n&lt;/code&gt; balls. The box is open on the top and bottom sides.&lt;br&gt;
Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as &lt;code&gt;-1&lt;/code&gt;.&lt;br&gt;
We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball get stuck if it hits a &amp;ldquo;V&amp;rdquo; shaped pattern between two boards or if a board redirects the ball into either wall of the box.&lt;br&gt;
Return &lt;em&gt;an array&lt;/em&gt; &lt;code&gt;answer&lt;/code&gt; &lt;em&gt;of size&lt;/em&gt; &lt;code&gt;n&lt;/code&gt; &lt;em&gt;where&lt;/em&gt; &lt;code&gt;answer[i]&lt;/code&gt; &lt;em&gt;is the column that the ball falls out of at the bottom after dropping the ball from the&lt;/em&gt; &lt;code&gt;ith&lt;/code&gt; &lt;em&gt;column at the top, or&lt;/em&gt; &lt;code&gt;-1&lt;/code&gt; &lt;em&gt;if the ball gets stuck in the box.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="ball" loading="lazy" src="https://assets.leetcode.com/uploads/2019/09/26/ball.jpg"&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 1695. Maximum Erasure Value</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1695/</link><pubDate>Tue, 01 Nov 2022 19:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1695/</guid><description>&lt;ul&gt;
&lt;li&gt;套不定長的 Sliding Window pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IWindow&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; add(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sum&lt;/span&gt;() &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;IWindow() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Window&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IWindow {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _cnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; add(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _cnt[num]&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _cnt[num]&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; _cnt[num] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sum&lt;/span&gt;() &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; curr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;IWindow&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _w;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Solution()&lt;span style="color:#f92672"&gt;:&lt;/span&gt; _w(make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Window&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;()) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;maximumUniqueSubarray&lt;/span&gt;(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;check(num)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;erase(nums[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;sum());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不囉嗦版&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maximumUniqueSubarray(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (map[num] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; map[num2]&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; num2;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; map[num]&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, curr);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 904. Fruit Into Baskets</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/904/</link><pubDate>Tue, 01 Nov 2022 18:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/904/</guid><description>&lt;ul&gt;
&lt;li&gt;套不定長的 Sliding Window pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IWindow&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; add(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;IWindow() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Window&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IWindow {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; _types;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; _curr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Window(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; types)&lt;span style="color:#f92672"&gt;:&lt;/span&gt; _types(types) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (_map[num]&lt;span style="color:#f92672"&gt;++&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _curr&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;--&lt;/span&gt;_map[num] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _map.erase(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _curr&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;!&lt;/span&gt;_map.count(num) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; _curr &lt;span style="color:#f92672"&gt;==&lt;/span&gt; _types;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;IWindow&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _w;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Solution()&lt;span style="color:#f92672"&gt;:&lt;/span&gt; _w(make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Window&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;)) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;totalFruit&lt;/span&gt;(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; fruits) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; fruits.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; fruits[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;check(num)) _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;erase(fruits[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不囉嗦版&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; totalFruit(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; fruits) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; fruits.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; fruits[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!&lt;/span&gt;map.count(num)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; fruits[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;--&lt;/span&gt;map[num2] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; map.erase(num2);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (map[num]&lt;span style="color:#f92672"&gt;++&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2730. Find the Longest Semi-Repetitive Substring</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2730/</link><pubDate>Tue, 01 Nov 2022 17:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2730/</guid><description>&lt;ul&gt;
&lt;li&gt;先將 s 轉成 prefix 再套不定長的 Sliding Window 套 pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; longestSemiRepetitiveSubstring(string s) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;auto&lt;/span&gt; trans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;](string&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; s) &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; res{&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res.push_back(s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;?&lt;/span&gt; res.back() &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; res.back());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;auto&lt;/span&gt; nums &lt;span style="color:#f92672"&gt;=&lt;/span&gt; trans(s);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (num &lt;span style="color:#f92672"&gt;-&lt;/span&gt; nums[left] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不用先轉直接處理&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; longestSemiRepetitiveSubstring(string s) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;auto&lt;/span&gt; check &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;](&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i) &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (check(right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;)) curr&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (check(&lt;span style="color:#f92672"&gt;++&lt;/span&gt;left)) curr&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;左指針快進版&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; longestSemiRepetitiveSubstring(string s) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;auto&lt;/span&gt; check &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;](&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i) &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; last &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; check(right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (flag) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; last;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; last &lt;span style="color:#f92672"&gt;=&lt;/span&gt; right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1208. Get Equal Substrings Within Budget</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1208/</link><pubDate>Tue, 01 Nov 2022 16:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1208/</guid><description>&lt;ul&gt;
&lt;li&gt;不定長的 Sliding Window 套 pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IWindow&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; add(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;() &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;IWindow() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Window&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IWindow {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; _maxCost;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; _curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Window(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxCost)&lt;span style="color:#f92672"&gt;:&lt;/span&gt; _maxCost(maxCost) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _curr &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;() &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; _curr &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _maxCost;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;IWindow&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _w;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; equalSubstring(string s, string t, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxCost) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;auto&lt;/span&gt; nums &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;](&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i) &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;abs&lt;/span&gt;(s[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; t[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w &lt;span style="color:#f92672"&gt;=&lt;/span&gt; make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Window&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;(maxCost);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size(), left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(nums(right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;check()) _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;erase(nums(left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right &lt;span style="color:#f92672"&gt;-&lt;/span&gt; left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;簡易版&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; equalSubstring(string s, string t, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxCost) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size(), left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; abs(s[right] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; t[right]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; maxCost) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; abs(s[left] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; t[left]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right &lt;span style="color:#f92672"&gt;-&lt;/span&gt; left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1493. Longest Subarray of 1's After Deleting One Element</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1493/</link><pubDate>Tue, 01 Nov 2022 15:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1493/</guid><description>&lt;ul&gt;
&lt;li&gt;不定長的 Sliding Window 套 pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IWindow&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; add(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;IWindow() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Window&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IWindow {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; cnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Window() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (num &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) cnt&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (num &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) cnt&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; num &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cnt &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;IWindow&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _w;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Solution()&lt;span style="color:#f92672"&gt;:&lt;/span&gt; _w(make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Window&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;()) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;longestSubarray&lt;/span&gt;(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size(), left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;check(num)) _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;erase(nums[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;但其實在 check &amp;amp; 移動左指標這一步可以做優化，左指標可以透過記錄一下一個合法的位置來快速移動。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; last &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; longestSubarray(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size(), left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (num &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; last;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; last &lt;span style="color:#f92672"&gt;=&lt;/span&gt; right;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 3. Longest Substring Without Repeating Characters</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/3/</link><pubDate>Tue, 01 Nov 2022 14:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/3/</guid><description>&lt;ul&gt;
&lt;li&gt;不定長的 Sliding Window 的 pattern 如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Window&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; add(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;find&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;Window() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Bucket&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; Window {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;c
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; _bucketSize;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; _valueDiff;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;index&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; num &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; (num &lt;span style="color:#f92672"&gt;-&lt;/span&gt; _valueDiff) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; _bucketSize
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; : num &lt;span style="color:#f92672"&gt;/&lt;/span&gt; _bucketSize;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Bucket(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; valueDiff)&lt;span style="color:#f92672"&gt;:&lt;/span&gt; _valueDiff(valueDiff), _bucketSize(valueDiff &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; index(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _map[idx] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; index(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _map.erase(idx);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;find&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; index(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; _map.count(idx) &lt;span style="color:#f92672"&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (_map.count(idx&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; num &lt;span style="color:#f92672"&gt;-&lt;/span&gt; _map[idx&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; _valueDiff) &lt;span style="color:#f92672"&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (_map.count(idx&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; _map[idx&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; num &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; _valueDiff);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Window&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _w;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; containsNearbyAlmostDuplicate(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; indexDiff, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; valueDiff) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; indexDiff &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w &lt;span style="color:#f92672"&gt;=&lt;/span&gt; make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Bucket&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;(valueDiff);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;find(nums[i])) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(nums[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;erase(nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;find(nums[i])) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(nums[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;沒有抽象化的 code&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; containsNearbyAlmostDuplicate(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; t) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; k&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idxin &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;/&lt;/span&gt; (t&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (nums[i] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) idxin&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idxout &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k] &lt;span style="color:#f92672"&gt;/&lt;/span&gt; (t&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) idxout&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; map.erase(idxout);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (map.count(idxin) &lt;span style="color:#f92672"&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (map.count(idxin&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; map[idxin&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; t) &lt;span style="color:#f92672"&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (map.count(idxin&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; map[idxin&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; t)) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; map[idxin] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 3090. Maximum Length Substring With Two Occurrences</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/3090/</link><pubDate>Tue, 01 Nov 2022 14:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/3090/</guid><description>&lt;ul&gt;
&lt;li&gt;不定長的 Sliding Window 套 pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;IWindow&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; add(&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; c) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; c) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; c) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;IWindow() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Window&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; IWindow{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; cnt[&lt;span style="color:#ae81ff"&gt;26&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Window() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; memset(cnt, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(cnt));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; c) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt[c&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; c) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt[c&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; c) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; cnt[c&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;IWindow&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _w;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Solution()&lt;span style="color:#f92672"&gt;:&lt;/span&gt; _w(make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Window&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;()) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;maximumLengthSubstring&lt;/span&gt;(string s) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size(), left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; c &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;check(c)) _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;erase(s[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(c);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 不定長 Sliding Window Pattern</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/pattern_2/</link><pubDate>Tue, 01 Nov 2022 14:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/pattern_2/</guid><description>&lt;ul&gt;
&lt;li&gt;不定長度的 sliding window pattern&lt;/li&gt;
&lt;li&gt;步驟 &lt;br&gt;
move sliding window&lt;br&gt;
(1) 滑動左指標直到 window 有效
(2) 加入右指標
(3) 更新&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Window&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; add(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;Window() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Window&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _w;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Solution()&lt;span style="color:#f92672"&gt;:&lt;/span&gt; _w() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;solve&lt;/span&gt;(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w &lt;span style="color:#f92672"&gt;=&lt;/span&gt; make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;WindowImpl&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;(k);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size(), left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (right &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[right&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;check(num)) _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;erase(nums[left&lt;span style="color:#f92672"&gt;++&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, right&lt;span style="color:#f92672"&gt;-&lt;/span&gt;left);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; len;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 220. Contains Duplicate III</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/220/</link><pubDate>Tue, 01 Nov 2022 13:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/220/</guid><description>&lt;ul&gt;
&lt;li&gt;這是一題是很有趣的一題，會用到 bucket sort 結合 sliding window，時間複雜度是 \(O(n)\)&lt;/li&gt;
&lt;li&gt;我把 sliding window 的部分拆分開來，讓邏輯更清楚。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Window&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; add(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;find&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;Window() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Bucket&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; Window {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;c
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; _bucketSize;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; _valueDiff;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;index&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; num &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; (num &lt;span style="color:#f92672"&gt;-&lt;/span&gt; _valueDiff) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; _bucketSize
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; : num &lt;span style="color:#f92672"&gt;/&lt;/span&gt; _bucketSize;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Bucket(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; valueDiff)&lt;span style="color:#f92672"&gt;:&lt;/span&gt; _valueDiff(valueDiff), _bucketSize(valueDiff &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; index(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _map[idx] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; index(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _map.erase(idx);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;find&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; index(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; _map.count(idx) &lt;span style="color:#f92672"&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (_map.count(idx&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; num &lt;span style="color:#f92672"&gt;-&lt;/span&gt; _map[idx&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; _valueDiff) &lt;span style="color:#f92672"&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (_map.count(idx&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; _map[idx&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; num &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; _valueDiff);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Window&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _w;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; containsNearbyAlmostDuplicate(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; indexDiff, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; valueDiff) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; indexDiff &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w &lt;span style="color:#f92672"&gt;=&lt;/span&gt; make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Bucket&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;(valueDiff);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;find(nums[i])) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(nums[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;erase(nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;find(nums[i])) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(nums[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;沒有抽象化的 code&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; containsNearbyAlmostDuplicate(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; t) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; k&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idxin &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;/&lt;/span&gt; (t&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (nums[i] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) idxin&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idxout &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k] &lt;span style="color:#f92672"&gt;/&lt;/span&gt; (t&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) idxout&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; map.erase(idxout);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (map.count(idxin) &lt;span style="color:#f92672"&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (map.count(idxin&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; map[idxin&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; t) &lt;span style="color:#f92672"&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (map.count(idxin&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; map[idxin&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; t)) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; map[idxin] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1984. Minimum Difference Between Highest and Lowest of K Scores</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1984/</link><pubDate>Tue, 01 Nov 2022 12:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1984/</guid><description>&lt;ul&gt;
&lt;li&gt;這是一題簡單的定長度 sliding window。先排序再用滑動窗口求值。時間複雜度是 \(O(n\log(n))\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; minimumDifference(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sort(nums.begin(), nums.end());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; INT_MAX;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; nums.size() &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; min(res, nums[i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; nums[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2269. Find the K-Beauty of a Number</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2269/</link><pubDate>Tue, 01 Nov 2022 12:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2269/</guid><description>&lt;ul&gt;
&lt;li&gt;這是一題簡單的定長度 sliding window。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; divisorSubstrings(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; to_string(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; s.size()&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; div &lt;span style="color:#f92672"&gt;=&lt;/span&gt; stoi(s.substr(i, k));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (div &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; num &lt;span style="color:#f92672"&gt;%&lt;/span&gt; div &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) res&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;用原本的 pattern 來做，但要注意 1e9 * 10 會爆掉，整數的範圍大概只有 2e9 (2147483647)。可改用先減再 shift 的方式處理。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; divisorSubstrings(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; to_string(num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; pk &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pow(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; (s[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; num &lt;span style="color:#f92672"&gt;%&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) res&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; s.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;-&lt;/span&gt; (s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;*&lt;/span&gt; pk) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; (s[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; num &lt;span style="color:#f92672"&gt;%&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) res&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 766. Toeplitz Matrix</title><link>https://intervalrain.github.io/leetcode/766/</link><pubDate>Tue, 01 Nov 2022 00:40:55 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/766/</guid><description>&lt;p&gt;&lt;strong&gt;766. Toeplitz Matrix&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Matrix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an &lt;code&gt;m x n&lt;/code&gt; &lt;code&gt;matrix&lt;/code&gt;, return &lt;em&gt;&lt;code&gt;true&lt;/code&gt; if the matrix is Toeplitz. Otherwise, return &lt;code&gt;false&lt;/code&gt;&lt;/em&gt;. A matrix is &lt;strong&gt;Toeplitz&lt;/strong&gt; if every diagonal from top-left to bottom-right has the same elements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="ex1" loading="lazy" src="https://assets.leetcode.com/uploads/2020/11/04/ex1.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;br&gt;
In the above grid, the diagonals are:&lt;br&gt;
&amp;ldquo;[9]&amp;rdquo;, &amp;ldquo;[5, 5]&amp;rdquo;, &amp;ldquo;[1, 1, 1]&amp;rdquo;, &amp;ldquo;[2, 2, 2]&amp;rdquo;, &amp;ldquo;[3, 3]&amp;rdquo;, &amp;ldquo;[4]&amp;rdquo;.&lt;br&gt;
In each diagonal all elements are the same, so the answer is True.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;
&lt;img alt="ex2" loading="lazy" src="https://assets.leetcode.com/uploads/2020/11/04/ex2.jpg"&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 1016. Binary String With Substrings Representing 1 To N</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1016/</link><pubDate>Mon, 31 Oct 2022 12:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1016/</guid><description>&lt;ul&gt;
&lt;li&gt;這一題是滿有趣的一題，我的靈感來自於 zkw 的線段樹(但沒有用到線段樹)。&lt;/li&gt;
&lt;li&gt;觀察 &lt;code&gt;1 ~ n&lt;/code&gt; 的樹，並將它排成 zkw 的線段樹，可以發現以下規則：
&lt;ul&gt;
&lt;li&gt;滿足樹的子葉，則必定可以滿足其父節點，例如：找到 &lt;code&gt;&amp;quot;1010&amp;quot;&lt;/code&gt;，則可以滿足 &lt;code&gt;&amp;quot;101&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;quot;10&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;quot;1&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;所以可以得到一個數學結論是：我們只需要找到 &lt;code&gt;n ~ n/2+1&lt;/code&gt; 的數即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;] &lt;span style="color:#ae81ff"&gt;11&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;101&lt;/span&gt;] &lt;span style="color:#ae81ff"&gt;110&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;111&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1001&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;1010&lt;/span&gt;] &lt;span style="color:#ae81ff"&gt;1011&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1100&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1101&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1110&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1111&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;) num mask
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;^&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;solution:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; queryString(string s, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (n &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1979&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false; &lt;span style="color:#75715e"&gt;// 剪枝：當 n 太大時必為 false, 證明在下面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt; __builtin_clz(n); &lt;span style="color:#75715e"&gt;// n 的位元長度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (s.size() &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false; &lt;span style="color:#75715e"&gt;// s 長度連 window 都不夠時 return false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; mask &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; len) &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 遮罩 用來控制 window 長度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; unordered_set&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; seen; &lt;span style="color:#75715e"&gt;// 用來記錄數字是否出現過
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; valid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; n&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 總共需要收集到的數目
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// init
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((curr &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;|&lt;/span&gt; (s[i] &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; n &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; n&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;) seen.insert(curr);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (seen.size() &lt;span style="color:#f92672"&gt;==&lt;/span&gt; valid) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// rolling
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; s.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((curr &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;|&lt;/span&gt; (s[i] &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; mask;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; n &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; n&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;) seen.insert(curr);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (seen.size() &lt;span style="color:#f92672"&gt;==&lt;/span&gt; valid) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;剪枝的證明：
我來說明 1979 這個臨界值的計算過程：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當字串長度 = 1000 時，我們需要找到滿足以下條件的最大 n：&lt;/p&gt;</description></item><item><title>[LeetCode] 19. Remove Nth Node From End of List</title><link>https://intervalrain.github.io/leetcode/19/</link><pubDate>Mon, 31 Oct 2022 00:05:10 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/19/</guid><description>&lt;p&gt;&lt;strong&gt;19. Remove Nth Node From End of List&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Linked List&lt;/code&gt;、&lt;code&gt;Two Pointers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given the &lt;code&gt;head&lt;/code&gt; of a linked list, remove the &lt;code&gt;nth&lt;/code&gt; node from the end of the list and return its head.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="remove_ex1" loading="lazy" src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; head = [1,2,3,4,5], n = 2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [1,2,3,5]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; head = [1], n = 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; []&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; head = [1,2], n = 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [1]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 1293. Shortest Path in a Grid with Obstacles Elimination</title><link>https://intervalrain.github.io/leetcode/1293/</link><pubDate>Sun, 30 Oct 2022 21:29:37 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1293/</guid><description>&lt;p&gt;&lt;strong&gt;1293. Shortest Path in a Grid with Obstacles Elimination&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Breadth-First Search&lt;/code&gt;、&lt;code&gt;Matrix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an &lt;code&gt;m x n&lt;/code&gt; integer matrix &lt;code&gt;grid&lt;/code&gt; where each cell is either &lt;code&gt;0&lt;/code&gt; (empty) or &lt;code&gt;1&lt;/code&gt; (obstacles). You can move up, down, left, or right from and to an empty cell in &lt;strong&gt;one step&lt;/strong&gt;.&lt;br&gt;
Return &lt;em&gt;the minimum number of&lt;/em&gt; &lt;em&gt;&lt;strong&gt;steps&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;to walk from the upper left corner&lt;/em&gt; &lt;code&gt;(0, 0)&lt;/code&gt; &lt;em&gt;to the lower right conrer&lt;/em&gt; &lt;code&gt;m-1, n-1&lt;/code&gt; &lt;em&gt;given that you can eliminate&lt;/em&gt; &lt;em&gt;&lt;strong&gt;at most&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;k&lt;/code&gt; &lt;em&gt;obstacles&lt;/em&gt;. If it is not possible to find such walk return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 2953. Count Complete Substrings</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2953/</link><pubDate>Sun, 30 Oct 2022 12:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2953/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 2449&lt;/li&gt;
&lt;li&gt;這題是一個定長的 sliding window，比較難想的是 window size 是 k * 1, k * 2, &amp;hellip; 到 k * 26，因為只有 26 個英文字母，所以最多只可能到 26 * k 的長度。&lt;/li&gt;
&lt;li&gt;額外需要檢查相鄰的字母是否距離 &amp;lt;= 2，我使用的方法是找到一個 &lt;code&gt;j&lt;/code&gt; 記錄最大的不符合的索引值，所以直要 window 不包含該 &lt;code&gt;j&lt;/code&gt;，window 內的所字元都會滿足。&lt;/li&gt;
&lt;li&gt;所以 pesudo code 會是
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; c &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; c &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;26&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// window size
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; windowSize &lt;span style="color:#f92672"&gt;=&lt;/span&gt; c &lt;span style="color:#f92672"&gt;*&lt;/span&gt; k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// construct window
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; windowSize; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 處理 j
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 計算進入 window
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 確認初始的 window 是否滿足
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// rolling windo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; windowSize; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 處理 j
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 計算進入 window
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 計算離開 window
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 確認 window 是否滿足
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; countCompleteSubstrings(string s, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; idx &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;26&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;*&lt;/span&gt; k &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; n; idx&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;*&lt;/span&gt; k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; cnt(&lt;span style="color:#ae81ff"&gt;26&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; valid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; abs(s[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;++&lt;/span&gt;cnt[s[i]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; k) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (valid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (abs(s[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;++&lt;/span&gt;cnt[s[i]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; k) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt[s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;len]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;--&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; k) valid&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (valid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;len &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; j) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2136. Earliest Possible Day of Full Bloom</title><link>https://intervalrain.github.io/leetcode/2136/</link><pubDate>Sun, 30 Oct 2022 00:25:25 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2136/</guid><description>&lt;p&gt;&lt;strong&gt;2136. Earliest Possible Day of Full Bloom&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Greedy&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You have &lt;code&gt;n&lt;/code&gt; flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed take time and so does the growth of a seed. You are given two &lt;strong&gt;0-indexed&lt;/strong&gt; integer arrays &lt;code&gt;plantTime&lt;/code&gt; and &lt;code&gt;growTime&lt;/code&gt;, of length &lt;code&gt;n&lt;/code&gt; each:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plantTime[i]&lt;/code&gt; is the number of &lt;strong&gt;full days&lt;/strong&gt; it takes you to &lt;strong&gt;plant&lt;/strong&gt; the &lt;code&gt;ith&lt;/code&gt; seed. Every day, you can work on planting exactly one seed. You &lt;strong&gt;do not&lt;/strong&gt; have to work on planting the same seed on consecutive days, but the planting of a seed is not complete &lt;strong&gt;until&lt;/strong&gt; you have worked &lt;code&gt;plantTime[i]&lt;/code&gt; days on planting it in total.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;growTime[i]&lt;/code&gt; is the number of &lt;strong&gt;full days&lt;/strong&gt; it takes the &lt;code&gt;ith&lt;/code&gt; seed to grow after being completely planted. &lt;strong&gt;After&lt;/strong&gt; the last day of its growth, the flower &lt;strong&gt;blooms&lt;/strong&gt; and stays bloomed forever.
From the beginning of day &lt;code&gt;0&lt;/code&gt;, you can plant the seeds in &lt;strong&gt;any&lt;/strong&gt; order.&lt;br&gt;
Return &lt;em&gt;the&lt;/em&gt; &lt;em&gt;&lt;strong&gt;earliest&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;possible day where&lt;/em&gt; &lt;em&gt;&lt;strong&gt;all&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;seeds are blooming&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="growplant1" loading="lazy" src="https://assets.leetcode.com/uploads/2021/12/21/1.png"&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2156. Find Substring With Given Hash Value</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2156/</link><pubDate>Sat, 29 Oct 2022 12:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2156/</guid><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;難度分: 2063&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這題是 rolling hash，同樣樣到 sliding window 的概念，由左至右需要處理除法問題，會使問題的難度增加，所以這題逆其道而行，從右至左，那就可以把除法問題變成乘法問題了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在處理商數時，要小心處理負數，由於商數 d 必定介於 0~k之間，可以利用
$$
\boxed{\mod(\mod(a)-\mod(b)+k)}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;證明：
$$
\boxed{
\begin{array}{ll}
0\le\mod(a)&amp;lt;k \\
0\le\mod(b)&amp;lt;k \\
-k&amp;lt;\mod(a)-\mod(b)&amp;lt;k &amp;amp; 在取 \mod 前先整理成正數\\
0&amp;lt;\mod(a)-\mod(b)+k&amp;lt; 2k \\
0&amp;lt;\mod(\mod(a)-\mod(b)+k) &amp;lt; k
\end{array}
}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;令 &lt;code&gt;str = dcba&lt;/code&gt;，&lt;code&gt;k = 3&lt;/code&gt;，已知 &lt;code&gt;curr = mod(ap^2+bp+c, m)&lt;/code&gt; 求 &lt;code&gt;mod(bp^2+cp+d, m)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(\mod(bp^2+cp+d)\)&lt;/li&gt;
&lt;li&gt;\(\quad = \mod((ap^2+bp+c)\times p +d-ax^3)\)&lt;/li&gt;
&lt;li&gt;\(\quad = \mod(\mod(ap^2+bp+c)\times p +d+m-\mod(ax^3))\)&lt;/li&gt;
&lt;li&gt;\(\quad = \mod(\text{curr}\times p +d+m-\mod(ax^3))\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string subStrHash(string s, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; p, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; mod, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; val) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; pk &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;*&lt;/span&gt; p &lt;span style="color:#f92672"&gt;+&lt;/span&gt; (s[n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;i]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; mod;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pk &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (pk &lt;span style="color:#f92672"&gt;*&lt;/span&gt; p) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; mod;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;*&lt;/span&gt; p &lt;span style="color:#f92672"&gt;+&lt;/span&gt; (s[n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;i]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; mod &lt;span style="color:#f92672"&gt;-&lt;/span&gt; ((s[n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;k]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;*&lt;/span&gt; pk) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; mod) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; mod;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (curr &lt;span style="color:#f92672"&gt;==&lt;/span&gt; val) j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;i;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; s.substr(j, k);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 18. 4Sum</title><link>https://intervalrain.github.io/leetcode/18/</link><pubDate>Fri, 28 Oct 2022 23:58:48 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/18/</guid><description>&lt;p&gt;&lt;strong&gt;18. 4Sum&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Two Pointer&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of &lt;code&gt;n&lt;/code&gt; integers, return &lt;em&gt;an array of all the&lt;/em&gt; &lt;em&gt;&lt;strong&gt;unique&lt;/strong&gt;&lt;/em&gt; quadruplets &lt;code&gt;[nums[a], nums[b], nums[c], nums[d]]&lt;/code&gt; such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= a, b, c, d &amp;lt; n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; are &lt;strong&gt;distinct&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums[a] + nums[b] + nums[c] + nums[d] == target&lt;/code&gt;
You may return the answer in &lt;strong&gt;any order&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [1,0,-1,0,-2,2], target = 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 17. Letter Combinations of a Phone Number</title><link>https://intervalrain.github.io/leetcode/17/</link><pubDate>Fri, 28 Oct 2022 22:59:22 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/17/</guid><description>&lt;p&gt;&lt;strong&gt;17. Letter Combinations of a Phone Number&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Hash Table&lt;/code&gt;,&lt;code&gt;String&lt;/code&gt;,&lt;code&gt;Backtracking&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given a string containing digits from &lt;code&gt;2-9&lt;/code&gt; inclusive, return all possible letter combinations that the number could represent. Return the answer in &lt;strong&gt;any order&lt;/strong&gt;&lt;br&gt;
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.&lt;br&gt;
&lt;img alt="1200px-telephone-keypad2svg" loading="lazy" src="https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; digits = &amp;ldquo;23&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [&amp;ldquo;ad&amp;rdquo;,&amp;ldquo;ae&amp;rdquo;,&amp;ldquo;af&amp;rdquo;,&amp;ldquo;bd&amp;rdquo;,&amp;ldquo;be&amp;rdquo;,&amp;ldquo;bf&amp;rdquo;,&amp;ldquo;cd&amp;rdquo;,&amp;ldquo;ce&amp;rdquo;,&amp;ldquo;cf&amp;rdquo;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 16. 3Sum Closet</title><link>https://intervalrain.github.io/leetcode/16/</link><pubDate>Fri, 28 Oct 2022 21:51:20 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/16/</guid><description>&lt;p&gt;&lt;strong&gt;no. &lt;Title&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Two Pointers&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt; and an integer &lt;code&gt;target&lt;/code&gt;, find three integers in &lt;code&gt;nums&lt;/code&gt; such that the sum is closet to &lt;code&gt;target&lt;/code&gt;.&lt;br&gt;
Return *the sum of the three integers`.&lt;br&gt;
You may assume that each input would have exactly one solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [-1,2,1,-4], target = 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The sum that is closet to the target is 2. (-1 + 2 + 1 = 2).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 15. 3Sum</title><link>https://intervalrain.github.io/leetcode/15/</link><pubDate>Fri, 28 Oct 2022 13:30:19 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/15/</guid><description>&lt;p&gt;&lt;strong&gt;15. 3Sum&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Two Pointer&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer array nums, return all the triplets &lt;code&gt;[nums[i], nums[j], nums[k]]&lt;/code&gt; such that &lt;code&gt;i != j&lt;/code&gt;, &lt;code&gt;i != k&lt;/code&gt;, &lt;code&gt;j != k&lt;/code&gt;, and &lt;code&gt;nums[i] + nums[j] + nums[k] == 0&lt;/code&gt;.&lt;br&gt;
Notice that the solution set must not contain duplicate triplets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [-1,0,1,2,-1,-4]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [[-1,-1,2],[-1,0,1]]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;br&gt;
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.&lt;br&gt;
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.&lt;br&gt;
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.&lt;br&gt;
The distinct triplets are [-1,0,1] and [-1,-1,2].&lt;br&gt;
Notice that the order of the output and the order of the triplets does not matter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 30. Substring with Concatenation of All Words</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/30/</link><pubDate>Fri, 28 Oct 2022 12:30:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/30/</guid><description>&lt;ul&gt;
&lt;li&gt;這一題與 567 類似，差別是將字元比較改成字串比較。&lt;/li&gt;
&lt;li&gt;注意因為字串比較不一定是從 0 開始，所以還要多一個 &lt;code&gt;for start in range(0, wordLen)&lt;/code&gt; 的迴圈來調整起始位置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; findSubstring(string s, vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; words) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; cnt1, cnt2;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;auto&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; word : words) cnt1[word]&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; wordLen &lt;span style="color:#f92672"&gt;=&lt;/span&gt; words[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;].size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; words.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (s.size() &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; wordLen &lt;span style="color:#f92672"&gt;*&lt;/span&gt; k) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; start &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; start &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; wordLen; start&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt2.clear();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; valid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; start; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k &lt;span style="color:#f92672"&gt;*&lt;/span&gt; wordLen; i &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; wordLen) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string sin &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.substr(i, wordLen);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt1.count(sin) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;cnt2[sin] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; cnt1[sin]) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (valid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; cnt1.size()) res.push_back(start);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; start &lt;span style="color:#f92672"&gt;+&lt;/span&gt; k &lt;span style="color:#f92672"&gt;*&lt;/span&gt; wordLen; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; s.size(); i &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; wordLen) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string sin &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.substr(i, wordLen);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt1.count(sin) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;cnt2[sin] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; cnt1[sin]) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string sout &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.substr(i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k&lt;span style="color:#f92672"&gt;*&lt;/span&gt;wordLen, wordLen);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt1.count(sout) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cnt2[sout]&lt;span style="color:#f92672"&gt;--&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; cnt1[sout]) valid&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (valid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; cnt1.size()) res.push_back(i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;(k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)&lt;span style="color:#f92672"&gt;*&lt;/span&gt;wordLen);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 438. Find All Anagrams in a String</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/438/</link><pubDate>Fri, 28 Oct 2022 12:20:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/438/</guid><description>&lt;ul&gt;
&lt;li&gt;這一題與 567 類似，是找 anagram 題題目，令 p 長度為 window size，即可解。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; findAnagrams(string s, string p) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; p.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (n &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; cnt1, cnt2;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;auto&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; c : p) cnt1[c]&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; valid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt1.count(s[i]) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;cnt2[s[i]] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; cnt1[s[i]]) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (valid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; cnt1.size()) res.push_back(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt1.count(s[i]) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;cnt2[s[i]] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; cnt1[s[i]]) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt1.count(s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cnt2[s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]]&lt;span style="color:#f92672"&gt;--&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; cnt1[s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]]) valid&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (valid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; cnt1.size()) res.push_back(i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 567. Permutation in String</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/567/</link><pubDate>Fri, 28 Oct 2022 12:10:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/567/</guid><description>&lt;ul&gt;
&lt;li&gt;這一題同樣是定長度的 sliding window，window size 為 s1.size()&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; checkInclusion(string s1, string s2) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; map, map2;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s1.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s2.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (k &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; n) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; valid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;auto&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; c : s1) map[c]&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;map.count(s2[i])) &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;++&lt;/span&gt;map2[s2[i]] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; map[s2[i]]) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (valid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; map.size()) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (map.count(s2[i]) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#f92672"&gt;++&lt;/span&gt;map2[s2[i]] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; map[s2[i]]) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (map.count(s2[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]) &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; map2[s2[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]]&lt;span style="color:#f92672"&gt;--&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; map[s2[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]]) valid&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (valid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; map.size()) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1888. Minimum Number of Flips to Make the Binary String Alternating</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1888/</link><pubDate>Fri, 28 Oct 2022 12:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1888/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 2006&lt;/li&gt;
&lt;li&gt;這一題如果沒有條件一，則很簡單，根據奇偶數索引位置，判斷是否要 flip 就可以了。
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;minFlips&lt;/span&gt;(string s) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; ans1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, ans2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ((i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;++&lt;/span&gt;ans1;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ((i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;++&lt;/span&gt;ans2;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; min(ans1, ans2);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;但這一題加上條件一，可以用很精巧的手法，把它轉成 sliding window 的問題，將字串重覆兩次，以原字串長度作為 window size，可解這題。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; minFlips(string s) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; s;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; ans1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, ans2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ((i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;++&lt;/span&gt;ans1;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ((i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;++&lt;/span&gt;ans2;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; min(ans1, ans2);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; s.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ((i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;++&lt;/span&gt;ans1;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ((i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;++&lt;/span&gt;ans2;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (((i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; ((i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;--&lt;/span&gt;ans1;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (((i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; ((i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; s[i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)) &lt;span style="color:#f92672"&gt;--&lt;/span&gt;ans2;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; min({ans1, ans2, ans});
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; ans;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[Leetcode] 14. Longest Common Prefix</title><link>https://intervalrain.github.io/leetcode/14/</link><pubDate>Fri, 28 Oct 2022 00:00:08 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/14/</guid><description>&lt;p&gt;&lt;strong&gt;14. Longest Common Prefix&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;br&gt;
If there is no common prefix, return an empty string &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; strs = [&amp;ldquo;flower&amp;rdquo;, &amp;ldquo;flow&amp;rdquo;, &amp;ldquo;flight&amp;rdquo;]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; &amp;ldquo;fl&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; strs = [&amp;ldquo;dog&amp;rdquo;, &amp;ldquo;racecar&amp;rdquo;, &amp;ldquo;car&amp;rdquo;]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; &amp;quot;&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: There is no common prefix among the input strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= strs.length &amp;lt;= 200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= strs[i].length &amp;lt;= 200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strs[i]&lt;/code&gt; consists of only lowercase English letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="二分析"&gt;二、分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;簡單的字串比對問題。&lt;/li&gt;
&lt;li&gt;需熟悉 &lt;code&gt;string&lt;/code&gt; 的函數 &lt;code&gt;substr()&lt;/code&gt; 的使用方式，常用以下兩種
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s.substr(int start, int len)&lt;/code&gt;，從 &lt;code&gt;start&lt;/code&gt; 起取長度為 &lt;code&gt;len&lt;/code&gt; 的子字串。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.substr(int start)&lt;/code&gt; 從 &lt;code&gt;start&lt;/code&gt; 起取到字串的結尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="三解題"&gt;三、解題&lt;/h3&gt;
&lt;h4 id="1-string"&gt;1. String&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Time complexity: \(O(m\times n)，\text{m }為\text{ strs }的長度，\text{n }為\text{ strs[i] }的長度\)，&lt;/li&gt;
&lt;li&gt;Space complexity: \(O(1)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-C++" data-lang="C++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;string &lt;span style="color:#a6e22e"&gt;longestCommonPrefix&lt;/span&gt;(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; strs) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; strs[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; strs.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (; j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; min(strs[i].length(), res.length()); j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (strs[i][j] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; res[j]) &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; res.substr(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, j);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="https://intervalrain.github.io/leetcode"&gt;回目錄 Catalog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>[Leetcode] 13. Roman to Integer</title><link>https://intervalrain.github.io/leetcode/13/</link><pubDate>Thu, 27 Oct 2022 21:58:08 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/13/</guid><description>&lt;p&gt;&lt;strong&gt;13. Roman to Integer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Roman numerals are represented by seven different symbols: &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt;, and &lt;code&gt;M&lt;/code&gt;.&lt;br&gt;
\(\boxed{\begin{array}{ll}
\textbf{Symbol}&amp;amp;\textbf{Value}\\
\texttt{I}&amp;amp;1\\
\texttt{V}&amp;amp;5\\
\texttt{X}&amp;amp;10\\
\texttt{L}&amp;amp;50\\
\texttt{C}&amp;amp;100\\
\texttt{D}&amp;amp;500\\
\texttt{M}&amp;amp;1000\\
\end{array}}\)&lt;br&gt;
For example, &lt;code&gt;2&lt;/code&gt; is written as &lt;code&gt;II&lt;/code&gt; in Roman numeral, just two one&amp;rsquo;s added together. &lt;code&gt;12&lt;/code&gt; is written as &lt;code&gt;XII&lt;/code&gt;, which is simply &lt;code&gt;X + II&lt;/code&gt;. The number &lt;code&gt;27&lt;/code&gt; is written as &lt;code&gt;XXVII&lt;/code&gt;, which is &lt;code&gt;XX + V + II&lt;/code&gt;.&lt;br&gt;
Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not &lt;code&gt;IIII&lt;/code&gt;. Instead the number four is written as &lt;code&gt;IV&lt;/code&gt;. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as &lt;code&gt;IX&lt;/code&gt;. There are six instances where subtraction is used:&lt;/p&gt;</description></item><item><title>[Leetcode] 835. Image Overlap</title><link>https://intervalrain.github.io/leetcode/835/</link><pubDate>Thu, 27 Oct 2022 17:35:25 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/835/</guid><description>&lt;p&gt;&lt;strong&gt;835. Image Overlap&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Matrix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given two images, &lt;code&gt;img1&lt;/code&gt; and &lt;code&gt;img2&lt;/code&gt;, represented as binary, square matrices of size &lt;code&gt;n x n&lt;/code&gt;. A binary matrix has only &lt;code&gt;0&lt;/code&gt;s and &lt;code&gt;1&lt;/code&gt;s as values.&lt;br&gt;
We &lt;strong&gt;translate&lt;/strong&gt; one image however we choose by sliding all the &lt;code&gt;1&lt;/code&gt; bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the &lt;strong&gt;overlap&lt;/strong&gt; by counting the number of positions that have a &lt;code&gt;1&lt;/code&gt; in &lt;strong&gt;both&lt;/strong&gt; images.
Note also that a translation does &lt;strong&gt;not&lt;/strong&gt; include any kind of rotation. Any &lt;code&gt;1&lt;/code&gt; bits that are translated outside of the matrix bordered are erased.&lt;br&gt;
Return &lt;em&gt;the largest possible overlap&lt;/em&gt;.&lt;/p&gt;</description></item><item><title>[LeetCode] 2653. Sliding Subarray Beauty</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2653/</link><pubDate>Thu, 27 Oct 2022 12:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2653/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1786&lt;/li&gt;
&lt;li&gt;我覺得這一題稍有難度，主要在處理 &lt;code&gt;findKth&lt;/code&gt; 方法時，有一些技巧，如果單純用 vector 來記錄 window，會 LTE，因為 &lt;code&gt;nums[i]&lt;/code&gt; 的範圍滿小的(-50~50之間)，可以用 &lt;code&gt;bucket sort&lt;/code&gt;，如果數字再更大一點，可以使用 &lt;code&gt;fenwick tree&lt;/code&gt; 或是 &lt;code&gt;segment tree&lt;/code&gt; 範圍求和，使 &lt;code&gt;update&lt;/code&gt; 與 &lt;code&gt;query&lt;/code&gt; 的複雜度都是 \(\log(n)\)&lt;/li&gt;
&lt;li&gt;Bucket Sort&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;NumberTracker&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; update(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; delta) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;findKth&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;NumberTracker() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;BucketSort&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; NumberTracker {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; cnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; right_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; BucketSort(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; right) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; left_ &lt;span style="color:#f92672"&gt;=&lt;/span&gt; left;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; right_ &lt;span style="color:#f92672"&gt;=&lt;/span&gt; right;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; n_ &lt;span style="color:#f92672"&gt;=&lt;/span&gt; right &lt;span style="color:#f92672"&gt;-&lt;/span&gt; left &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt.assign(n_, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;update&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; delta) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt[num &lt;span style="color:#f92672"&gt;-&lt;/span&gt; left_] &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; delta;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;findKth&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; total &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; n_; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; total &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; cnt[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (total &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; left_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;NumberTracker&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; tracker;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Solution() &lt;span style="color:#f92672"&gt;:&lt;/span&gt; tracker(make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;BucketSort&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;(&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;50&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;50&lt;/span&gt;)) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; getSubarrayBeauty(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tracker&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;update(nums[i], &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; tracker&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;findKth(x);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res.push_back(min(ans, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tracker&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;update(nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k], &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tracker&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;update(nums[i], &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; tracker&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;findKth(x);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res.push_back(min(ans, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Fenwick Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FenwickTree&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; NumberTracker {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; right_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; bit;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;lowbit&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; a &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; (&lt;span style="color:#f92672"&gt;-&lt;/span&gt;a);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idx, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; diff) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; idx&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bit.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (idx &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bit[idx] &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; diff;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; idx &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; lowbit(idx);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idx) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; idx&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (idx &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; bit[idx];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; idx &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; lowbit(idx);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FenwickTree(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; right) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; left_ &lt;span style="color:#f92672"&gt;=&lt;/span&gt; left;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; right_ &lt;span style="color:#f92672"&gt;=&lt;/span&gt; right;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; n_ &lt;span style="color:#f92672"&gt;=&lt;/span&gt; right &lt;span style="color:#f92672"&gt;-&lt;/span&gt; left &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bit.assign(n_ &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;update&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; delta) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; num &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; left_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; add(num, delta);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;findKth&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (left &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; right) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; mid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (left &lt;span style="color:#f92672"&gt;+&lt;/span&gt; right) &lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (query(mid) &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; k)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; right &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mid;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; left &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mid &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; min(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, left &lt;span style="color:#f92672"&gt;+&lt;/span&gt; left_);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Segment Tree (zkw tree)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;NumberTracker&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; build(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; nums) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;update&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; delta) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;findKth&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;NumberTracker() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SegmentTree&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; NumberTracker {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; tree_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; num_to_idx;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; idx_to_num;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;lowbit&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; a &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; (&lt;span style="color:#f92672"&gt;-&lt;/span&gt;a);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SegmentTree() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;build&lt;/span&gt;(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; nums) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sort(nums.begin(), nums.end());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; nums.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; nums[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; num_to_idx[nums[i]] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; j;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; idx_to_num[j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (n_ &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; n_ &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; num_to_idx.size(); n_ &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; m_ &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n_ &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tree_.assign(m_, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;update&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; delta) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; num_to_idx[num];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; idx &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; n_;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (idx &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tree_[idx] &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; delta;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; idx &lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;findKth&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) &lt;span style="color:#66d9ef"&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; idx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (idx &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n_) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; idx &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (tree_[idx] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; k &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; tree_[idx];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; idx&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; idx_to_num[idx &lt;span style="color:#f92672"&gt;-&lt;/span&gt; n_];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;NumberTracker&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; tracker;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Solution() &lt;span style="color:#f92672"&gt;:&lt;/span&gt; tracker(make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;SegmentTree&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;()) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; getSubarrayBeauty(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tracker&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;build(nums);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tracker&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;update(nums[i], &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; tracker&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;findKth(x);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res.push_back(min(ans, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tracker&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;update(nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k], &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tracker&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;update(nums[i], &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; tracker&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;findKth(x);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res.push_back(min(ans, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[Leetcode] 12. Integer to Roman</title><link>https://intervalrain.github.io/leetcode/12/</link><pubDate>Wed, 26 Oct 2022 20:36:08 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/12/</guid><description>&lt;p&gt;&lt;strong&gt;12. Integer to Roman&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Roman numerals are represented by seven different symbols: &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt;, and &lt;code&gt;M&lt;/code&gt;.&lt;br&gt;
\(\boxed{\begin{array}{ll}
\textbf{Symbol}&amp;amp;\textbf{Value}\\
\texttt{I}&amp;amp;1\\
\texttt{V}&amp;amp;5\\
\texttt{X}&amp;amp;10\\
\texttt{L}&amp;amp;50\\
\texttt{C}&amp;amp;100\\
\texttt{D}&amp;amp;500\\
\texttt{M}&amp;amp;1000\\
\end{array}}\)&lt;br&gt;
For example, &lt;code&gt;2&lt;/code&gt; is written as &lt;code&gt;II&lt;/code&gt; in Roman numeral, just two one&amp;rsquo;s added together. &lt;code&gt;12&lt;/code&gt; is written as &lt;code&gt;XII&lt;/code&gt;, which is simply &lt;code&gt;X + II&lt;/code&gt;. The number &lt;code&gt;27&lt;/code&gt; is written as &lt;code&gt;XXVII&lt;/code&gt;, which is &lt;code&gt;XX + V + II&lt;/code&gt;.&lt;br&gt;
Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not &lt;code&gt;IIII&lt;/code&gt;. Instead the number four is written as &lt;code&gt;IV&lt;/code&gt;. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as &lt;code&gt;IX&lt;/code&gt;. There are six instances where subtraction is used:&lt;/p&gt;</description></item><item><title>[Leetcode] 11. Container With Most Water</title><link>https://intervalrain.github.io/leetcode/11/</link><pubDate>Wed, 26 Oct 2022 19:36:06 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/11/</guid><description>&lt;p&gt;&lt;strong&gt;11. Container With Most Water&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Two Pointer&lt;/code&gt;、&lt;code&gt;Greedy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given an integer array &lt;code&gt;height&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;. There are &lt;code&gt;n&lt;/code&gt; vertical lines drawn such that the two endpoints of the &lt;code&gt;ith&lt;/code&gt; line are &lt;code&gt;(i, 0)&lt;/code&gt; and &lt;code&gt;(i, height[i])&lt;/code&gt;.&lt;br&gt;
Find two lines that together with the x-axis form a container, such that the container contains the most water.&lt;br&gt;
Return &lt;em&gt;the maximum amount of water a container can store&lt;/em&gt;.&lt;br&gt;
&lt;strong&gt;Notive&lt;/strong&gt; that you may not slant the container.&lt;/p&gt;</description></item><item><title>[Leetcode] 10. Regular Expression Matching</title><link>https://intervalrain.github.io/leetcode/10/</link><pubDate>Wed, 26 Oct 2022 18:36:01 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/10/</guid><description>&lt;p&gt;&lt;strong&gt;10. Regular Expression Matching&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;、&lt;code&gt;Recursion&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an input string &lt;code&gt;s&lt;/code&gt; and a pattern &lt;code&gt;p&lt;/code&gt;, implement regular expression matching with support for &lt;code&gt;'.'&lt;/code&gt; and &lt;code&gt;'*'&lt;/code&gt; where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;'.'&lt;/code&gt; Matches any single character.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'*'&lt;/code&gt; Matches zero or more of the preceding element.&lt;br&gt;
The matching should cover the &lt;strong&gt;entire&lt;/strong&gt; input string (not partial).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; s = &amp;ldquo;aa&amp;rdquo;, p = &amp;ldquo;a&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: &amp;ldquo;a&amp;rdquo; does not match the entire string &amp;ldquo;aa&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2134. Minimum Swaps to Group All 1's Together II</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2134/</link><pubDate>Wed, 26 Oct 2022 12:00:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2134/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1748&lt;/li&gt;
&lt;li&gt;遇到 circular 的問題都可以換位思考，這題可以想成「min swaps to group all 1」或「min swaps to group all 0」&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; minSwaps(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; accumulate(nums.begin(), nums.end(), &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;min&lt;/span&gt;(minSwapsHelper(nums, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, k), minSwapsHelper(nums, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;minSwapsHelper&lt;/span&gt;(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; target, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (nums[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; target) curr&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; cnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; curr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (nums[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; target) curr&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; target) curr&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(cnt, curr);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; k &lt;span style="color:#f92672"&gt;-&lt;/span&gt; cnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[Leetcode] 9. Palindrome Number</title><link>https://intervalrain.github.io/leetcode/9/</link><pubDate>Wed, 26 Oct 2022 10:20:08 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/9/</guid><description>&lt;p&gt;&lt;strong&gt;9. Palindrome Number&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Math&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer &lt;code&gt;x&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is palindrome number.&lt;br&gt;
An integer is a &lt;strong&gt;palindrome&lt;/strong&gt; when it reads the same backward as forward.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example, &lt;code&gt;121&lt;/code&gt; is a palindrome while &lt;code&gt;123&lt;/code&gt; is not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; x = 121&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: 121 reads as 121 from left to right and from right to left.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; x = -121&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[Leetcode] 8. String to Integer (atoi)</title><link>https://intervalrain.github.io/leetcode/8/</link><pubDate>Wed, 26 Oct 2022 00:21:56 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/8/</guid><description>&lt;p&gt;&lt;strong&gt;8. String to Integer (atoi)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Implement the &lt;code&gt;myAtoi(string s)&lt;/code&gt; function, which converts a string to a 32-bit signed integer (similar to C/C++&amp;rsquo;s &lt;code&gt;atoi&lt;/code&gt; function).&lt;br&gt;
The algorithm for &lt;code&gt;myAtoi(string s)&lt;/code&gt; is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read in and ignore any leading whitespace.&lt;/li&gt;
&lt;li&gt;Check if the next character (if not already at the end of the string) is &lt;code&gt;'-'&lt;/code&gt; or &lt;code&gt;'+'&lt;/code&gt;. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.&lt;/li&gt;
&lt;li&gt;Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.&lt;/li&gt;
&lt;li&gt;Convert these digits into an integer (i.e. &lt;code&gt;&amp;quot;123&amp;quot; -&amp;gt; 123&lt;/code&gt;, &lt;code&gt;&amp;quot;0032&amp;quot; -&amp;gt; 32&lt;/code&gt;). If no digits were read, then the integer is &lt;code&gt;0&lt;/code&gt;. Change the sign as necessary (from step 2).&lt;/li&gt;
&lt;li&gt;If the integer is out of the 32-bit signed integer range &lt;code&gt;[-2^31, 2^31-1]&lt;/code&gt;, then clamp the integer so that it remains in the range. Specifically, integers less than &lt;code&gt;-2^31&lt;/code&gt; should be clamped to &lt;code&gt;-2^31&lt;/code&gt;, and integer greater than &lt;code&gt;2^31-1&lt;/code&gt; should be clamped to &lt;code&gt;2^31-1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Return the integer as the final result.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[Leetcode] 7. Reverse Integer</title><link>https://intervalrain.github.io/leetcode/7/</link><pubDate>Tue, 25 Oct 2022 23:47:53 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/7/</guid><description>&lt;p&gt;&lt;strong&gt;7. Reverse Integer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Math&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given a signed 32-bit integer &lt;code&gt;x&lt;/code&gt;, return &lt;code&gt;x&lt;/code&gt; &lt;em&gt;with its digits reversed&lt;/em&gt;. If reversing &lt;code&gt;x&lt;/code&gt; causes the value to go outside the signed 32-bit integer range &lt;code&gt;[-2^31, 2^31-1]&lt;/code&gt;, then return &lt;code&gt;0&lt;/code&gt;.&lt;br&gt;
&lt;strong&gt;Assume the environment does not allow you to store 64-bit integers (signed or unsigned).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; x = 123&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 321&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; x = -123&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; -321&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[Leetcode] 6. Zigzag Conversion</title><link>https://intervalrain.github.io/leetcode/6/</link><pubDate>Tue, 25 Oct 2022 21:40:24 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/6/</guid><description>&lt;p&gt;&lt;strong&gt;6. Zigzag Conversion&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;The string &lt;code&gt;&amp;quot;PAYPALISHIRING&amp;quot;&lt;/code&gt; is written in a zigzag pattern on a given number of rows like this: (you may want to dispaly this pattern in a fixed font for better legibility)&lt;br&gt;
\(
\quad\texttt{P A H N}\\
\quad\texttt{APLSIIG}\\
\quad\texttt{Y I R}\\
\)&lt;br&gt;
And then read line by line: &lt;code&gt;&amp;quot;PAHNAPLSIIGYIR&amp;quot;&lt;/code&gt;&lt;br&gt;
Write the code that will take a string and make this conversion given a number of rows:
&lt;code&gt;string convert(string s, int numRows&lt;/code&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 5. Longest Palindromic Substring</title><link>https://intervalrain.github.io/leetcode/5/</link><pubDate>Tue, 25 Oct 2022 16:32:51 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/5/</guid><description>&lt;p&gt;&lt;strong&gt;5. Longest Substring Without Repeating Characters&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Dynamic Programming&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given a string &lt;code&gt;s&lt;/code&gt;, return &lt;em&gt;the longest palindromic substring&lt;/em&gt; in &lt;code&gt;s&lt;/code&gt;.&lt;br&gt;
A string is called a palindrome string if the reverse of that string is the same of the original string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; s = &amp;ldquo;babad&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; &amp;ldquo;bab&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; &amp;ldquo;aba&amp;rdquo; is also a valid answer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; s = &amp;ldquo;cbbd&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; &amp;ldquo;bb&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; consists of only digits and English letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="二分析"&gt;二、分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;注意 palindrome string 的特性：
&lt;ul&gt;
&lt;li&gt;當長度為 &lt;code&gt;1&lt;/code&gt; 時，必為 palindrome string&lt;/li&gt;
&lt;li&gt;當長度為 &lt;code&gt;2&lt;/code&gt; 時，兩個字元必須相同才為 palindrome string&lt;/li&gt;
&lt;li&gt;當長度 &lt;code&gt;&amp;gt;2&lt;/code&gt; 時，palindrome string 必須滿足
&lt;ol&gt;
&lt;li&gt;最左邊的字元等於最右邊的字元，即 &lt;code&gt;s[left] == s[right]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;除去最左邊的字元跟最右邊的字元，必須為 palindrome string，&lt;br&gt;
即 &lt;code&gt;s.substr(left+1, len-2)&lt;/code&gt; 為 palindromic。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="三解題"&gt;三、解題&lt;/h3&gt;
&lt;h4 id="1-dynamic-prograimming"&gt;1. Dynamic Prograimming&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Time complexity: \(O(n^2)\)&lt;/li&gt;
&lt;li&gt;Space complexity: \(O(n^2)\)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-C++" data-lang="C++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;string &lt;span style="color:#a6e22e"&gt;longestPalindrome&lt;/span&gt;(string s) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.length();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; dp[n][n];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; memset(dp, false, &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(dp));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; j; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; j) { &lt;span style="color:#75715e"&gt;// 長度為 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; dp[i][j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (j &lt;span style="color:#f92672"&gt;-&lt;/span&gt; i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) { &lt;span style="color:#75715e"&gt;// 長度為 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; dp[i][j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; s[j];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; { &lt;span style="color:#75715e"&gt;// 長度 &amp;gt; 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; dp[i][j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; s[j] &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; dp[i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;][j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (dp[i][j] &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style="color:#f92672"&gt;-&lt;/span&gt; i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; len) { &lt;span style="color:#75715e"&gt;// 比較長度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; j &lt;span style="color:#f92672"&gt;-&lt;/span&gt; i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.substr(i, len);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="https://intervalrain.github.io/leetcode"&gt;回目錄 Catalog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 4. Median of Two Sorted Arrays</title><link>https://intervalrain.github.io/leetcode/4/</link><pubDate>Tue, 25 Oct 2022 14:52:18 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/4/</guid><description>&lt;p&gt;&lt;strong&gt;4. Median of Two Sorted Arrays&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Binary Search&lt;/code&gt;、&lt;code&gt;Divide and Conquer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given two sorted arrays &lt;code&gt;nums1&lt;/code&gt; and &lt;code&gt;nums2&lt;/code&gt; of size &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; respectively, return &lt;strong&gt;the median&lt;/strong&gt; of the sorted arrays.&lt;br&gt;
The overall run time complexity should be &lt;code&gt;O(log (m+n))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums1 = [1,3], nums2 = [2]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 2.00000&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; merged array = [1,2,3] and median is 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums1 = [1,2], nums2 = [3,4]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 2.50000&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 3. Longest Substring Without Repeating Characters</title><link>https://intervalrain.github.io/leetcode/3/</link><pubDate>Tue, 25 Oct 2022 14:20:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/3/</guid><description>&lt;p&gt;&lt;strong&gt;3. Longest Substring Without Repeating Characters&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Sliding Window&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given a string &lt;code&gt;s&lt;/code&gt;, find the length of the &lt;strong&gt;longest substring&lt;/strong&gt; without repeating characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; s = &amp;ldquo;abcabcbb&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The answer is &amp;ldquo;abc&amp;rdquo;, with the length of 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; s = &amp;ldquo;bbbbb&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The answer is &amp;ldquo;b&amp;rdquo;, with the length of 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; s = &amp;ldquo;pwwkew&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; 3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The answer is &amp;ldquo;wke&amp;rdquo;, with the length of 3. Notice that the answer must be a substring, &amp;ldquo;pwke&amp;rdquo; is a subsequence and not a substring.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 2. Add Two Numbers</title><link>https://intervalrain.github.io/leetcode/2/</link><pubDate>Tue, 25 Oct 2022 13:38:00 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/2/</guid><description>&lt;p&gt;&lt;strong&gt;2. Add Two Numbers&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Linked List&lt;/code&gt;、&lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;Recursion&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;You are given two &lt;strong&gt;non-empty&lt;/strong&gt; linked lists representing two non-negative integers. The digits are stored in &lt;strong&gt;reverse order&lt;/strong&gt;, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.&lt;br&gt;
You may assume the two numbers do not contain any leading zero, except the number 0 itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;img alt="addtwonumber1" loading="lazy" src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; l1 = [2,4,3], l2 = [5,6,4]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [7,0,8]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; 342 + 465 = 807&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 1297. Maximum Number of Occurrences of a Substring</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1297/</link><pubDate>Tue, 25 Oct 2022 12:43:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1297/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1748&lt;/li&gt;
&lt;li&gt;這題的 minSize 和 maxSize 在 26 以內，範圍不會太大，可以用定長度的 sliding window 硬解。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxFreq(string s, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxLetters, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; minSize, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxSize) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; minSize; i &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; maxSize; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, maxFreqWithWindowSize(s, maxLetters, i));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;maxFreqWithWindowSize&lt;/span&gt;(string&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; s, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; th, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; cnt[&lt;span style="color:#ae81ff"&gt;26&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; memset(cnt, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(cnt));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; uq &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt[s[i]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;++&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) uq&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (uq &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; th) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; map[s.substr(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, k)]&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt[s[i]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;++&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) uq&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;--&lt;/span&gt;cnt[s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) uq&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (uq &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; th) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; s.substr(i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, k);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, &lt;span style="color:#f92672"&gt;++&lt;/span&gt;map[t]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1652. Defuse the Bomb</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1652/</link><pubDate>Tue, 25 Oct 2022 12:42:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1652/</guid><description>&lt;ul&gt;
&lt;li&gt;這題要用 sliding window 解需要處理 circular iteration&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; decrypt(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; code, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; code.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; res(n, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (k &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; abs(k);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; start &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; n&lt;span style="color:#f92672"&gt;+&lt;/span&gt;k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; code[(start &lt;span style="color:#f92672"&gt;+&lt;/span&gt; i) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; n];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; m, j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; m &lt;span style="color:#f92672"&gt;+&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;, j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; in &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (start &lt;span style="color:#f92672"&gt;+&lt;/span&gt; i) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; n;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; out &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (start &lt;span style="color:#f92672"&gt;+&lt;/span&gt; i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; n;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; (code[(start &lt;span style="color:#f92672"&gt;+&lt;/span&gt; i) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; n] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; code[(start &lt;span style="color:#f92672"&gt;+&lt;/span&gt; i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; m) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; n]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res[j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1. Two Sum</title><link>https://intervalrain.github.io/leetcode/1/</link><pubDate>Tue, 25 Oct 2022 12:41:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/1/</guid><description>&lt;p&gt;&lt;strong&gt;1. Two Sum&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{green}\textsf{Easy}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;target&lt;/code&gt;, return &lt;em&gt;indices of the two numbers such that they add up to &lt;code&gt;target&lt;/code&gt;&lt;/em&gt;.&lt;br&gt;
You may assume that each input would have &lt;strong&gt;exactly one solution&lt;/strong&gt;, and you may not use the &lt;em&gt;same&lt;/em&gt; element twice.&lt;br&gt;
You can return the answer in any order.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [2,7,11,15], taget = 9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [0,1]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; Because nums[0] + nums[1] == 9, we return [0,1].&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 1423. Maximum Points You Can Obtain from Cards</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1423/</link><pubDate>Tue, 25 Oct 2022 12:41:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1423/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1574&lt;/li&gt;
&lt;li&gt;這題同樣是定長度的 sliding window，但要透過一點轉換，變成求 &lt;code&gt;window = n - k&lt;/code&gt; 的最小和&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxScore(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; cardPoints, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cardPoints.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; cardPoints[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; total &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; min_window_sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; m; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; (cardPoints[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; cardPoints[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;m]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; total &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; cardPoints[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; min_window_sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; min(min_window_sum, sum);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; total &lt;span style="color:#f92672"&gt;-&lt;/span&gt; min_window_sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2461. Maximum Sum of Distinct Subarrays With Length K</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2461/</link><pubDate>Tue, 25 Oct 2022 12:40:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2461/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1553&lt;/li&gt;
&lt;li&gt;定長度的 sliding window，搭配對 window 檢查是否滿足條件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; maximumSubarraySum(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; cnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; valid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; nums[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt[nums[i]]&lt;span style="color:#f92672"&gt;++&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; valid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; k &lt;span style="color:#f92672"&gt;?&lt;/span&gt; sum : &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; (nums[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt[nums[i]]&lt;span style="color:#f92672"&gt;++&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;--&lt;/span&gt;cnt[nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) valid&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (valid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; k) res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, sum);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2841. Maximum Sum of Almost Unique Subarray</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2841/</link><pubDate>Tue, 25 Oct 2022 12:39:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2841/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1546&lt;/li&gt;
&lt;li&gt;定長度的 sliding window，搭配對 window 檢查是否滿足條件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; maxSum(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;,&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; cnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; valid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; nums[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt[nums[i]]&lt;span style="color:#f92672"&gt;++&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (valid &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; m) res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; (nums[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (cnt[nums[i]]&lt;span style="color:#f92672"&gt;++&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) valid&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;--&lt;/span&gt;cnt[nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) valid&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (valid &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; m) res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, sum);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1461. Check If a String Contains All Binary Codes of Size K</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1461/</link><pubDate>Tue, 25 Oct 2022 12:38:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1461/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1504&lt;/li&gt;
&lt;li&gt;比較簡單的解法，使用 unordered_set&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; hasAllCodes(string s, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_set&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;string&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; set;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; k &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; s.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; set.insert(s.substr(i, k));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; set.size() &lt;span style="color:#f92672"&gt;==&lt;/span&gt; pow(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, k);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用 sliding window，並運用移位運算子&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; hasAllCodes(string s, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (s.size() &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pow(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, k);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; used(n, false);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curr &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; (s[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; used[curr] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; s.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; (s[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; curr &lt;span style="color:#f92672"&gt;%=&lt;/span&gt; n;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; used[curr] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;all_of&lt;/span&gt;(used.begin(), used.end(), [](&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; x) { &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; x; });
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1052. Grumpy Bookstore Owner</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1052/</link><pubDate>Tue, 25 Oct 2022 12:36:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1052/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1418&lt;/li&gt;
&lt;li&gt;定長度的 sliding window，秒殺&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxSatisfied(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; customers, vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; grumpy, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; customers.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;grumpy[i]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; customers[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; customers[i] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; customers[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; (customers[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; customers[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, sum);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2379. Minimum Recolors to Get K Consecutive Black Blocks</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2379/</link><pubDate>Tue, 25 Oct 2022 12:35:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2379/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1360&lt;/li&gt;
&lt;li&gt;定長度的 sliding window，秒殺&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; minimumRecolors(string blocks, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; cnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (blocks[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;) cnt&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;cnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; blocks.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (blocks[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;) cnt&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (blocks[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;) cnt&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; min(res, k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;cnt);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 2090. K Radius Subarray Averages</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2090/</link><pubDate>Tue, 25 Oct 2022 12:34:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2090/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1358
&lt;img alt="sample" loading="lazy" src="https://assets.leetcode.com/uploads/2021/11/07/eg1.png"&gt;&lt;/li&gt;
&lt;li&gt;這題一樣是定長度的 sliding window，但要做一下轉換，半徑為 &lt;code&gt;k&lt;/code&gt;，代表 window_size 為 &lt;code&gt;2k+1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; getAverages(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;k&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; res(n, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (m &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; n) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; nums[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res[k] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;/&lt;/span&gt; m;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; m, j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;, j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; (nums[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;m]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res[j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;/&lt;/span&gt; m;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1343/</link><pubDate>Tue, 25 Oct 2022 12:33:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1343/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1317&lt;/li&gt;
&lt;li&gt;定長度的 sliding window，秒殺&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; numOfSubarrays(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; arr, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; threshold) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; threshold &lt;span style="color:#f92672"&gt;*=&lt;/span&gt; k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; arr[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (sum &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; threshold) res&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; arr.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; (arr[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; arr[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (sum &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; threshold) res&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 643. Maximum Average Subarray I</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/643/</link><pubDate>Tue, 25 Oct 2022 12:32:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/643/</guid><description>&lt;ul&gt;
&lt;li&gt;定長度的 sliding window，秒殺&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;double&lt;/span&gt; findMaxAverage(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; nums[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; nums.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; nums[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, sum);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res&lt;span style="color:#f92672"&gt;/&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;double&lt;/span&gt;)k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 1456. Maximum Number of Vowels in a Substring of Given Length</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1456/</link><pubDate>Tue, 25 Oct 2022 12:31:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1456/</guid><description>&lt;ul&gt;
&lt;li&gt;難度分: 1263&lt;/li&gt;
&lt;li&gt;定長度的 sliding window，秒殺&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; maxVowels(string s, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; cnt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unordered_set&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; set &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (set.count(s[i])) cnt&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; k; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; s.size(); i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (set.count(s[i])) cnt&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (set.count(s[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k])) cnt&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(res, cnt);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] 定長 Sliding Window Pattern</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/pattern_1/</link><pubDate>Tue, 25 Oct 2022 12:31:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/pattern_1/</guid><description>&lt;ul&gt;
&lt;li&gt;定長度的 sliding window pattern&lt;/li&gt;
&lt;li&gt;步驟
&lt;ol&gt;
&lt;li&gt;construct sliding window + check condition&lt;/li&gt;
&lt;li&gt;move sliding window&lt;br&gt;
(1) remove item&lt;br&gt;
(2) check condition&lt;br&gt;
(3) add item&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Window&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; add(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;erase&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;check&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;virtual&lt;/span&gt; &lt;span style="color:#f92672"&gt;~&lt;/span&gt;Window() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Solution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unique_ptr&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Window&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; _w;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; solve(vector&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&amp;amp;&lt;/span&gt; nums, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w &lt;span style="color:#f92672"&gt;=&lt;/span&gt; make_unique&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;WindowImpl&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;(k);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; nums.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; k) _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;erase(nums[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (_w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;check(nums[i])) &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _w&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;add(nums[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; false;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>[LeetCode] Sliding Window and Double Pointer 科學刷題</title><link>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/</link><pubDate>Tue, 25 Oct 2022 12:30:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/</guid><description>&lt;h1 id="1-定長滑動窗口"&gt;1. 定長滑動窗口&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/pattern_1"&gt;定長滑動窗口 pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="11-基礎"&gt;1.1 基礎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1456"&gt;1456. Maximum Number of Vowels in a Substring of Given Length&lt;/a&gt;(1263)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/643"&gt;643. Maximum Average Subarray I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1343"&gt;1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold&lt;/a&gt;(1317)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2090"&gt;2090. K Radius Subarray Averages&lt;/a&gt;(1358)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2379"&gt;2379. Minimum Recolors to Get K Consecutive Black Blocks&lt;/a&gt;(1360)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1052"&gt;1052. Grumpy Bookstore Owner&lt;/a&gt;(1418)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1461"&gt;1461. Check If a String Contains All Binary Codes of Size K&lt;/a&gt;(1504)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2841"&gt;2841. Maximum Sum of Almost Unique Subarray&lt;/a&gt;(1546)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2461"&gt;2461. Maximum Sum of Distinct Subarrays With Length K&lt;/a&gt;(1553)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1423"&gt;1423. Maximum Points You Can Obtain from Cards&lt;/a&gt;(1574)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1652"&gt;1652. Defuse the Bomb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1297"&gt;1297. Maximum Number of Occurrences of a Substring&lt;/a&gt;(1748)&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; 1176. Diet Plan Performance(會員題)&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; 1100. Find K-Length Substrings With No Repeated Characters(會員題)&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; 1852. Distinct Numbers in Each Subarray(會員題)&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; 1151. Minimum Swaps to Group All 1&amp;rsquo;s Together(會員題)&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; 2107. Number of Unique Flavors After sharing K Candies(會員題)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="12-進階"&gt;1.2 進階&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2134"&gt;2134. Minimum Swaps to Group All 1&amp;rsquo;s Together II&lt;/a&gt;(1748)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2653"&gt;2653. Sliding Subarray Beauty&lt;/a&gt;(1786)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1888"&gt;1888. Minimum Number of Flips to Make the Binary String Alternating&lt;/a&gt;(2006)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/567"&gt;567. Permutation in String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/438"&gt;438. Find All Anagrams in a String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/30"&gt;30. Substring with Concatenation of All Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2156"&gt;2156. Find Substring With Given Hash Value&lt;/a&gt;(2063)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2953"&gt;2953. Count Complete Substrings&lt;/a&gt;(2449)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1016"&gt;1016. Binary String With Substrings Representing 1 To N&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; 683. K Empty Slots(會員題)&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; 2067. Number of Equal Count Substrings(會員題)&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; 2524. Maximum Frequency Score of a substring(會員題)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="13-其它"&gt;1.3 其它&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2269"&gt;2269. Find the K-Beauty of a Number&lt;/a&gt;(1280)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1984"&gt;1984. Minimum Difference Between Highest and Lowest of K Scores&lt;/a&gt;(1306)&lt;/li&gt;
&lt;li&gt;&lt;input checked="" disabled="" type="checkbox"&gt; &lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/220"&gt;220. Contains Duplicate III&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="2-不定長滑動窗口"&gt;2. 不定長滑動窗口&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;不定長滑動窗口主要分為三類：求最長子數組、求最短子數組，以及求子數組個數。&lt;/p&gt;</description></item><item><title>[LeetCode] Catalog</title><link>https://intervalrain.github.io/leetcode/</link><pubDate>Tue, 25 Oct 2022 11:30:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/</guid><description>&lt;p&gt;&lt;a href="https://intervalrain.github.io/leetcode_list"&gt;科學刷題&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="catalog"&gt;&lt;strong&gt;Catalog&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id="一依題號"&gt;一、依題號&lt;/h2&gt;
&lt;h3 id="1-50045"&gt;1-500(45)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://intervalrain.github.io/leetcode/1"&gt;1. Two Sum&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/2"&gt;2. Add Two Numbers&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/3"&gt;3. Longest Substring Without Repeating Characters&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/4"&gt;4. Median of Two Sorted Array&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/5"&gt;5. Longest Palindromic Substring&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/6"&gt;6. Zigzag Conversion&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/7"&gt;7. Reverse Integer&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/8"&gt;8. String to Integer (atoi)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/9"&gt;9. Palindrome Number&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/10"&gt;10. Regular Expression Matching&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/11"&gt;11. Container With Most Water&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/12"&gt;12. Integer to Roman&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/13"&gt;13. Roman to Integer&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/14"&gt;14. Longest Common Prefix&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/15"&gt;15. 3Sum&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/16"&gt;16. 3Sum Closet&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/17"&gt;17. Letter Combinations of a Phone Number&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/18"&gt;18. 4Sum&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/19"&gt;19. Remove Nth Node From End of List&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/20"&gt;20. Valid Parentheses&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/21"&gt;21. Merge Two Sorted Lists&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/22"&gt;22. Generate Parentheses&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/23"&gt;23. Merge k Sorted Lists&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/24"&gt;24. Swap Nodes in Pairs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/25"&gt;25. Reverse Nodes in k-Group&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/53"&gt;53. Maximum Subarray&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/70"&gt;70. Climbing Stairs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/79"&gt;79. Word Search&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/100"&gt;100. Same Tree&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/124"&gt;124. Binary Tree Maximum Path Sum&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/132"&gt;132. Palindrome Partitioning II&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/149"&gt;149. Max Points on a Line&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/151"&gt;151. Reverse Words in a String&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/198"&gt;198. House Robber&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/212"&gt;212. Word Search II&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/213"&gt;213. House Robber II&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/223"&gt;223. Rectangle Area&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/279"&gt;279. Perfect Squares&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/290"&gt;290. Word Pattern&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/300"&gt;300. Longest Increasing Subsequence&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/322"&gt;322. Coin Change&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/328"&gt;328. Odd Even Linked List&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/337"&gt;337. House Robber III&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/347"&gt;347. Top K Frequent Elements&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/374"&gt;374. Guess Number Higher or Lower II&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/433"&gt;433. Minimum Genetic Mutation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/446"&gt;446. Arithmetic Slices II - Subsequence&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode/452"&gt;452. Minimum Number of Arrows to Burst Balloons&lt;/a&gt;&lt;/p&gt;</description></item><item><title>[LeetCode] 分類清單</title><link>https://intervalrain.github.io/leetcode_list/</link><pubDate>Tue, 25 Oct 2022 11:30:32 +0800</pubDate><guid>https://intervalrain.github.io/leetcode_list/</guid><description>&lt;h2 id="分類清單"&gt;分類清單&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://intervalrain.github.io/leetcode_list/sliding_window_dblptr"&gt;1. 滑動窗口與雙指針（定長／不定長／單序列／雙序列／三指針／分組循環）&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode_list/binary_search"&gt;2. 二分演算法（二分答案／最小化最大值／最大化最小值／Kth）&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode_list/monotonic_stack"&gt;3. 單調棧（基礎／矩形面積／貢獻法／最小字典序）&lt;/a&gt;
&lt;a href="https://intervalrain.github.io/leetcode_list/grid"&gt;4. 網格圖（DFS／BFS／綜合應用）&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode_list/bit_manipulation"&gt;5. 位運算（基礎／性質／拆位／試填／恆等式／思維）&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode_list/graph"&gt;6. 圖論演算法（DFS／BFS／拓撲排序／最短路／最小生成樹／二分圖／基環樹／歐拉路徑）&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode_list/dynamic_programming"&gt;7. 動態規劃（入門／背包／狀態機／劃分／區間／狀壓／數位／數據結構優化／樹形／博弈／概率期望）&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode_list/common_data_structure"&gt;8. 常用數據結構（前綴和／差分／棧／佇列／堆／字典樹／並查集／樹狀樹組／線段樹）&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode_list/math"&gt;9. 數學演算法（數論／組合／概率期望／博弈／計算幾何／隨機算法）&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode_list/greedy"&gt;10. 貪心與思維（基本貪心策略／反悔／區間／字典序／數學／思維／腦筋急轉彎／構造）&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode_list/linked_list_binary_tree"&gt;11. 鏈表、二叉樹與回溯（前後指針／快慢指針／DFS／BFS／直徑／LCA／一般樹）&lt;/a&gt;&lt;br&gt;
&lt;a href="https://intervalrain.github.io/leetcode_list/string"&gt;12. 字串（KMP／Z函數／Manacher／字串Hash／AC自動機／後綴數組／子序列自動機）&lt;/a&gt; 　&lt;/p&gt;</description></item><item><title>[Problem] Version Query</title><link>https://intervalrain.github.io/leetcode/versionquery/</link><pubDate>Thu, 20 Oct 2022 22:29:15 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/versionquery/</guid><description>&lt;p&gt;&lt;strong&gt;Version Query&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{red}\textsf{Hard}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Binary Search&lt;/code&gt;、&lt;code&gt;Segment Tree&lt;/code&gt;、&lt;code&gt;Heap (Priority Queue&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an information of application(APK) about its range of versions, find its corresponding OS version. If APK versions are probable for two or more OS versions, it must be belong to the latest OS version.&lt;br&gt;
The given apk_info structure is given as below.&lt;br&gt;
&lt;strong&gt;struct apk_info {&lt;/strong&gt;&lt;br&gt;
　　&lt;strong&gt;int apk_version;&lt;/strong&gt;&lt;br&gt;
　　&lt;strong&gt;int min_version = 1;&lt;/strong&gt;&lt;br&gt;
　　&lt;strong&gt;int max_version = INT_MAX;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;}&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>[C++] Segment Tree</title><link>https://intervalrain.github.io/c++/segtree/</link><pubDate>Tue, 18 Oct 2022 23:14:38 +0800</pubDate><guid>https://intervalrain.github.io/c++/segtree/</guid><description>用 C++ 介紹資料結構線段樹</description></item><item><title>[C++] stringstream 類範例 - split 與 concat</title><link>https://intervalrain.github.io/c++/stringstream/</link><pubDate>Fri, 14 Oct 2022 00:21:23 +0800</pubDate><guid>https://intervalrain.github.io/c++/stringstream/</guid><description>C++ 中字拆的 split 實作與 concatenate 實作</description></item><item><title>[Algo] 0-1. 複雜度分析 Algorithmic complexity / Big-O / Asymptotic analysis</title><link>https://intervalrain.github.io/cs/algo/bigo/</link><pubDate>Thu, 06 Oct 2022 23:00:28 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/bigo/</guid><description>演算法的複雜度分析，與複雜度的表示法</description></item><item><title>[Algo] 0-4. 二叉樹(Binary Tree)</title><link>https://intervalrain.github.io/cs/algo/binary_tree/</link><pubDate>Thu, 06 Oct 2022 23:00:28 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/binary_tree/</guid><description>演算法思維，介紹二叉樹這種資料結構以及如何使用它與 Leetcode 相關範例介紹</description></item><item><title>[Algo] 0-3. 鏈表(Linked List)</title><link>https://intervalrain.github.io/cs/algo/linked_list/</link><pubDate>Thu, 06 Oct 2022 22:30:28 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/linked_list/</guid><description>演算法結構介紹，介紹鏈表的遍歷，與常見的經典考題與常用到的操作手法</description></item><item><title>[Algo] 0-2. 算法思維</title><link>https://intervalrain.github.io/cs/algo/concept/</link><pubDate>Thu, 06 Oct 2022 22:15:28 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/concept/</guid><description>演算法的思維，在深入 Leetcode 世界前的一些基礎引導</description></item><item><title>CS 學習筆記</title><link>https://intervalrain.github.io/csindex/</link><pubDate>Thu, 06 Oct 2022 22:01:48 +0800</pubDate><guid>https://intervalrain.github.io/csindex/</guid><description>rainhu的資工學習筆記</description></item><item><title>[DS] 演算法筆記</title><link>https://intervalrain.github.io/cs/algo/</link><pubDate>Thu, 06 Oct 2022 22:00:28 +0800</pubDate><guid>https://intervalrain.github.io/cs/algo/</guid><description>演算法筆記，提供各式各樣的程式設計演算法，並以 leetcode 題目或是實際案例出發，介紹並分析解法。</description></item><item><title>[IT] 動態鏈結庫(DDL)</title><link>https://intervalrain.github.io/it/ddl/</link><pubDate>Sun, 18 Sep 2022 22:45:56 +0800</pubDate><guid>https://intervalrain.github.io/it/ddl/</guid><description>Command to construct DDL</description></item><item><title>[IT] MySQL Functions</title><link>https://intervalrain.github.io/it/mysql/</link><pubDate>Thu, 01 Sep 2022 13:28:14 +0800</pubDate><guid>https://intervalrain.github.io/it/mysql/</guid><description>Built-in function in MySQL</description></item><item><title>[IT] SQL</title><link>https://intervalrain.github.io/it/sql/</link><pubDate>Thu, 01 Sep 2022 13:28:14 +0800</pubDate><guid>https://intervalrain.github.io/it/sql/</guid><description>Base command of SQL</description></item><item><title>[Leetcode] 347. Top K Frequent Elements</title><link>https://intervalrain.github.io/leetcode/347/</link><pubDate>Sat, 23 Jul 2022 23:48:15 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/347/</guid><description>&lt;p&gt;&lt;strong&gt;347. Top K Frequent Elements&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardness: \(\color{orange}\textsf{Medium}\)&lt;/li&gt;
&lt;li&gt;Ralated Topics: &lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Hash Table&lt;/code&gt;、&lt;code&gt;Divide and Conquer&lt;/code&gt;、&lt;code&gt;Sorting&lt;/code&gt;、&lt;code&gt;Heap (Priority Queue)&lt;/code&gt;、&lt;code&gt;Bucket Sort&lt;/code&gt;、&lt;code&gt;Counting&lt;/code&gt;、&lt;code&gt;Quickselect&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="一題目"&gt;一、題目&lt;/h3&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;k&lt;/code&gt;, return the &lt;code&gt;k&lt;/code&gt; &lt;em&gt;most frequent elements&lt;/em&gt;. You may return the answer in &lt;strong&gt;any order&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [1,1,1,2,2,3], k = 2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [1,2]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; nums = [1], k = 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; [1]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= nums.length &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^4 &amp;lt;= nums[i] &amp;lt;= 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;k&lt;/code&gt; is in the range &lt;code&gt;[1, the number of unique elements in the array]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is &lt;strong&gt;guaranteed&lt;/strong&gt; that the answer is &lt;strong&gt;unique&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt; Your algorithm&amp;rsquo;s time complexity must be better than &lt;code&gt;O(n log n)&lt;/code&gt;, where n is the array&amp;rsquo;s size.&lt;/p&gt;</description></item><item><title>[Life] July's plan</title><link>https://intervalrain.github.io/life/prepare/</link><pubDate>Sat, 16 Jul 2022 17:48:09 +0800</pubDate><guid>https://intervalrain.github.io/life/prepare/</guid><description>Study plan for July</description></item><item><title>[統計] 統計學概要</title><link>https://intervalrain.github.io/device/statistics/</link><pubDate>Sat, 09 Jul 2022 20:02:28 +0800</pubDate><guid>https://intervalrain.github.io/device/statistics/</guid><description>用自身工經驗簡述實務上應用的統計學</description></item><item><title>[CA] 記憶體</title><link>https://intervalrain.github.io/cs/ca/memory/</link><pubDate>Sun, 03 Jul 2022 01:54:06 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/memory/</guid><description>&lt;h1 id="準備中"&gt;準備中&lt;/h1&gt;</description></item><item><title>[CA] Pipeline</title><link>https://intervalrain.github.io/cs/ca/pipeline/</link><pubDate>Sun, 03 Jul 2022 01:54:02 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/pipeline/</guid><description>&lt;h1 id="準備中"&gt;準備中&lt;/h1&gt;</description></item><item><title>[CA] 處理器</title><link>https://intervalrain.github.io/cs/ca/processor/</link><pubDate>Sun, 03 Jul 2022 01:54:02 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/processor/</guid><description>&lt;h1 id="準備中"&gt;準備中&lt;/h1&gt;</description></item><item><title>[CA] 計算機算術</title><link>https://intervalrain.github.io/cs/ca/arithmetic/</link><pubDate>Sun, 03 Jul 2022 01:53:50 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/arithmetic/</guid><description>&lt;h1 id="準備中"&gt;準備中&lt;/h1&gt;</description></item><item><title>[CA] 指令集架構</title><link>https://intervalrain.github.io/cs/ca/isa/</link><pubDate>Sun, 03 Jul 2022 01:53:45 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/isa/</guid><description>&lt;h1 id="準備中"&gt;準備中&lt;/h1&gt;</description></item><item><title>[作業系統] 計算機組織與結構</title><link>https://intervalrain.github.io/cs/ca/</link><pubDate>Sun, 03 Jul 2022 01:39:35 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/</guid><description>&lt;h1 id="計算機組織與結構"&gt;計算機組織與結構&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/ca/abstraction"&gt;計算機抽象化與科技&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/ca/isa"&gt;指令集架構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/ca/arithmetic"&gt;計算機算術&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/ca/processor"&gt;處理器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/ca/pipeline"&gt;Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/ca/memory"&gt;記憶體&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="參考資料"&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ocw.nthu.edu.tw/ocw/index.php?page=course&amp;amp;cid=76"&gt;黃婷婷 清大開放式課程 計算機結構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mropengate.blogspot.tw/"&gt;Mr. opengate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>CPU 個數、CPU 核心數、CPU 執行緒數</title><link>https://intervalrain.github.io/cs/os/cpucorethread/</link><pubDate>Sat, 02 Jul 2022 21:43:15 +0800</pubDate><guid>https://intervalrain.github.io/cs/os/cpucorethread/</guid><description>Introduction to CPU, core and thread</description></item><item><title>[作業系統] 計算機作業系統</title><link>https://intervalrain.github.io/cs/os/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>https://intervalrain.github.io/cs/os/</guid><description>&lt;h1 id="計算機作業系統"&gt;計算機作業系統&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/os/intro"&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/os/processmanagement"&gt;進程管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/os/deadlock"&gt;死鎖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/os/memorymanagement"&gt;記憶體管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/os/equipmentmanagement"&gt;設備管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://intervalrain.github.io/cs/os/link"&gt;鏈接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="參考資料"&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/CyC2018/CS-Notes"&gt;cyc2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mropengate.blogspot.tw/"&gt;Mr. opengate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>[計算機作業系統] 死鎖</title><link>https://intervalrain.github.io/cs/os/deadlock/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>https://intervalrain.github.io/cs/os/deadlock/</guid><description>&lt;h1 id="準備中"&gt;準備中&lt;/h1&gt;</description></item><item><title>[計算機作業系統] 記憶體管理</title><link>https://intervalrain.github.io/cs/os/memorymanagement/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>https://intervalrain.github.io/cs/os/memorymanagement/</guid><description>&lt;h1 id="準備中"&gt;準備中&lt;/h1&gt;</description></item><item><title>[計算機作業系統] 設備管理</title><link>https://intervalrain.github.io/cs/os/equipmentmanagement/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>https://intervalrain.github.io/cs/os/equipmentmanagement/</guid><description>&lt;h1 id="準備中"&gt;準備中&lt;/h1&gt;</description></item><item><title>[計算機作業系統] 進程管理</title><link>https://intervalrain.github.io/cs/os/processmanagement/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>https://intervalrain.github.io/cs/os/processmanagement/</guid><description>&lt;h1 id="進程管理"&gt;進程管理&lt;/h1&gt;
&lt;h2 id="進程與執行緒"&gt;進程與執行緒&lt;/h2&gt;
&lt;h3 id="1-進程process"&gt;1. 進程(process)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;進程是資源分配的基本單位。&lt;/li&gt;
&lt;li&gt;進程控制塊(Process Control Block, PCB)描述進程的基本訊息和運行狀態，所謂的創建進程和撤銷進程，都是指對 PCB 的操作。
&lt;img alt="PCB" loading="lazy" src="https://www.usna.edu/Users/cs/bilzor/ic411/calendar.php?key=c8bc3778e1e290e4a99e60360fa8c03a340b21ad&amp;type=class&amp;event=6"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-執行緒thread"&gt;2. 執行緒(thread)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;執行緒又稱線程，是獨立調度的基本單位。&lt;/li&gt;
&lt;li&gt;一個進程可以有多個執行緒，它們共享進程資源。&lt;/li&gt;
&lt;li&gt;以瀏覽器(browser)為例，瀏覽器進程有很多執行緒，如 HTTP 請求(request)、事件響應、渲染。執行緒的並行處理(concurrent)使得瀏覽器中點擊一個新的超連結從而發起 HTTP 請求時，瀏覽器還可以響應用戶的其它事件。
&lt;img alt="thread" loading="lazy" src="https://4.bp.blogspot.com/-QyEW1jszBJM/UnUsSC-mVOI/AAAAAAAAABY/Z94NgDcWTb4/s640/process-thread.png"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-區別"&gt;3. 區別&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;擁有資源
&lt;ul&gt;
&lt;li&gt;進程是資源分配的基本單位，但是執行緒不擁有資源，而是訪問隸屬進程的資源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;調度
&lt;ul&gt;
&lt;li&gt;執行緒是獨立調度的基本單位，在同一進程中，執行緒的切換不會引起進程切換，從一個進程中的執行緒切換到另一個進程中的執行緒時，才會進行進程的切換。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系統開銷
&lt;ul&gt;
&lt;li&gt;由於創建或撤銷進程時，系統都要為之分配或回收資源，如硬碟中的記憶體、I/O 設備等，所付出的開銷遠大於創建或撤銷執行緒時的開銷。&lt;/li&gt;
&lt;li&gt;同樣的，在進行進程切換時，涉及當前執行進程 CPU 環境的保存及新調度進程 CPU 環境的設置，而執行緒切換只需保存和設置少量暫存器的內容，開銷較小。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通訊
&lt;ul&gt;
&lt;li&gt;執行緒可以通過直接讀寫同一個進程中的數據進行通訊，但是進程的通訊需要借助 IPC(inter-process communication)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="進程狀態的切換"&gt;進程狀態的切換&lt;/h2&gt;
&lt;p&gt;&lt;img alt="process state" loading="lazy" src="https://jingtao.fun/images/%E8%AF%BB%E4%B9%A6-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20201102105129598.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就緒就態(ready)：等待被調度&lt;/li&gt;
&lt;li&gt;執行狀態(running)&lt;/li&gt;
&lt;li&gt;阻塞狀態(waiting)：等待資源
&lt;ul&gt;
&lt;li&gt;只有就緒狀態和執行狀態可以相互轉換，其它的都是單向轉換。就緒狀態的進程通過調度演算法從而獲得 CPU Time，轉為執行狀態；而執行狀態的進程，在分配給它的 CPU Time 片段用完之後就會轉為就緒狀態，等待下一次調度。&lt;/li&gt;
&lt;li&gt;阻塞狀態是缺少需要的資源從而由執行狀態轉換而來，但是該資源不包括 CPU Time, 缺少 CPU Time 會從執行狀態轉換為就緒狀態。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="進程調度演算法"&gt;進程調度演算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不同環境的調度演算法目標不同，因此需要針對不同環境來討論調度演算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1-批次處理系統batch-system"&gt;1. 批次處理系統(batch system)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;批次處理系統沒有太多的用戶操作，在該系統中，調度演算法目標是保証吞吐量和周轉時間(從提交到終止的時間)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="11-先來先服務first-come-first-served-fcfs"&gt;1.1 先來先服務(first-come first-served, FCFS)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;非搶占式的調度，按照請求的順序進行調度。&lt;/li&gt;
&lt;li&gt;有利於長作業，不利於短作業，因為短作業必須一直等待前面的長作業執行完畢才能執行，而長作業又需要執行很長時間，造成短作業等待時間過長&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="12-短作業優先shortest-job-first-sjf"&gt;1.2 短作業優先(shortest job first, SJF)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;非搶占式的調度算法，按估計運行時間最短的順序進行調度。&lt;/li&gt;
&lt;li&gt;長作業有可能會永遠做不完，處於一直等待短作業執行完畢的狀態。因為如果一直有短作業到來，那麼長作業永遠得不到調度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="13-最短剩餘時間優先shortest-remaining-time-next-srtn"&gt;1.3 最短剩餘時間優先(shortest remaining time next, SRTN)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;最短作業優先的搶占式版本，按剩餘運行時間的順序進行調度。當一個新的作業到達時，其整個運行時間與當前進程的剩餘時間作比較。如果新的進程需要的時間更少，則夠停當下進程，運行新的進程；否則則讓新的進程進入等待。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-交互式系統time-sharing-system"&gt;2. 交互式系統(time-sharing system)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;交互式系統有大量的用戶交互操作，在該系統中調度演算法的目標是快速地進行響應。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="21-時間片段輪轉robin-round-scheduling-rr"&gt;2.1 時間片段輪轉(robin round scheduling, RR)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;將所有就緒進程按 FCFS 的原則排成一個佇列，每次調度時，把 CPU 時間分配給佇首進程，該進程可以執行一個時間片段，當時間片段用完時，由計時器發出時鐘中斷，調度程序便停止該進程的執行，並將它送往就緒佇尾，同時繼續把 CPU 時間分配給佇首的進程。&lt;/li&gt;
&lt;li&gt;時間片段輪轉演算法的效率和時間片段的大小很有關係：
&lt;ul&gt;
&lt;li&gt;因為進程切換都要保存進程的訊息並且載入新進程的訊息，如果時間片段太小，會導致頻繁地切換進程，導致時間浪費。&lt;/li&gt;
&lt;li&gt;而如果時間片段過長，那麼實時性就不能得到保証。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="22-優先級調度priority-scheduling"&gt;2.2 優先級調度(priority scheduling)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;為每個進程分配一個優先級，按優先級進行調度。&lt;/li&gt;
&lt;li&gt;為了防止低優先級的進程永遠等不到調度，可以隨著時間的推移增加等待進程的優先級。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="23-多級反饋佇列multilevel-feedback-queue-scheduling-mlfq"&gt;2.3 多級反饋佇列(Multilevel Feedback-Queue Scheduling, MLFQ)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;一個進程需要執行 100 個時間片段，如果採用時間片段輪轉調度演算法，那麼需要交換 100 次。&lt;/li&gt;
&lt;li&gt;多級佇列是為這種需要連續執行多個時間片段的進程考慮，它設置了多個佇列，每個佇列時間片段大小都不同，例如 1, 2, 4, 8,&amp;hellip;。進程在第一個佇列沒執行完，就會被移到下一個佇列。這種方式下，之前的進程只需要交換 7 次。&lt;/li&gt;
&lt;li&gt;每個佇列優先權也不同，最上面的優先權最高。因此只有上一個佇列沒有進程在排隊，才能調度當前佇列上的進程。可以將這種調度算法看成是時間片段輪轉調度算法和優先級調度算法的結合。
&lt;img alt="MLFQ" loading="lazy" src="https://i.pinimg.com/736x/9e/56/96/9e5696a52f10453be9717470b28a44c7--round-robin-robins.jpg"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-實時系統real-time-system"&gt;3. 實時系統(real time system)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;實時系統要求一個請求在一個確定時間內得到響應。&lt;/li&gt;
&lt;li&gt;分為硬實時和軟實時，前者必須滿足絕對的截止時間，後者可以容忍一定的超時。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="進程同步"&gt;進程同步&lt;/h2&gt;
&lt;h3 id="1-臨界區"&gt;1. 臨界區&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;對臨界資源進行訪問的那段代碼稱為臨界區。&lt;/li&gt;
&lt;li&gt;為了互斥訪問臨界資源，每個進程在進入臨界區之前，需要先進行檢查。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-C++" data-lang="C++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// entry section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// crtical section;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// exit section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="2-同步與互斥synchronization-and-mutex"&gt;2. 同步與互斥(synchronization and mutex)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;同步(synchronization)：多個進程因為合作產生的直接制約關係，使得進程有一定的先後執行關係。&lt;/li&gt;
&lt;li&gt;互斥(mutual exclusion, mutex)：多個進程在同一時刻只有一個進程能進入臨界區。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-號誌semaphore"&gt;3. 號誌(Semaphore)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;號誌，或稱信號量，是一個整數變數，可以對其執行 down 和 up 操作，也就是常見的 P 和 V 操作。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;down&lt;/strong&gt;：如果號誌量大於 0，執行 -1 操作；如果號誌等於 0，進程睡眠，等待號誌大於 0。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;up&lt;/strong&gt;：對號誌執行 +1 操作，喚醒睡眠的進程讓其完成 down 操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;down 和 up 操作需要被設計成原語，不可分割，通常的做法是在執行這些操作的時候屏蔽中斷。&lt;br&gt;
如果號誌的取值只能為 0 或者 1，那麼就成為了互斥(mutex)，0 表示臨界區已經加鎖，1 表示臨界區解鎖。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-C++" data-lang="C++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;typedef&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; semaphore;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;semaphore mutex &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;P1&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; down(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// critical section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; up(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;P2&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; down(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// critical section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; up(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;使用號誌實現生產者-消費者問題&lt;/strong&gt;
&lt;img alt="producer-consumer-problem" loading="lazy" src="https://th.bing.com/th/id/R.dbbe36e7d63143d6defdab98ece8fff8?rik=J8NwPrcsGHP7jw&amp;pid=ImgRaw&amp;r=0"&gt;&lt;/p&gt;</description></item><item><title>[計算機作業系統] 概述</title><link>https://intervalrain.github.io/cs/os/intro/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>https://intervalrain.github.io/cs/os/intro/</guid><description>&lt;h1 id="作業系統"&gt;作業系統&lt;/h1&gt;
&lt;h2 id="簡介"&gt;簡介&lt;/h2&gt;
&lt;p&gt;&lt;img alt="computer os" loading="lazy" src="https://2.bp.blogspot.com/-gzomOqKpa74/VLPwd72Q8KI/AAAAAAAAk-E/mnLR8NAJfLY/s640/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2014-12-12%2B%E4%B8%8B%E5%8D%882.48.33-17.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;電腦系統主要可分成四個部分，或分成&lt;strong&gt;硬體(hardware)&lt;/strong&gt;、&lt;strong&gt;軟體(software)&lt;/strong&gt;、&lt;strong&gt;數據(data)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;硬體(hardware)：為系統提供基本的計算資源。
&lt;ol&gt;
&lt;li&gt;中央處理器(central processing unit, CPU)&lt;/li&gt;
&lt;li&gt;記憶體(memory)&lt;/li&gt;
&lt;li&gt;I/O 裝置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;應用程式(Application programs)：定義資源如何用來解決使用者的計算問題。&lt;/li&gt;
&lt;li&gt;使用者(users)&lt;/li&gt;
&lt;li&gt;作業系統(Operating system, OS)：&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作業系統(Operating system, OS) 是管理電腦硬體與軟體資源的電腦程式，同時也是電腦系統的核心與基石。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS 最主要的兩個功能是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;資源分配：根據需求調配資源分配率(resource utilization)與效能(performance)&lt;/li&gt;
&lt;li&gt;監控使用者程式的執行，避免不正常的運作造成對系統的危害。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個標準的 PC 作業系統應該提供以下的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行程管理(Processing management)&lt;/li&gt;
&lt;li&gt;記憶體管理(Memory management)&lt;/li&gt;
&lt;li&gt;檔案系統(File system)&lt;/li&gt;
&lt;li&gt;網路通訊(Networking)&lt;/li&gt;
&lt;li&gt;安全機制(Security)&lt;/li&gt;
&lt;li&gt;使用者介面(User interface)&lt;/li&gt;
&lt;li&gt;驅動程式(Device drivers)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pc-基本特徵"&gt;PC 基本特徵&lt;/h2&gt;
&lt;h3 id="1-並行計算concurrent-computing"&gt;1. 並行計算(Concurrent computing)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Concurrent computing 是指宏觀上在一段時間內能同時運行多個進程，微觀上是交替發生的；而&lt;strong&gt;平行計算(parallel computing)&lt;/strong&gt; 則指同一個時間內能運行多個指令。&lt;/li&gt;
&lt;li&gt;平行計算需要硬體支持，如多線程(multi-thread)、多核處理器(multi-core processor)或者分散式計算機系統(distributed OS)。&lt;/li&gt;
&lt;li&gt;作業系統通過引入進程(process)與線程(thread)，使程式能夠並行運作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-分享sharing"&gt;2. 分享(Sharing)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;共享是指系統中的資源可以被多個並行進程共同使用。&lt;/li&gt;
&lt;li&gt;有兩種共享方式：互斥共享(mutual exclusion)與同時訪問(time sharing)。&lt;/li&gt;
&lt;li&gt;互斥共享的資源稱為臨界資源(critical resources)，例如印表機等，在同一時間內只允許一個進程訪問，需要用同步機制來實現互斥訪問。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-虛擬virtual"&gt;3. 虛擬(Virtual)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;虛擬技術把一個物理實體轉換為多個邏輯實體。&lt;/li&gt;
&lt;li&gt;主要有兩種虛擬技術：分時技術(time sharing)、空間分享技術。&lt;/li&gt;
&lt;li&gt;多個進程能在同一個處理器上並行處理使用了分時技術，讓每個進程輪流占用處理器，每次只執行一小個時間片段並快速切換。&lt;/li&gt;
&lt;li&gt;虛擬記憶體使用了空間分享技術，它將物理記憶體抽象化為地址空間，每個進程都有各自的地址空間。地址空間的頁被映射到物理記憶體中，地址空間的頁並不需要全部在物理記憶體中，當使用到一個沒有物理記憶體的頁時，執行頁面置換演算法，將該頁置換到記憶體中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="4-異步asynchronous"&gt;4. 異步(Asynchronous)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;異步指進程不是一次性執行完畢，而是走走停停，以不可知的速度向前推進。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="基本功能"&gt;基本功能&lt;/h2&gt;
&lt;h3 id="1-進程管理process-management"&gt;1. 進程管理(Process management)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;進程管理、進程同步、進程通信、死鎖處理、處理調度等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-記憶體管理memory-management"&gt;2. 記憶體管理(Memory management)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;記憶體分配、地址映射、記憶體保護與共享、虛擬記憶體等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-文件管理file-management"&gt;3. 文件管理(File management)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文件儲存空間的管理、目錄管理、文件讀寫管理和保護等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="4-設備管理equipment-management"&gt;4. 設備管理(Equipment management)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;完成用戶的 I/O 請求，方便用戶使用各種設備，並提高設備的利用率。&lt;/li&gt;
&lt;li&gt;主要包含緩衝管理、設備分配、設備處理、虛擬設備等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="系統調用"&gt;系統調用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果一個進程在用戶模式(user mode)需要使用內核模式(kernel mode)的功能，就進行系統調用從而陷入內核，由作業系統代為完成。
&lt;img alt="interface" loading="lazy" src="https://camo.githubusercontent.com/e6e9338fcb2f8c849b5ed9798862d27937d80c94721948dd87c5dec1e739c2c6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f74475056302e706e67"&gt;&lt;/li&gt;
&lt;li&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Linux 的系統調用主要有以下這些：&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Task&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Commands&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;進程控制&lt;/td&gt;
&lt;td&gt;fork(); exit(); wait();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;進程通信&lt;/td&gt;
&lt;td&gt;pipe(); shmget(); mmap();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件操作&lt;/td&gt;
&lt;td&gt;open(); read(); write();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;設備操作&lt;/td&gt;
&lt;td&gt;ioctl(); read(); write();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;訊息維護&lt;/td&gt;
&lt;td&gt;getpid(); alarm(); sleep();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安全&lt;/td&gt;
&lt;td&gt;chmod(); umask(); chown();&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="內核與微內核"&gt;內核與微內核&lt;/h2&gt;
&lt;p&gt;&lt;img alt="ring" loading="lazy" src="https://th.bing.com/th/id/R.859db91aeb8ec96109d43097bd911459?rik=lA7Jg6HrEIuyFA&amp;riu=http%3a%2f%2fresources.infosecinstitute.com%2fwp-content%2fuploads%2fKernelDebugging-03012013.jpg&amp;ehk=XDpXoi61cf6s%2fX4BOz3ghmFHsUIdfRiN8q%2f82rDn8%2fM%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0"&gt;&lt;/p&gt;</description></item><item><title>[計算機作業系統] 鏈接</title><link>https://intervalrain.github.io/cs/os/link/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>https://intervalrain.github.io/cs/os/link/</guid><description>&lt;h1 id="準備中"&gt;準備中&lt;/h1&gt;</description></item><item><title>[ML] introduction</title><link>https://intervalrain.github.io/ml/lec0/</link><pubDate>Sun, 19 Jun 2022 18:18:52 +0800</pubDate><guid>https://intervalrain.github.io/ml/lec0/</guid><description>Introduction to Machine Learning</description></item><item><title>[Life] Some change of road to SWE</title><link>https://intervalrain.github.io/life/nikita_kothari/</link><pubDate>Tue, 14 Jun 2022 22:43:59 +0800</pubDate><guid>https://intervalrain.github.io/life/nikita_kothari/</guid><description>Suggestion from Nikita Kothari at LinkedIn</description></item><item><title>[C++] The C++ Standard Template Library(STL) - deque</title><link>https://intervalrain.github.io/c++/stl_deque/</link><pubDate>Sun, 12 Jun 2022 01:36:18 +0800</pubDate><guid>https://intervalrain.github.io/c++/stl_deque/</guid><description>C++ 中 STL 的 deque 函式與使用範例</description></item><item><title>[C++] Custom Comparator</title><link>https://intervalrain.github.io/c++/custom_comparator/</link><pubDate>Sat, 11 Jun 2022 10:07:49 +0800</pubDate><guid>https://intervalrain.github.io/c++/custom_comparator/</guid><description>C++ 中陣列與優先佇列的自定義排序使用方法</description></item><item><title>[C++] The C++ Standard Template Library(STL) - pair</title><link>https://intervalrain.github.io/c++/stl_pair/</link><pubDate>Thu, 02 Jun 2022 01:23:15 +0800</pubDate><guid>https://intervalrain.github.io/c++/stl_pair/</guid><description>C++ 中 STL 的 pair 的函式與使用範例</description></item><item><title>[VHDL] HDLbits 1 - Getting Started</title><link>https://intervalrain.github.io/verilog/hdlbits1/</link><pubDate>Sat, 28 May 2022 00:10:20 +0800</pubDate><guid>https://intervalrain.github.io/verilog/hdlbits1/</guid><description>Verilog tutorial</description></item><item><title>[VHDL] HDLbits 2 - Verilog Language</title><link>https://intervalrain.github.io/verilog/hdlbits2/</link><pubDate>Sat, 28 May 2022 00:10:20 +0800</pubDate><guid>https://intervalrain.github.io/verilog/hdlbits2/</guid><description>Verilog tutorial</description></item><item><title>[VHDL] HDLbits 3 - Circuits</title><link>https://intervalrain.github.io/verilog/hdlbits3/</link><pubDate>Sat, 28 May 2022 00:10:20 +0800</pubDate><guid>https://intervalrain.github.io/verilog/hdlbits3/</guid><description>Verilog tutorial</description></item><item><title>[VHDL] HDLbits 4 - Verification: Reading Simulations</title><link>https://intervalrain.github.io/verilog/hdlbits4/</link><pubDate>Sat, 28 May 2022 00:10:20 +0800</pubDate><guid>https://intervalrain.github.io/verilog/hdlbits4/</guid><description>Verilog tutorial</description></item><item><title>[VHDL] HDLbits 5 - Verification: Writing Testbenches</title><link>https://intervalrain.github.io/verilog/hdlbits5/</link><pubDate>Sat, 28 May 2022 00:10:20 +0800</pubDate><guid>https://intervalrain.github.io/verilog/hdlbits5/</guid><description>Verilog tutorial</description></item><item><title>[VHDL] HDLbits 6 - CS450</title><link>https://intervalrain.github.io/verilog/hdlbits6/</link><pubDate>Sat, 28 May 2022 00:10:20 +0800</pubDate><guid>https://intervalrain.github.io/verilog/hdlbits6/</guid><description>Verilog tutorial</description></item><item><title>[TCAD] 模擬收斂問題</title><link>https://intervalrain.github.io/device/simulationconvergece/</link><pubDate>Wed, 25 May 2022 22:52:15 +0800</pubDate><guid>https://intervalrain.github.io/device/simulationconvergece/</guid><description>TCAD simulation convergence problem</description></item><item><title>[VHDL] Verilog Hardware Description Language</title><link>https://intervalrain.github.io/verilog/intro/</link><pubDate>Sun, 01 May 2022 17:37:22 +0800</pubDate><guid>https://intervalrain.github.io/verilog/intro/</guid><description>&lt;h1 id="1-verilog-hdl"&gt;1 Verilog HDL&lt;/h1&gt;
&lt;h2 id="11-verilog-簡介"&gt;1.1 Verilog 簡介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一套硬體描述語言
&lt;ul&gt;
&lt;li&gt;輔助設計&lt;strong&gt;數位系統&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;描述電路的行為&lt;/li&gt;
&lt;li&gt;電子自動化工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;類似C語言的硬體描述語言
&lt;ul&gt;
&lt;li&gt;易學、容易接受&lt;/li&gt;
&lt;li&gt;高階行為描述&lt;/li&gt;
&lt;li&gt;切勿使用軟體思維(循序)撰寫(硬體描述語言多是並行的)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援多種硬體層級的描述方式
&lt;ul&gt;
&lt;li&gt;從低階到高階模式&lt;/li&gt;
&lt;li&gt;依照不同的方法設計&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支援階層式的設計方法
&lt;ul&gt;
&lt;li&gt;樹狀式的設計結構&lt;/li&gt;
&lt;li&gt;由繁化簡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="12-verilog-的模型"&gt;1.2 Verilog 的模型&lt;/h2&gt;
&lt;h3 id="121-電晶體層級"&gt;1.2.1 電晶體層級&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Transistor Level&lt;/li&gt;
&lt;li&gt;或低階交換層次模型(Switch Level Model)&lt;/li&gt;
&lt;li&gt;Verilog 最低階的層次模型&lt;/li&gt;
&lt;li&gt;電路是由開關與電晶體所組成&lt;/li&gt;
&lt;li&gt;一般不會採取低階的層級來進行設計&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="122-邏輯閘層級"&gt;1.2.2 邏輯閘層級&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gate Level&lt;/li&gt;
&lt;li&gt;使用基本的邏輯閘元件&lt;/li&gt;
&lt;li&gt;AND、OR、NOT&lt;/li&gt;
&lt;li&gt;邏輯電路圖&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="123-資料流層級"&gt;1.2.3 資料流層級&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Data Flow Level&lt;/li&gt;
&lt;li&gt;描述電路中資料的處理方式&lt;/li&gt;
&lt;li&gt;資料如何在電路中運算及傳送&lt;/li&gt;
&lt;li&gt;輸入持續驅動輸出&lt;/li&gt;
&lt;li&gt;運算式
&lt;ul&gt;
&lt;li&gt;如：&lt;code&gt;out = a + b + c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="124-行為模型"&gt;1.2.4 行為模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Behavior Level&lt;/li&gt;
&lt;li&gt;Verilog 最高階的層次模型&lt;/li&gt;
&lt;li&gt;不需考慮硬體元件的特型，只需放在模組的功能描述&lt;/li&gt;
&lt;li&gt;很像 C 語言&lt;/li&gt;
&lt;li&gt;合成軟體工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="125-結構式模型"&gt;1.2.5 結構式模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Structure Level&lt;/li&gt;
&lt;li&gt;引用硬體模組的模式&lt;/li&gt;
&lt;li&gt;類似邏輯閘層次模型&lt;/li&gt;
&lt;li&gt;支援階層式設計法
&lt;ul&gt;
&lt;li&gt;將複雜電路分為層狀結構&lt;/li&gt;
&lt;li&gt;架構上類似樹狀結構
&lt;ul&gt;
&lt;li&gt;Bottom-up：元件→子模組→設計目標&lt;/li&gt;
&lt;li&gt;Top-Down：設計目標→子模組→元件&lt;/li&gt;
&lt;li&gt;Mixed：設計目標→子模組←元件(常用於大型複雜系統)
&lt;ul&gt;
&lt;li&gt;\(
\boxed{\text{Full Adder}}
\begin{cases}
\boxed{\text{Half Adder}}
\begin{cases}
\boxed{\text{XOR}}\\
\boxed{\text{AND}}
\end{cases}\\
\boxed{\text{Half Adder}}
\begin{cases}
\boxed{\text{XOR}}\\
\boxed{\text{AND}}
\end{cases}\\
\boxed{\text{OR}}
\end{cases}\\
\text{設計目標}\qquad\qquad\text{子模組}\qquad\text{元件}
\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="13-verilog-語法詞彙"&gt;1.3 Verilog 語法詞彙&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由一連串的標記(token)所組成
&lt;ul&gt;
&lt;li&gt;識別字(identifiers)&lt;/li&gt;
&lt;li&gt;關鍵字(keywords)&lt;/li&gt;
&lt;li&gt;字串(strings)&lt;/li&gt;
&lt;li&gt;註解(comments)&lt;/li&gt;
&lt;li&gt;空白(whitespace)&lt;/li&gt;
&lt;li&gt;數值(numbers)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="131-識別字identifiers"&gt;1.3.1 識別字(identifiers)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;描述電路行為所使用的自訂物件
&lt;ul&gt;
&lt;li&gt;不違反命名規則，工程師自行定義的物件名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命名規則
&lt;ul&gt;
&lt;li&gt;字母、數字、底線&lt;code&gt;_&lt;/code&gt;或是錢字號&lt;code&gt;$&lt;/code&gt;所組合而成。&lt;/li&gt;
&lt;li&gt;開頭只能使用字母或底線。&lt;/li&gt;
&lt;li&gt;識別字是有&lt;strong&gt;大小寫&lt;/strong&gt;之分的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;舉例
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Shift_reg_b (Valid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;_bus123 (Valid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$error_condition (Invalid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;NT$899 (Valid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;3_bit_data (Invalid)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="132-關鍵字keywords"&gt;1.3.2 關鍵字(keywords)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;描述電路語法所保留的一組特殊名稱的標記&lt;/li&gt;
&lt;li&gt;定義語言的結構來描述電路
&lt;ul&gt;
&lt;li&gt;輸入(input)、輸出(output)&lt;/li&gt;
&lt;li&gt;資料型態、電路行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有關鍵字都必須使用小寫表示&lt;/li&gt;
&lt;li&gt;不可當作識別字使用&lt;/li&gt;
&lt;li&gt;常見關鍵字
\(\begin{array}{|l|l|l|l|l|l|}\hline
\text{always}&amp;amp;\text{and}&amp;amp;\text{assign}&amp;amp;\text{begin}&amp;amp;\text{buf}&amp;amp;\text{bufif0}\\\hline
\text{bufif1}&amp;amp;\text{case}&amp;amp;\text{casex}&amp;amp;\text{casez}&amp;amp;\text{cmos}&amp;amp;\text{default}\\\hline
\text{defparam}&amp;amp;\text{else}&amp;amp;\text{end}&amp;amp;\text{endcase}&amp;amp;\text{endfunction}&amp;amp;\text{endmodule}\\\hline
\text{endtask}&amp;amp;\text{event}&amp;amp;\text{for}&amp;amp;\text{forever}&amp;amp;\text{fork}&amp;amp;\text{function}\\\hline
\text{highz0}&amp;amp;\text{highz1}&amp;amp;\text{if}&amp;amp;\text{initial}&amp;amp;\text{inout}&amp;amp;\text{input}\\\hline
\text{integer}&amp;amp;\text{join}&amp;amp;\text{module}&amp;amp;\text{nand}&amp;amp;\text{negedge}&amp;amp;\text{nmos}\\\hline
\text{nor}&amp;amp;\text{not}&amp;amp;\text{notif0}&amp;amp;\text{notif1}&amp;amp;\text{or}&amp;amp;\text{output}\\\hline
\text{parameter}&amp;amp;\text{pmos}&amp;amp;\text{posedge}&amp;amp;\text{pull0}&amp;amp;\text{pull1}&amp;amp;\text{pulldown}\\\hline
\text{pullup}&amp;amp;\text{rcmos}&amp;amp;\text{real}&amp;amp;\text{realtime}&amp;amp;\text{reg}&amp;amp;\text{repeat}\\\hline
\text{rnmos}&amp;amp;\text{rpmos}&amp;amp;\text{rtran}&amp;amp;\text{rtranif0}&amp;amp;\text{rtranif1}&amp;amp;\text{strong0}\\\hline
\text{string1}&amp;amp;\text{supply0}&amp;amp;\text{supply1}&amp;amp;\text{task}&amp;amp;\text{time}&amp;amp;\text{tran}\\\hline
\text{tranif0}&amp;amp;\text{tranif1}&amp;amp;\text{tri}&amp;amp;\text{tri0}&amp;amp;\text{tri1}&amp;amp;\text{triand}\\\hline
\text{trior}&amp;amp;\text{trireg}&amp;amp;\text{wait}&amp;amp;\text{wand}&amp;amp;\text{weak0}&amp;amp;\text{weak1}\\\hline
\text{while}&amp;amp;\text{wire}&amp;amp;\text{wor}&amp;amp;\text{xnor}&amp;amp;\text{xor}\\\hline
\end{array}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="133-字串strings"&gt;1.3.3 字串(strings)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一連串字元(character)組成的單一個體&lt;/li&gt;
&lt;li&gt;可含有字母、數字、及一些特殊字元&lt;/li&gt;
&lt;li&gt;字串的所有字元必須在同一行上，並在&lt;strong&gt;雙引號&lt;/strong&gt;之間&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="134-註解comments"&gt;1.3.4 註解(comments)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程式碼中加入說明文字
&lt;ul&gt;
&lt;li&gt;可讀性(readability)&lt;/li&gt;
&lt;li&gt;文件化(documentation)&lt;/li&gt;
&lt;li&gt;版權宣告(license declaration)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以&lt;code&gt;//&lt;/code&gt;開頭的單行註解(one-line comment)&lt;/li&gt;
&lt;li&gt;以&lt;code&gt;/*&lt;/code&gt;為開頭，並以&lt;code&gt;*/&lt;/code&gt;為結尾的多行註解(multiple-line comment)&lt;/li&gt;
&lt;li&gt;多行註解不支援巢狀結構&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="135-空白whitespace"&gt;1.3.5 空白(whitespace)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;區隔不同物件&lt;/li&gt;
&lt;li&gt;空格(blank spaces，\b)&lt;/li&gt;
&lt;li&gt;欄位(tabs，\t)&lt;/li&gt;
&lt;li&gt;換行(newlines，\n)&lt;/li&gt;
&lt;li&gt;除字串內空白，註解與空白在編譯與合成時會被忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="136-數值numbers"&gt;1.3.6 數值(numbers)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Verilog 有兩種數值表示法
&lt;ul&gt;
&lt;li&gt;固定長度(sized): 定義位元寬度
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;size&amp;gt;'&amp;lt;bsase format&amp;gt;&amp;lt;number&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt;：十進位來表示此數的位元數(bits)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;base format&amp;gt;&lt;/code&gt;：定義進制
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;'H&lt;/code&gt;|&lt;code&gt;'h&lt;/code&gt;：十六進制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'D&lt;/code&gt;|&lt;code&gt;'d&lt;/code&gt;：十進制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'O&lt;/code&gt;|&lt;code&gt;'p&lt;/code&gt;：八進制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'B&lt;/code&gt;|&lt;code&gt;'b&lt;/code&gt;：二進制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;：用&lt;code&gt;&amp;lt;base format&amp;gt;&lt;/code&gt;來表示數值&lt;/li&gt;
&lt;li&gt;若為負號，將&lt;code&gt;-&lt;/code&gt;放在&lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt;前面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;舉例：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;18'h47CB&lt;/code&gt;：18 bits 的十六進位數 47CB&lt;/li&gt;
&lt;li&gt;&lt;code&gt;13'h47CB&lt;/code&gt;：13 bits 的十六進位數(因未給定高位元自動補0) 7CB&lt;/li&gt;
&lt;li&gt;&lt;code&gt;12'd1023&lt;/code&gt;：12 bits 的十進位數 1023&lt;/li&gt;
&lt;li&gt;&lt;code&gt;9'o723&lt;/code&gt;：9 bits 的八進位數 723&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5'b11101&lt;/code&gt;：5bits 的二進位數 11101&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5'b1xx01&lt;/code&gt;：含有 unknown values 的表示法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不定長度(unsized): 未定義位元寬度
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;&lt;code&gt;&amp;lt;base format&amp;gt;&amp;lt;number&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;不使用&lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt;規定位元長度&lt;/li&gt;
&lt;li&gt;使用 HDL 編譯器內定的長度(32bit的寬度)&lt;/li&gt;
&lt;li&gt;沒有寫明&lt;code&gt;&amp;lt;base format&amp;gt;&lt;/code&gt;，則&lt;strong&gt;內定為十進制&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;舉例：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;'h47CB&lt;/code&gt;：32 bits 的十六進位數 47CB&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1023&lt;/code&gt;：32 bits 的十進位數 1023&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'o723&lt;/code&gt;：32 bits 的八進位數 723&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'b11101&lt;/code&gt;：32 bits 的二進位數 11101&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Verilog 有四種數值位準(value level)
&lt;ul&gt;
&lt;li&gt;\(\begin{array}{|c|l|}\hline
\text{數值位準}&amp;amp;\text{實際電路狀態}\\\hline
\text{0}&amp;amp;\text{邏輯0，假(false)，接地}\\\hline
\text{1}&amp;amp;\text{邏輯1，真(true)，接壓電源}\\\hline
\text{x}&amp;amp;\text{不確定值(unknown value)}\\\hline
\text{z}&amp;amp;\text{高阻抗(high impedance)，浮接狀態(floating state)}\\\hline
\end{array}
\)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="14-verilog-資料物件與型態"&gt;1.4 Verilog 資料物件與型態&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;資料物件(data objects)
&lt;ul&gt;
&lt;li&gt;描述行為過程中所使用的訊號載具&lt;/li&gt;
&lt;li&gt;一個物件經過處理再傳到另一個物件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;資料型態(data type)
&lt;ul&gt;
&lt;li&gt;定義資料物件的類型&lt;/li&gt;
&lt;li&gt;接線、暫存器、參數等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="141-接線nets"&gt;1.4.1 接線(Nets)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接線(nets)是連接實體元件的連接線&lt;/li&gt;
&lt;li&gt;要被驅動才能改變其內部的值&lt;/li&gt;
&lt;li&gt;最主要的關鍵字是 &lt;code&gt;wire&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;一個位元的純量(scalar)&lt;/li&gt;
&lt;li&gt;多位元長度的向量(vector)&lt;/li&gt;
&lt;li&gt;內定值為 &lt;code&gt;z&lt;/code&gt;(高阻抗、浮接)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;宣告方式
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Verilog" data-lang="Verilog"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;wire&lt;/span&gt; w; &lt;span style="color:#75715e"&gt;// 宣告一條接線，命名為w，內定預設值為z
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;wire&lt;/span&gt; x &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;&amp;#39;b0&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 宣告一條接線，命名為x，並指定x為邏輯0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;wire&lt;/span&gt; a, b, c &lt;span style="color:#75715e"&gt;// 宣告三條接線，命名為a, b, c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="142-暫存器registers"&gt;1.4.2 暫存器(Registers)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;抽象的資料儲存物件(有別於實體暫存器 D flip-flop)&lt;/li&gt;
&lt;li&gt;保留一個數值直到下一次指定新值為止&lt;/li&gt;
&lt;li&gt;觀念類似 C 語言中的變數&lt;/li&gt;
&lt;li&gt;主要的關鍵字是 &lt;code&gt;reg&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;一個位元的純量(scalar)&lt;/li&gt;
&lt;li&gt;多位元長度的向量(vector)&lt;/li&gt;
&lt;li&gt;內定值為 &lt;code&gt;x&lt;/code&gt;(未知)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\(\begin{array}{|l|l|}\hline
\text{reg}&amp;amp;\text{可變動位元寬度的無號整數(unsigned integer variable)}\\\hline
\text{integer}&amp;amp;\text{32位元寬度的有號整數(signed 32-bit integer variable)，}\\
&amp;amp;\text{算術運算產生2補數結果(2&amp;rsquo;s complement results))}\\\hline
\text{real}&amp;amp;\text{雙倍精確度之有號浮點數}\\
&amp;amp;\text{(signed floating-point variable with double precision)}\\\hline
\text{time}&amp;amp;\text{64位元寬度的無號整數(unsigned 64-bit integer variable)}\\\hline
\end{array}\)
&lt;ul&gt;
&lt;li&gt;設計電路請以&lt;code&gt;reg&lt;/code&gt;為主，其他類型合成器可能不支援。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;宣告方式
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Verilog" data-lang="Verilog"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;reg&lt;/span&gt; a; &lt;span style="color:#75715e"&gt;// 宣告 1 個 1 位元暫存器為 a，定位值為 1 位元的 x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;reg&lt;/span&gt; x, y; &lt;span style="color:#75715e"&gt;// 宣告 2 個宣存器，命名為 x, y
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;integer&lt;/span&gt; count; &lt;span style="color:#75715e"&gt;// 宣告 1 個整數為 count，值可以為正負
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;real&lt;/span&gt; fraction; &lt;span style="color:#75715e"&gt;// 宣告 1 個浮點數為 fraction，值含小數點
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="143-純量與向量scalar-and-vector"&gt;1.4.3 純量與向量(scalar and vector)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;純量(scalar)
&lt;ul&gt;
&lt;li&gt;一個位元的物件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;向量(vector)
&lt;ul&gt;
&lt;li&gt;多個位元的物件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接線(ex. wire) 與 reg
&lt;ul&gt;
&lt;li&gt;內定一位元&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[大數字:小數字]&lt;/code&gt;、&lt;code&gt;[小數字:大數字]&lt;/code&gt;→&lt;code&gt;[MSB:LSB]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;宣告方式
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Verilog" data-lang="Verilog"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;wire&lt;/span&gt; a; &lt;span style="color:#75715e"&gt;// 宣告 1 個 1-bits 接線
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;wire&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] x; &lt;span style="color:#75715e"&gt;// 宣告 1 個 5-bits 接線
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;reg&lt;/span&gt; b; &lt;span style="color:#75715e"&gt;// 宣告 1 個 1-bits 暫存器
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;reg&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;] y; &lt;span style="color:#75715e"&gt;// 宣告 1 個 8-bits 暫存器
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;reg&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;31&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] z; &lt;span style="color:#75715e"&gt;// 宣告 1 個 32-bits 暫存器
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="144-陣列array"&gt;1.4.4 陣列(Array)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多個暫存器、接線的聚合體&lt;/li&gt;
&lt;li&gt;索引值(index)定義聚合體中的個別物件&lt;/li&gt;
&lt;li&gt;支援多維度的陣列&lt;/li&gt;
&lt;li&gt;記憶體(memory)、暫存器檔案(register file)&lt;/li&gt;
&lt;li&gt;陣列中暫存器、接線的個數
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[大數字:小數字]&lt;/code&gt;、&lt;code&gt;[小數字:大數字]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;宣告方式
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Verilog" data-lang="Verilog"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// mem_block 是一個包含 128 個暫存器的陣列，
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 每個暫存器皆為 32 位元寬
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;reg&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;31&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] mem_block [&lt;span style="color:#ae81ff"&gt;127&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// mem_2D 是一個 2 維 4x64 的暫存器陣列，
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 每個暫存器皆為 8 位元寬
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;reg&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] mem_2D [&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;][&lt;span style="color:#ae81ff"&gt;63&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="145-參數parameter"&gt;1.4.5 參數(parameter)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定義編譯合成電路時的常數&lt;/li&gt;
&lt;li&gt;每次編譯合成前更改，編譯合成器會根據參數值產生相對應的電路&lt;/li&gt;
&lt;li&gt;重複使用&lt;/li&gt;
&lt;li&gt;關鍵字 &lt;code&gt;parameter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;宣告方式
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Verilog" data-lang="Verilog"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;parameter&lt;/span&gt; width &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;wire&lt;/span&gt; [width&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] a, b; &lt;span style="color:#75715e"&gt;// 接線 a 和 b 的位元寬度，會隨著參數值的改變而變動
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;reg&lt;/span&gt; [width&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] y; &lt;span style="color:#75715e"&gt;// 暫存器 y 的位元寬度，會隨著參數值的改變而變動
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="15-模組module埠port"&gt;1.5 模組(Module)、埠(Port)&lt;/h2&gt;
&lt;h3 id="151-模組module"&gt;1.5.1 模組(Module)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一個電路區塊、可以由其他模組組成&lt;/li&gt;
&lt;li&gt;連接模組時
&lt;ul&gt;
&lt;li&gt;考慮模組的輸入與輸出介面&lt;/li&gt;
&lt;li&gt;不需要考慮模組內部的詳細電路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;電路設計時
&lt;ul&gt;
&lt;li&gt;只修改模組內部電路&lt;/li&gt;
&lt;li&gt;不會改變電路外部及周遭的模組&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模組內部的電路描述可包含
&lt;ul&gt;
&lt;li&gt;訊號資料型態宣告&lt;/li&gt;
&lt;li&gt;引用其他模組(邏輯閘)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assign&lt;/code&gt; 資料處理模型之描述&lt;/li&gt;
&lt;li&gt;&lt;code&gt;always&lt;/code&gt; 行為模型之描述&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函數(function)&lt;/strong&gt; 與 &lt;strong&gt;任務(task)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;除訊號宣告需先描述，其他部分撰寫的順序，不影響電路行為&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模組宣告
&lt;ul&gt;
&lt;li&gt;以關鍵字 &lt;code&gt;module&lt;/code&gt; 為開頭，在其後加一個識別用的模組名稱(module name)&lt;/li&gt;
&lt;li&gt;再來是&lt;strong&gt;輸入與輸出埠列&lt;/strong&gt;(module terminal list)和埠列宣告，接著是模組內部關於電路的描述&lt;/li&gt;
&lt;li&gt;以關鍵字 &lt;code&gt;endmodule&lt;/code&gt; 做為模組結尾&lt;/li&gt;
&lt;li&gt;支援階層`式的設計概念&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Verilog" data-lang="Verilog"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;module&lt;/span&gt; module_name(terminal_list)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;port_declaration(...)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;param_declaration(optional)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data_type_declaration(&lt;span style="color:#66d9ef"&gt;wire&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;reg&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;other_module(logic_gate)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;assign&lt;/span&gt; data_flow_model
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;always&lt;/span&gt; behavior_model
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;task&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="152-埠port"&gt;1.5.2 埠(port)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;終端點、模組與外界溝通的介面接點(門)&lt;/li&gt;
&lt;li&gt;一個模組通常是經由一串的輸入輸出埠稱為埠列(terminal list)來與外界溝通&lt;/li&gt;
&lt;li&gt;若模組與外界不需要溝通，則埠列也就不存在(封閉系統)
&lt;ul&gt;
&lt;li&gt;測試環境(test bench)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;埠的宣告
&lt;ul&gt;
&lt;li&gt;埠的宣告可分為輸入埠(input)、輸出埠(output)、雙向埠(inout)三種。&lt;/li&gt;
&lt;li&gt;埠的宣告型態內定為接線(net)的 &lt;code&gt;wire&lt;/code&gt;，若需要將訊號儲存起來則埠號型態須宣告成暫存器 &lt;code&gt;reg&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;輸入埠和雙向埠只能是接線(net)，&lt;strong&gt;不可宣告成暫存器&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;輸出埠可以宣告成接線(net)或暫存器。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Verilog" data-lang="Verilog"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;module&lt;/span&gt; full_adder(a, b, carry, sum); &lt;span style="color:#75715e"&gt;// 埠列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;input&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] a, b; &lt;span style="color:#75715e"&gt;// 輸入埠(4位元向量)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;input&lt;/span&gt; carry &lt;span style="color:#75715e"&gt;// 輸入埠(1位元純量)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;output&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] sum; &lt;span style="color:#75715e"&gt;// 輸出埠(5位元向量)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;reg&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] sum; &lt;span style="color:#75715e"&gt;// 因輸出sum需儲存資料，故宣告成暫存器
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="16-邏輯閘層次模型"&gt;1.6 邏輯閘層次模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;利用關鍵字即可引用基本的邏輯閘元件&lt;/li&gt;
&lt;li&gt;基本的邏輯閘關鍵字
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nand&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xnor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="161-多個輸入邏輯閘multiple-input-gates"&gt;1.6.1 多個輸入邏輯閘(Multiple-Input Gates)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt;、&lt;code&gt;nand&lt;/code&gt;、&lt;code&gt;or&lt;/code&gt;、&lt;code&gt;nor&lt;/code&gt;、&lt;code&gt;xor&lt;/code&gt;、&lt;code&gt;xnor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;具有多個純量(scalar)的輸入，但是只有一個純量的輸出&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多個輸入邏輯閘的輸出總是放在埠列(post list)的第一個位置，而輸入則是跟在輸出的後面&lt;/strong&gt;
輸出必須透過接線(wire)連接，輸入無規定&lt;/li&gt;
&lt;li&gt;多個輸入邏輯閘的別名可以加或是不加&lt;/li&gt;
&lt;li&gt;使用方法
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Verilog" data-lang="Verilog"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gate_type instance(out, in_1, in_2, in_3, ..., in_n);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gate_type inst_1(out_1, in1_1, in1_2, in1_3, ..., in1_n),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; inst_2(out_2, in2_1, in2_2, in2_3, ..., in2_n),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; inst_3(out_3, in3_1, in3_2, in3_3, ..., in3_n),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; inst_m(out_m, in_m1, in_m2, in_m3, ..., in_mn);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;\(\begin{array}{ccc}
\underbrace{\text{a, b, c, d}}_{\text{輸入}}
\rightarrow
\boxed{\text{Multiple-Input Gate}}
\rightarrow
\underbrace{\text{e}} _{\text{輸出}}
\end{array}
\)&lt;/li&gt;
&lt;li&gt;\(\text{and\quad a1(}
\underbrace{\text{e}}_{\text{輸出}}
\text{, }
\underbrace{\text{a, b, c, d}} _{\text{輸入}}
\text{);}
\)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="162-多個輸出邏輯閘multiple-output-gates"&gt;1.6.2 多個輸出邏輯閘(Multiple-Output Gates)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;not&lt;/code&gt;、&lt;code&gt;buf&lt;/code&gt;&lt;/p&gt;</description></item><item><title>[Java] 淺談 Java MVC</title><link>https://intervalrain.github.io/java/java_mvc/</link><pubDate>Fri, 29 Apr 2022 15:38:18 +0800</pubDate><guid>https://intervalrain.github.io/java/java_mvc/</guid><description>Introduction to Java MVC.</description></item><item><title>[IT] Introduction to Microservices, Docker and Kubernetes</title><link>https://intervalrain.github.io/it/microservices_docker_kubernetes/</link><pubDate>Fri, 29 Apr 2022 11:40:10 +0800</pubDate><guid>https://intervalrain.github.io/it/microservices_docker_kubernetes/</guid><description>Desc Text.</description></item><item><title>[C++] The C++ Standard Template Library(STL) - map</title><link>https://intervalrain.github.io/c++/stl_map/</link><pubDate>Sat, 23 Apr 2022 22:24:21 +0800</pubDate><guid>https://intervalrain.github.io/c++/stl_map/</guid><description>C++ 中 STL 的 map 的函式與使用範例</description></item><item><title>[Java] HashMap中的hashCode設計原理</title><link>https://intervalrain.github.io/java/hashmap/hashcode/</link><pubDate>Fri, 22 Apr 2022 11:22:39 +0800</pubDate><guid>https://intervalrain.github.io/java/hashmap/hashcode/</guid><description>why hashcode &amp;gt;&amp;gt;&amp;gt; 16</description></item><item><title>[C++] 易錯題目收集</title><link>https://intervalrain.github.io/c++/question/</link><pubDate>Sun, 17 Apr 2022 17:34:39 +0800</pubDate><guid>https://intervalrain.github.io/c++/question/</guid><description>網路上 C++ 易錯的題目收集</description></item><item><title>[C++] The C++ Standard Template Library(STL) - list, forward_list</title><link>https://intervalrain.github.io/c++/stl_list/</link><pubDate>Sun, 17 Apr 2022 11:45:58 +0800</pubDate><guid>https://intervalrain.github.io/c++/stl_list/</guid><description>C++ 中 STL 的 list 的函式與使用範例</description></item><item><title>[C++] The C++ Standard Template Library(STL) - vector</title><link>https://intervalrain.github.io/c++/stl_vector/</link><pubDate>Sat, 16 Apr 2022 22:08:37 +0800</pubDate><guid>https://intervalrain.github.io/c++/stl_vector/</guid><description>C++ 中 STL 的 vector 的函式與使用範例</description></item><item><title>[C++] The C++ Standard Template Library(STL) - Container</title><link>https://intervalrain.github.io/c++/stl_container/</link><pubDate>Fri, 15 Apr 2022 01:09:18 +0800</pubDate><guid>https://intervalrain.github.io/c++/stl_container/</guid><description>C++</description></item><item><title>[IDAS+] Optimize Summary Table Function</title><link>https://intervalrain.github.io/vba/idas+_record/</link><pubDate>Thu, 14 Apr 2022 00:39:50 +0800</pubDate><guid>https://intervalrain.github.io/vba/idas+_record/</guid><description>An implementation of dictionary in VBA for searching algorithm</description></item><item><title>[C++] 如何產生 random 值</title><link>https://intervalrain.github.io/c++/random/</link><pubDate>Thu, 14 Apr 2022 00:26:23 +0800</pubDate><guid>https://intervalrain.github.io/c++/random/</guid><description>C++ 中如何產生隨機值</description></item><item><title>[C++] Cout functions</title><link>https://intervalrain.github.io/c++/cout/</link><pubDate>Fri, 08 Apr 2022 10:20:38 +0800</pubDate><guid>https://intervalrain.github.io/c++/cout/</guid><description>C++ 的 cout 函式介紹</description></item><item><title>[C++] The C++ Standard Template Library(STL) - Algorithm</title><link>https://intervalrain.github.io/c++/stl_algo/</link><pubDate>Wed, 06 Apr 2022 16:04:36 +0800</pubDate><guid>https://intervalrain.github.io/c++/stl_algo/</guid><description>C++ 中 STL 中的 algorithm lib 的函式與範例</description></item><item><title>[C++] The C++ Standard Template Library(STL)</title><link>https://intervalrain.github.io/c++/stl/</link><pubDate>Tue, 05 Apr 2022 01:09:42 +0800</pubDate><guid>https://intervalrain.github.io/c++/stl/</guid><description>C++ 中 STL 的介紹</description></item><item><title>[C++] STL: Vector 的使用與實作</title><link>https://intervalrain.github.io/c++/vector/</link><pubDate>Sun, 03 Apr 2022 18:14:14 +0800</pubDate><guid>https://intervalrain.github.io/c++/vector/</guid><description>C++ 中 STL 的 vector 的用法整理</description></item><item><title>[TCAD] 工具語言</title><link>https://intervalrain.github.io/device/tcad/</link><pubDate>Sat, 26 Mar 2022 21:46:26 +0800</pubDate><guid>https://intervalrain.github.io/device/tcad/</guid><description>TCAD learning notes</description></item><item><title>[CA] 計算機的抽象化與科技</title><link>https://intervalrain.github.io/cs/ca/abstraction/</link><pubDate>Thu, 24 Mar 2022 01:12:11 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/abstraction/</guid><description>&lt;h1 id="計算機的抽象化與科技"&gt;計算機的抽象化與科技&lt;/h1&gt;
&lt;h2 id="11-簡介"&gt;1.1 簡介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有賴於科技高速的成長，計算機工業出現了嶄新的型態，計算機導致了文明的第三次革命-資訊革命，與農業革命和工業革命並駕齊驅。如科幻電影般的生活應用，也如雨後出筍般的出現。
&lt;ul&gt;
&lt;li&gt;汽車&lt;/li&gt;
&lt;li&gt;手機&lt;/li&gt;
&lt;li&gt;人類基因組計劃(Human genome project)&lt;/li&gt;
&lt;li&gt;全球網路(World Wide Web)&lt;/li&gt;
&lt;li&gt;搜尋引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="計算機的應用分類與其特性"&gt;計算機的應用分類與其特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;個人電腦(Personal Computer, PCs)&lt;/li&gt;
&lt;li&gt;伺服器(Servers)
&lt;ul&gt;
&lt;li&gt;通過網路連接其它的工作站或電腦，通常面向單一且複雜大型的科學或工程應用，也可能是多而小的工作。&lt;/li&gt;
&lt;li&gt;成本和功能的差異性也最廣，可以是沒有螢幕沒有鍵盤的桌電，也可以是如超級計算機(supercomputers)這樣的極端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;嵌入式計算機(Embedded Computers)
&lt;ul&gt;
&lt;li&gt;最大的計算機類別，也涵蓋最廣泛的應用和性能。&lt;/li&gt;
&lt;li&gt;通常具有獨特的應用要求，這些要求將最低效能發揮的淋漓盡致，使成本與功耗成為很重要的指標。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="後pc時代"&gt;後PC時代&lt;/h3&gt;
&lt;p&gt;&lt;img alt="postPC" loading="lazy" src="https://intervalrain.github.io/CS/CA/images/postPC.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;個人行動裝置(Poersonal Mobile Device, PMD) 如智慧型手機與平板的出現，取代的 PC 的地位。&lt;/li&gt;
&lt;li&gt;雲端計算(Cloud Computing) 取代了傳統伺服器，這些雲端計算建構在「倉庫規模計算機」(Warehouse Scale Computer, WSC)。
&lt;ul&gt;
&lt;li&gt;企業如Google、Amazon，提供了 WSC 的租借服務，這類通過雲端佈署的「軟體即服務」(Software as a Service, SaaS)，正在改變軟體業。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="學習目標"&gt;學習目標&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;過去在硬體的限制下，程式設計師需要嚴格的考慮程式的效能：&lt;em&gt;減少記憶體空間以使程式更快&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;在計算機設計與記憶體科技的進步下，取而代之程式設計師要考量的事情變成：&lt;strong&gt;處理器的並行性&lt;/strong&gt;和&lt;strong&gt;記憶體的分層&lt;/strong&gt;，或諸如在 PMD 或雲端上運行的程式的能源效率問題。&lt;/li&gt;
&lt;li&gt;以下是我們將要學習的目標：
&lt;ul&gt;
&lt;li&gt;用高級語言編寫的程式如何翻譯成硬體語言，以及硬體如何執行生成的程式？藉此可以理解硬體與軟體的關係，也與程式的性能有關聯。&lt;/li&gt;
&lt;li&gt;軟體和硬體間的介面是什麼，軟體如何指示硬體執行所需的工作？這些概念對於理解如何編寫多種軟體至關重要。&lt;/li&gt;
&lt;li&gt;什麼決定了一個程式的性能，程式設計師如何提高性能？這關係了源始碼編譯成電腦的語言時，硬體執行程式的效率。&lt;/li&gt;
&lt;li&gt;硬體設計人員可以使用哪些技術來提高性能(Performance)？&lt;/li&gt;
&lt;li&gt;硬體設計人員可以使用哪些技術來提升能源效率(Energy Efficiency)？程式設計師又如何協助改善？&lt;/li&gt;
&lt;li&gt;什麼理由導致了循序處理(Sequential processing)轉變成了平行處理(Parallel processing)？&lt;/li&gt;
&lt;li&gt;自第一台商用計算機問世以來，計算機架構師提出了哪些想法來奠定現代計算的基礎？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="12-計結中八個重要的思想"&gt;1.2 計結中八個重要的思想&lt;/h2&gt;
&lt;p&gt;&lt;img alt="great8" loading="lazy" src="https://intervalrain.github.io/CS/CA/images/great8.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;摩爾定律(Moore&amp;rsquo;s Law)之於設計
&lt;ul&gt;
&lt;li&gt;摩爾定律源於 Intel 創辦人之一的 Gordon Moore 對 IC 容量增長的預測。&lt;/li&gt;
&lt;li&gt;由於計算機設計需耗時數年，而晶片的成長使得計算機架構師在設計時，必須將眼光放到設計完成時的技術狀態，而非當下。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用抽象化(Abstraction)來簡化設計
&lt;ul&gt;
&lt;li&gt;程式設計師與計算機架構師都必須要不斷發明新的技術以面對日益更新的科技，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抽象化&lt;/strong&gt;是一種分層設計的概念。對程式設計師而言，低階的細節被忽略，只需要遵從簡單的模型或規範去進行設計。而硬體工程師則是要去實現出這個定義好的模型的硬體、細節部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快速處理常見情況
&lt;ul&gt;
&lt;li&gt;將常使用的指令進行優化(&lt;strong&gt;common case fast&lt;/strong&gt;)，比起其它不常使用的指令，更能提升效能。&lt;/li&gt;
&lt;li&gt;何者為最常使用的指令，必須透過嚴密的實驗與測量才以得知。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平行處理(parallelism)&lt;/li&gt;
&lt;li&gt;Pipeline&lt;/li&gt;
&lt;li&gt;預測
&lt;ul&gt;
&lt;li&gt;某些情況下，將硬體的效能預測的高一點，好過於等到效能滿足才開始設計。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;記憶體的結構化(hierarchy)
&lt;ul&gt;
&lt;li&gt;透過將記憶體分層，將最快、最小、最昂貴的部分置於層狀結構的頂層；而最慢、最大、最便宜的記憶體置於層狀結構的底層。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用多餘創造可靠性(dependability)
&lt;ul&gt;
&lt;li&gt;計算機不只要速度快，還要具有可靠性。任何物理設備都可能發生故障，此時可以透過引入冗餘的元件來使系統變的更可靠，這些冗餘的元件可以在發生故障時接管工作並協助檢測故障。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="13-抽象化"&gt;1.3 抽象化&lt;/h2&gt;
&lt;p&gt;&lt;img alt="abstraction" loading="lazy" src="https://intervalrain.github.io/CS/CA/images/abstraction.png"&gt;&lt;/p&gt;</description></item><item><title>[Leetcode] Maximum Frequency Stack 最大頻率堆疊</title><link>https://intervalrain.github.io/leetcode/freqstack/</link><pubDate>Sat, 19 Mar 2022 16:53:23 +0800</pubDate><guid>https://intervalrain.github.io/leetcode/freqstack/</guid><description>Maximum Frequency Stack algorithm</description></item><item><title>[Java] 面試常見問題</title><link>https://intervalrain.github.io/java/interviewq/</link><pubDate>Wed, 16 Mar 2022 02:45:45 +0800</pubDate><guid>https://intervalrain.github.io/java/interviewq/</guid><description>針對Java常見面試考題整理，持續更新。</description></item><item><title>[CS50] Lec 1 - C</title><link>https://intervalrain.github.io/cs50/lec1/</link><pubDate>Thu, 10 Mar 2022 02:39:12 +0800</pubDate><guid>https://intervalrain.github.io/cs50/lec1/</guid><description>Introduction to programming language C</description></item><item><title>[Java] transient 關鍵字</title><link>https://intervalrain.github.io/java/transient/</link><pubDate>Tue, 08 Mar 2022 23:53:27 +0800</pubDate><guid>https://intervalrain.github.io/java/transient/</guid><description>Introduction to keyword transient</description></item><item><title>[Device] Mismatch Introduction</title><link>https://intervalrain.github.io/device/mismatch/</link><pubDate>Sat, 05 Mar 2022 21:40:03 +0800</pubDate><guid>https://intervalrain.github.io/device/mismatch/</guid><description>Device mismatch intro.</description></item><item><title>[C++] How to Initialize vector in C++</title><link>https://intervalrain.github.io/c++/newvector/</link><pubDate>Thu, 03 Mar 2022 01:33:02 +0800</pubDate><guid>https://intervalrain.github.io/c++/newvector/</guid><description>C++ 中 vector 的初始化</description></item><item><title>[Java] Integer.bitCount 解析</title><link>https://intervalrain.github.io/java/bitcount/</link><pubDate>Tue, 01 Mar 2022 20:37:02 +0800</pubDate><guid>https://intervalrain.github.io/java/bitcount/</guid><description>Desc Text.</description></item><item><title>[OS] Lec 1 - Introduction</title><link>https://intervalrain.github.io/os/lec1/</link><pubDate>Thu, 24 Feb 2022 02:43:30 +0800</pubDate><guid>https://intervalrain.github.io/os/lec1/</guid><description>概觀作業系統的歷史發展與進程</description></item><item><title>[Java] Java 的中 HashMap.comparableClassFor(Object x) 的函式解讀</title><link>https://intervalrain.github.io/java/hashmap/hashmap/</link><pubDate>Wed, 23 Feb 2022 01:36:40 +0800</pubDate><guid>https://intervalrain.github.io/java/hashmap/hashmap/</guid><description>認識泛型 generic type、類別 class</description></item><item><title>[CS50] Lec 0 - Introduction to Computer Science</title><link>https://intervalrain.github.io/cs50/lec0/</link><pubDate>Wed, 23 Feb 2022 00:43:18 +0800</pubDate><guid>https://intervalrain.github.io/cs50/lec0/</guid><description>Intoduction to Computer Science</description></item><item><title>[IT] 在 GitHub Pages 中渲染 KaTex 公式</title><link>https://intervalrain.github.io/it/latexrendering/</link><pubDate>Tue, 22 Feb 2022 01:38:30 +0800</pubDate><guid>https://intervalrain.github.io/it/latexrendering/</guid><description>如何讓 GitHub Pages 中支援 Latex 語法</description></item><item><title>[Device] Ring Oscillator 環形振盪器</title><link>https://intervalrain.github.io/device/ringoscillator/</link><pubDate>Mon, 21 Feb 2022 01:29:24 +0800</pubDate><guid>https://intervalrain.github.io/device/ringoscillator/</guid><description>A ring circuit with an odd numbers of inverters</description></item><item><title>[Java] List of list of something equality</title><link>https://intervalrain.github.io/java/listequal/</link><pubDate>Fri, 18 Feb 2022 08:59:45 +0800</pubDate><guid>https://intervalrain.github.io/java/listequal/</guid><description>Common Test methodology in Leetcode</description></item><item><title>Hello World</title><link>https://intervalrain.github.io/helloworld/</link><pubDate>Thu, 17 Feb 2022 15:15:36 +0800</pubDate><guid>https://intervalrain.github.io/helloworld/</guid><description>How to hello world?</description></item><item><title>[Logic Design] Lec 01 - 數字系統與轉換</title><link>https://intervalrain.github.io/logicdesign/lec1/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec1/</guid><description>Introduction to number systems in computer</description></item><item><title>[Logic Design] Lec 02 - 布林代數</title><link>https://intervalrain.github.io/logicdesign/lec2/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec2/</guid><description>Boolean Algebra operation and theory</description></item><item><title>[Logic Design] Lec 03 - Minterm 與 Maxterm 展開</title><link>https://intervalrain.github.io/logicdesign/lec3/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec3/</guid><description>Minterm and Maxterm expression</description></item><item><title>[Logic Design] Lec 04 - 卡諾圖 Karnaugh Maps</title><link>https://intervalrain.github.io/logicdesign/lec4/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec4/</guid><description>Simplify Boolean function with K-map</description></item><item><title>[Logic Design] Lec 05 - Quine-McClusky Method</title><link>https://intervalrain.github.io/logicdesign/lec5/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec5/</guid><description>Quine-McClusky method - systematic method to simplify boolean algebra for computer.</description></item><item><title>[Logic Design] Lec 06 - Multi-Level Gate Circuits / NAND and NOR Gates</title><link>https://intervalrain.github.io/logicdesign/lec6/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec6/</guid><description>Multi-level gate circuits. nand gates and nor gates introduction.</description></item><item><title>[Logic Design] Lec 07 - 組合電路設計與模擬</title><link>https://intervalrain.github.io/logicdesign/lec7/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec7/</guid><description>Combinational Circuit Design and Simulation Using Gates</description></item><item><title>[Logic Design] Lec 08 - 多工器、編碼器、可程式化邏輯元件</title><link>https://intervalrain.github.io/logicdesign/lec8/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec8/</guid><description>Combinational Circuit Design and Simulation</description></item><item><title>[Logic Design] Lec 09 - Flips-FLops</title><link>https://intervalrain.github.io/logicdesign/lec9/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec9/</guid><description>Flips-Flops</description></item><item><title>[Logic Design] Lec 10 - 暫存器與計數器</title><link>https://intervalrain.github.io/logicdesign/lec10/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec10/</guid><description>Registers and Counters</description></item><item><title>[Logic Design] Lec 11 - 創建圖表與設計電路</title><link>https://intervalrain.github.io/logicdesign/lec11/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec11/</guid><description>Derivation of State Graph and Table</description></item><item><title>[Logic Design] Lec 12 - 電路實現與簡化</title><link>https://intervalrain.github.io/logicdesign/lec12/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec12/</guid><description>Reduction of State Table/State Assignment</description></item><item><title>[Washam] Way to SWE</title><link>https://intervalrain.github.io/washam/</link><pubDate>Sat, 25 May 2019 22:35:48 +0800</pubDate><guid>https://intervalrain.github.io/washam/</guid><description>a study plan to be a software engineer</description></item><item><title>[創作] 關於未來</title><link>https://intervalrain.github.io/music/about_future/</link><pubDate>Fri, 14 Mar 2014 00:01:46 +0800</pubDate><guid>https://intervalrain.github.io/music/about_future/</guid><description>&lt;!DOCTYPE HTML&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
&lt;style type="text/css"&gt;
.youtube_shortcodes {
position: relative;
width: 100%;
height: 0;
padding-bottom: 66%;
margin: auto;
overflow: hidden;
text-align: center;
}
.youtube_shortcodes iframe {
position: absolute;
width: 100%;
height: 100%;
left: 0;
top: 0;
}
&lt;/style&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="youtube_shortcodes"&gt;
&lt;iframe
class="youtube-player"
type="text/html"
width="640"
height="385"
src="https://www.youtube.com/embed/rlxD01UEuio?autoplay=0"
style="
position: absolute;
top: 0;
left: 0;
width: 100%;
height: 100%;
border:0;"
allowfullscreen frameborder="0"&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;詞曲：胡鎮宇&lt;/p&gt;
&lt;p&gt;你生活的　都踏踏實實地過了&lt;br&gt;
把曾經走過的路全都擺在記憶了&lt;br&gt;
那憂鬱悲傷快樂歡笑都記得&lt;br&gt;
記在腦海了&lt;/p&gt;
&lt;p&gt;你熟悉的　該輕輕鬆鬆地放了&lt;br&gt;
把人生未來的路全都拿在手裡了&lt;br&gt;
那曾經有過的與曾經失去的&lt;br&gt;
都成回憶了&lt;/p&gt;
&lt;p&gt;而我將洋洋灑灑邁開步伐地走了&lt;br&gt;
將四年的青春塗上另一種顏色&lt;br&gt;
而我還是無法自拔矯情卻又無法割捨&lt;br&gt;
回想自己的夢　去成就另一種快樂&lt;/p&gt;</description></item><item><title/><link>https://intervalrain.github.io/csharp/concurrency_and_asyncchronous_programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://intervalrain.github.io/csharp/concurrency_and_asyncchronous_programming/</guid><description>&lt;h1 id="c-並行與異步編程完整教學"&gt;C# 並行與異步編程完整教學&lt;/h1&gt;
&lt;h2 id="目錄"&gt;目錄&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#%E5%9F%BA%E7%A4%8E%E6%A6%82%E5%BF%B5"&gt;基礎概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E8%99%95%E7%90%86%E5%99%A8%E6%9E%B6%E6%A7%8B"&gt;處理器架構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E5%90%8C%E6%AD%A5%E6%A9%9F%E5%88%B6"&gt;同步機制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E7%95%B0%E6%AD%A5%E7%B7%A8%E7%A8%8B%E5%85%83%E4%BB%B6"&gt;異步編程元件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E5%B8%B8%E8%A6%8B%E6%A8%A1%E5%BC%8F"&gt;常見模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E8%88%87%E9%99%B7%E9%98%B1"&gt;常見問題與陷阱&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="基礎概念"&gt;基礎概念&lt;/h2&gt;
&lt;h3 id="多執行緒與並行"&gt;多執行緒與並行&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;執行緒 (Thread)&lt;/strong&gt; 是作業系統能夠進行運算排程的最小單位。一個程序可以包含多個執行緒，這些執行緒共享程序的記憶體空間。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;並行 (Concurrency)&lt;/strong&gt; 是指多個任務在重疊的時間段內執行，不一定是同時執行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平行 (Parallelism)&lt;/strong&gt; 是指多個任務在同一時刻真正同時執行，需要多核處理器支援。&lt;/p&gt;
&lt;h3 id="異步編程-asynchronous-programming"&gt;異步編程 (Asynchronous Programming)&lt;/h3&gt;
&lt;p&gt;異步編程允許程式在等待某個操作完成時繼續執行其他工作，而不是阻塞等待。在 C# 中，主要透過 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 關鍵字實現。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-csharp" data-lang="csharp"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 同步版本 - 會阻塞執行緒&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; DownloadData(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; url)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; client = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; HttpClient();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; response = client.GetStringAsync(url).Result; &lt;span style="color:#75715e"&gt;// 阻塞&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; response;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 異步版本 - 不阻塞執行緒&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; Task&amp;lt;&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;&amp;gt; DownloadDataAsync(&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; url)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; client = &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; HttpClient();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; response = &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; client.GetStringAsync(url); &lt;span style="color:#75715e"&gt;// 不阻塞&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; response;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;關鍵差異&lt;/strong&gt;：&lt;/p&gt;</description></item></channel></rss>