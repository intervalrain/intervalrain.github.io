<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Csharps on Rain Hu's Workspace</title><link>https://intervalrain.github.io/csharp/</link><description>Recent content in Csharps on Rain Hu's Workspace</description><generator>Hugo -- 0.145.0</generator><language>zh-tw</language><lastBuildDate>Sat, 22 Jul 2023 20:59:57 +0800</lastBuildDate><atom:link href="https://intervalrain.github.io/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>[C#] Large Object Heap</title><link>https://intervalrain.github.io/csharp/loh/</link><pubDate>Sat, 22 Jul 2023 20:59:57 +0800</pubDate><guid>https://intervalrain.github.io/csharp/loh/</guid><description>Introduction to Large Object Heap</description></item><item><title>[CS] Sample cost for performance test</title><link>https://intervalrain.github.io/csharp/performancetest/</link><pubDate>Tue, 16 May 2023 21:26:24 +0800</pubDate><guid>https://intervalrain.github.io/csharp/performancetest/</guid><description>&lt;h3 id="sample-code-for-stop-watch">Sample code for stop watch&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Csharp" data-lang="Csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Collections.Generic;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Linq;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Runtime.CompilerServices;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Data.Common;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Diagnostics;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Drawing;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Threading.Tasks;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> Rainspace.PlayGround
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Program&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Main(&lt;span style="color:#66d9ef">string&lt;/span>[] args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stopwatch sw = &lt;span style="color:#66d9ef">new&lt;/span> Stopwatch();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sw.Start();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;==============Accumulate1==============&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Result: &amp;#34;&lt;/span> + Accumulate(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sw.Stop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Time cost: &amp;#34;&lt;/span> + (sw.ElapsedTicks/&lt;span style="color:#ae81ff">1.0e6&lt;/span>).ToString() + &lt;span style="color:#e6db74">&amp;#34;ms&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sw.Reset();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sw.Start();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;==============Accumulate2==============&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Result: &amp;#34;&lt;/span> + Accumulate(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sw.Stop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Time cost: &amp;#34;&lt;/span> + (sw.ElapsedTicks/&lt;span style="color:#ae81ff">1.0e6&lt;/span>).ToString() + &lt;span style="color:#e6db74">&amp;#34;ms&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> Accumulate(&lt;span style="color:#66d9ef">int&lt;/span> begin, &lt;span style="color:#66d9ef">int&lt;/span> end, &lt;span style="color:#66d9ef">int&lt;/span> sum = &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> res = sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (end &amp;lt; begin) &lt;span style="color:#66d9ef">return&lt;/span> Accumulate(end, begin, sum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = begin; i &amp;lt; end; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res += i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> Accumulate2(&lt;span style="color:#66d9ef">int&lt;/span> begin, &lt;span style="color:#66d9ef">int&lt;/span> end, &lt;span style="color:#66d9ef">int&lt;/span> sum = &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> res = (begin + end) * (end - begin) / &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res + sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>[C#] C#3、LINQ 及相關特性</title><link>https://intervalrain.github.io/csharp/linq_props/</link><pubDate>Mon, 01 May 2023 14:10:48 +0800</pubDate><guid>https://intervalrain.github.io/csharp/linq_props/</guid><description>Introduction to LINQ in C#</description></item><item><title>[C#] Namespace Alias 命名空間別名</title><link>https://intervalrain.github.io/csharp/namespace_alias/</link><pubDate>Tue, 28 Feb 2023 22:51:08 +0800</pubDate><guid>https://intervalrain.github.io/csharp/namespace_alias/</guid><description>Namespace alias in C#</description></item><item><title>[C#] Property getter/setter access separate 訪問權限分離</title><link>https://intervalrain.github.io/csharp/getter_setter_access_separate/</link><pubDate>Tue, 28 Feb 2023 22:18:25 +0800</pubDate><guid>https://intervalrain.github.io/csharp/getter_setter_access_separate/</guid><description>Separate getter/setter property access in C#</description></item><item><title>[C#] static class 靜態類別</title><link>https://intervalrain.github.io/csharp/static/</link><pubDate>Tue, 28 Feb 2023 21:08:01 +0800</pubDate><guid>https://intervalrain.github.io/csharp/static/</guid><description>Introduction to static class in C#</description></item><item><title>[C#] C# 筆記</title><link>https://intervalrain.github.io/csharp/csharp/</link><pubDate>Tue, 28 Feb 2023 18:49:39 +0800</pubDate><guid>https://intervalrain.github.io/csharp/csharp/</guid><description>Notes for C#</description></item><item><title>[C#] Partial Type 局部類型</title><link>https://intervalrain.github.io/csharp/partial/</link><pubDate>Tue, 28 Feb 2023 15:11:11 +0800</pubDate><guid>https://intervalrain.github.io/csharp/partial/</guid><description>Introduction to partial class ans partial method in C#</description></item><item><title>[C#] IEnumerable &amp; IEnumerator 迭代器</title><link>https://intervalrain.github.io/csharp/iterator/</link><pubDate>Mon, 27 Feb 2023 11:50:20 +0800</pubDate><guid>https://intervalrain.github.io/csharp/iterator/</guid><description>Introduction to Iterator in C#, including IEnumerator and IEnumerable</description></item><item><title>[C#] Delegate 委派</title><link>https://intervalrain.github.io/csharp/delegate/</link><pubDate>Sun, 26 Feb 2023 19:24:56 +0800</pubDate><guid>https://intervalrain.github.io/csharp/delegate/</guid><description>Introduction to Delegate in C#</description></item><item><title>[C#] Nullable 可空值類型</title><link>https://intervalrain.github.io/csharp/nullable/</link><pubDate>Thu, 23 Feb 2023 21:40:03 +0800</pubDate><guid>https://intervalrain.github.io/csharp/nullable/</guid><description>Introduction to Nullable in C#</description></item><item><title>[C#] Generic 泛型</title><link>https://intervalrain.github.io/csharp/generic/</link><pubDate>Wed, 22 Feb 2023 21:39:56 +0800</pubDate><guid>https://intervalrain.github.io/csharp/generic/</guid><description>Introduction to Generic in C#</description></item><item><title>[C#] Yield Return</title><link>https://intervalrain.github.io/csharp/yield/</link><pubDate>Sun, 01 Jan 2023 21:40:25 +0800</pubDate><guid>https://intervalrain.github.io/csharp/yield/</guid><description>Introduction to yield return in C#, and the background of IEnumerable and IEnumerator</description></item></channel></rss>