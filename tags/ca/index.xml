<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>CA on Rain Hu's Workspace</title><link>https://intervalrain.github.io/tags/ca/</link><description>Recent content in CA on Rain Hu's Workspace</description><generator>Hugo -- 0.143.1</generator><language>zh-tw</language><lastBuildDate>Sun, 03 Jul 2022 01:54:06 +0800</lastBuildDate><atom:link href="https://intervalrain.github.io/tags/ca/index.xml" rel="self" type="application/rss+xml"/><item><title>[CA] 記憶體</title><link>https://intervalrain.github.io/cs/ca/memory/</link><pubDate>Sun, 03 Jul 2022 01:54:06 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/memory/</guid><description>&lt;h1 id="準備中">準備中&lt;/h1></description></item><item><title>[CA] Pipeline</title><link>https://intervalrain.github.io/cs/ca/pipeline/</link><pubDate>Sun, 03 Jul 2022 01:54:02 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/pipeline/</guid><description>&lt;h1 id="準備中">準備中&lt;/h1></description></item><item><title>[CA] 處理器</title><link>https://intervalrain.github.io/cs/ca/processor/</link><pubDate>Sun, 03 Jul 2022 01:54:02 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/processor/</guid><description>&lt;h1 id="準備中">準備中&lt;/h1></description></item><item><title>[CA] 計算機算術</title><link>https://intervalrain.github.io/cs/ca/arithmetic/</link><pubDate>Sun, 03 Jul 2022 01:53:50 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/arithmetic/</guid><description>&lt;h1 id="準備中">準備中&lt;/h1></description></item><item><title>[CA] 指令集架構</title><link>https://intervalrain.github.io/cs/ca/isa/</link><pubDate>Sun, 03 Jul 2022 01:53:45 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/isa/</guid><description>&lt;h1 id="準備中">準備中&lt;/h1></description></item><item><title>[作業系統] 計算機組織與結構</title><link>https://intervalrain.github.io/cs/ca/</link><pubDate>Sun, 03 Jul 2022 01:39:35 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/</guid><description>&lt;h1 id="計算機組織與結構">計算機組織與結構&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://intervalrain.github.io/cs/ca/abstraction">計算機抽象化與科技&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://intervalrain.github.io/cs/ca/isa">指令集架構&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://intervalrain.github.io/cs/ca/arithmetic">計算機算術&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://intervalrain.github.io/cs/ca/processor">處理器&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://intervalrain.github.io/cs/ca/pipeline">Pipeline&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://intervalrain.github.io/cs/ca/memory">記憶體&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="參考資料">參考資料&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://ocw.nthu.edu.tw/ocw/index.php?page=course&amp;amp;cid=76">黃婷婷 清大開放式課程 計算機結構&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://mropengate.blogspot.tw/">Mr. opengate&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>[CA] 計算機的抽象化與科技</title><link>https://intervalrain.github.io/cs/ca/abstraction/</link><pubDate>Thu, 24 Mar 2022 01:12:11 +0800</pubDate><guid>https://intervalrain.github.io/cs/ca/abstraction/</guid><description>&lt;h1 id="計算機的抽象化與科技">計算機的抽象化與科技&lt;/h1>
&lt;h2 id="11-簡介">1.1 簡介&lt;/h2>
&lt;ul>
&lt;li>有賴於科技高速的成長，計算機工業出現了嶄新的型態，計算機導致了文明的第三次革命-資訊革命，與農業革命和工業革命並駕齊驅。如科幻電影般的生活應用，也如雨後出筍般的出現。
&lt;ul>
&lt;li>汽車&lt;/li>
&lt;li>手機&lt;/li>
&lt;li>人類基因組計劃(Human genome project)&lt;/li>
&lt;li>全球網路(World Wide Web)&lt;/li>
&lt;li>搜尋引擎&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="計算機的應用分類與其特性">計算機的應用分類與其特性&lt;/h3>
&lt;ul>
&lt;li>個人電腦(Personal Computer, PCs)&lt;/li>
&lt;li>伺服器(Servers)
&lt;ul>
&lt;li>通過網路連接其它的工作站或電腦，通常面向單一且複雜大型的科學或工程應用，也可能是多而小的工作。&lt;/li>
&lt;li>成本和功能的差異性也最廣，可以是沒有螢幕沒有鍵盤的桌電，也可以是如超級計算機(supercomputers)這樣的極端。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>嵌入式計算機(Embedded Computers)
&lt;ul>
&lt;li>最大的計算機類別，也涵蓋最廣泛的應用和性能。&lt;/li>
&lt;li>通常具有獨特的應用要求，這些要求將最低效能發揮的淋漓盡致，使成本與功耗成為很重要的指標。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="後pc時代">後PC時代&lt;/h3>
&lt;p>&lt;img alt="postPC" loading="lazy" src="https://intervalrain.github.io/CS/CA/images/postPC.png">&lt;/p>
&lt;ul>
&lt;li>個人行動裝置(Poersonal Mobile Device, PMD) 如智慧型手機與平板的出現，取代的 PC 的地位。&lt;/li>
&lt;li>雲端計算(Cloud Computing) 取代了傳統伺服器，這些雲端計算建構在「倉庫規模計算機」(Warehouse Scale Computer, WSC)。
&lt;ul>
&lt;li>企業如Google、Amazon，提供了 WSC 的租借服務，這類通過雲端佈署的「軟體即服務」(Software as a Service, SaaS)，正在改變軟體業。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="學習目標">學習目標&lt;/h3>
&lt;ul>
&lt;li>過去在硬體的限制下，程式設計師需要嚴格的考慮程式的效能：&lt;em>減少記憶體空間以使程式更快&lt;/em>。&lt;/li>
&lt;li>在計算機設計與記憶體科技的進步下，取而代之程式設計師要考量的事情變成：&lt;strong>處理器的並行性&lt;/strong>和&lt;strong>記憶體的分層&lt;/strong>，或諸如在 PMD 或雲端上運行的程式的能源效率問題。&lt;/li>
&lt;li>以下是我們將要學習的目標：
&lt;ul>
&lt;li>用高級語言編寫的程式如何翻譯成硬體語言，以及硬體如何執行生成的程式？藉此可以理解硬體與軟體的關係，也與程式的性能有關聯。&lt;/li>
&lt;li>軟體和硬體間的介面是什麼，軟體如何指示硬體執行所需的工作？這些概念對於理解如何編寫多種軟體至關重要。&lt;/li>
&lt;li>什麼決定了一個程式的性能，程式設計師如何提高性能？這關係了源始碼編譯成電腦的語言時，硬體執行程式的效率。&lt;/li>
&lt;li>硬體設計人員可以使用哪些技術來提高性能(Performance)？&lt;/li>
&lt;li>硬體設計人員可以使用哪些技術來提升能源效率(Energy Efficiency)？程式設計師又如何協助改善？&lt;/li>
&lt;li>什麼理由導致了循序處理(Sequential processing)轉變成了平行處理(Parallel processing)？&lt;/li>
&lt;li>自第一台商用計算機問世以來，計算機架構師提出了哪些想法來奠定現代計算的基礎？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="12-計結中八個重要的思想">1.2 計結中八個重要的思想&lt;/h2>
&lt;p>&lt;img alt="great8" loading="lazy" src="https://intervalrain.github.io/CS/CA/images/great8.png">&lt;/p>
&lt;ul>
&lt;li>摩爾定律(Moore&amp;rsquo;s Law)之於設計
&lt;ul>
&lt;li>摩爾定律源於 Intel 創辦人之一的 Gordon Moore 對 IC 容量增長的預測。&lt;/li>
&lt;li>由於計算機設計需耗時數年，而晶片的成長使得計算機架構師在設計時，必須將眼光放到設計完成時的技術狀態，而非當下。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用抽象化(Abstraction)來簡化設計
&lt;ul>
&lt;li>程式設計師與計算機架構師都必須要不斷發明新的技術以面對日益更新的科技，&lt;/li>
&lt;li>&lt;strong>抽象化&lt;/strong>是一種分層設計的概念。對程式設計師而言，低階的細節被忽略，只需要遵從簡單的模型或規範去進行設計。而硬體工程師則是要去實現出這個定義好的模型的硬體、細節部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>快速處理常見情況
&lt;ul>
&lt;li>將常使用的指令進行優化(&lt;strong>common case fast&lt;/strong>)，比起其它不常使用的指令，更能提升效能。&lt;/li>
&lt;li>何者為最常使用的指令，必須透過嚴密的實驗與測量才以得知。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>平行處理(parallelism)&lt;/li>
&lt;li>Pipeline&lt;/li>
&lt;li>預測
&lt;ul>
&lt;li>某些情況下，將硬體的效能預測的高一點，好過於等到效能滿足才開始設計。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>記憶體的結構化(hierarchy)
&lt;ul>
&lt;li>透過將記憶體分層，將最快、最小、最昂貴的部分置於層狀結構的頂層；而最慢、最大、最便宜的記憶體置於層狀結構的底層。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用多餘創造可靠性(dependability)
&lt;ul>
&lt;li>計算機不只要速度快，還要具有可靠性。任何物理設備都可能發生故障，此時可以透過引入冗餘的元件來使系統變的更可靠，這些冗餘的元件可以在發生故障時接管工作並協助檢測故障。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="13-抽象化">1.3 抽象化&lt;/h2>
&lt;p>&lt;img alt="abstraction" loading="lazy" src="https://intervalrain.github.io/CS/CA/images/abstraction.png">&lt;/p></description></item></channel></rss>