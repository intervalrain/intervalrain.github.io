<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Logic Design on Rain Hu's Workspace</title><link>https://intervalrain.github.io/categories/logic-design/</link><description>Recent content in Logic Design on Rain Hu's Workspace</description><generator>Hugo -- 0.143.1</generator><language>zh-tw</language><lastBuildDate>Sun, 01 May 2022 17:37:22 +0800</lastBuildDate><atom:link href="https://intervalrain.github.io/categories/logic-design/index.xml" rel="self" type="application/rss+xml"/><item><title>[VHDL] Verilog Hardware Description Language</title><link>https://intervalrain.github.io/verilog/intro/</link><pubDate>Sun, 01 May 2022 17:37:22 +0800</pubDate><guid>https://intervalrain.github.io/verilog/intro/</guid><description>&lt;h1 id="1-verilog-hdl">1 Verilog HDL&lt;/h1>
&lt;h2 id="11-verilog-簡介">1.1 Verilog 簡介&lt;/h2>
&lt;ul>
&lt;li>一套硬體描述語言
&lt;ul>
&lt;li>輔助設計&lt;strong>數位系統&lt;/strong>&lt;/li>
&lt;li>描述電路的行為&lt;/li>
&lt;li>電子自動化工具&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>類似C語言的硬體描述語言
&lt;ul>
&lt;li>易學、容易接受&lt;/li>
&lt;li>高階行為描述&lt;/li>
&lt;li>切勿使用軟體思維(循序)撰寫(硬體描述語言多是並行的)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>支援多種硬體層級的描述方式
&lt;ul>
&lt;li>從低階到高階模式&lt;/li>
&lt;li>依照不同的方法設計&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>支援階層式的設計方法
&lt;ul>
&lt;li>樹狀式的設計結構&lt;/li>
&lt;li>由繁化簡&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="12-verilog-的模型">1.2 Verilog 的模型&lt;/h2>
&lt;h3 id="121-電晶體層級">1.2.1 電晶體層級&lt;/h3>
&lt;ul>
&lt;li>Transistor Level&lt;/li>
&lt;li>或低階交換層次模型(Switch Level Model)&lt;/li>
&lt;li>Verilog 最低階的層次模型&lt;/li>
&lt;li>電路是由開關與電晶體所組成&lt;/li>
&lt;li>一般不會採取低階的層級來進行設計&lt;/li>
&lt;/ul>
&lt;h3 id="122-邏輯閘層級">1.2.2 邏輯閘層級&lt;/h3>
&lt;ul>
&lt;li>Gate Level&lt;/li>
&lt;li>使用基本的邏輯閘元件&lt;/li>
&lt;li>AND、OR、NOT&lt;/li>
&lt;li>邏輯電路圖&lt;/li>
&lt;/ul>
&lt;h3 id="123-資料流層級">1.2.3 資料流層級&lt;/h3>
&lt;ul>
&lt;li>Data Flow Level&lt;/li>
&lt;li>描述電路中資料的處理方式&lt;/li>
&lt;li>資料如何在電路中運算及傳送&lt;/li>
&lt;li>輸入持續驅動輸出&lt;/li>
&lt;li>運算式
&lt;ul>
&lt;li>如：&lt;code>out = a + b + c&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="124-行為模型">1.2.4 行為模型&lt;/h3>
&lt;ul>
&lt;li>Behavior Level&lt;/li>
&lt;li>Verilog 最高階的層次模型&lt;/li>
&lt;li>不需考慮硬體元件的特型，只需放在模組的功能描述&lt;/li>
&lt;li>很像 C 語言&lt;/li>
&lt;li>合成軟體工具&lt;/li>
&lt;/ul>
&lt;h3 id="125-結構式模型">1.2.5 結構式模型&lt;/h3>
&lt;ul>
&lt;li>Structure Level&lt;/li>
&lt;li>引用硬體模組的模式&lt;/li>
&lt;li>類似邏輯閘層次模型&lt;/li>
&lt;li>支援階層式設計法
&lt;ul>
&lt;li>將複雜電路分為層狀結構&lt;/li>
&lt;li>架構上類似樹狀結構
&lt;ul>
&lt;li>Bottom-up：元件→子模組→設計目標&lt;/li>
&lt;li>Top-Down：設計目標→子模組→元件&lt;/li>
&lt;li>Mixed：設計目標→子模組←元件(常用於大型複雜系統)
&lt;ul>
&lt;li>\(
\boxed{\text{Full Adder}}
\begin{cases}
\boxed{\text{Half Adder}}
\begin{cases}
\boxed{\text{XOR}}\\
\boxed{\text{AND}}
\end{cases}\\
\boxed{\text{Half Adder}}
\begin{cases}
\boxed{\text{XOR}}\\
\boxed{\text{AND}}
\end{cases}\\
\boxed{\text{OR}}
\end{cases}\\
\text{設計目標}\qquad\qquad\text{子模組}\qquad\text{元件}
\)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="13-verilog-語法詞彙">1.3 Verilog 語法詞彙&lt;/h2>
&lt;ul>
&lt;li>由一連串的標記(token)所組成
&lt;ul>
&lt;li>識別字(identifiers)&lt;/li>
&lt;li>關鍵字(keywords)&lt;/li>
&lt;li>字串(strings)&lt;/li>
&lt;li>註解(comments)&lt;/li>
&lt;li>空白(whitespace)&lt;/li>
&lt;li>數值(numbers)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="131-識別字identifiers">1.3.1 識別字(identifiers)&lt;/h3>
&lt;ul>
&lt;li>描述電路行為所使用的自訂物件
&lt;ul>
&lt;li>不違反命名規則，工程師自行定義的物件名稱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>命名規則
&lt;ul>
&lt;li>字母、數字、底線&lt;code>_&lt;/code>或是錢字號&lt;code>$&lt;/code>所組合而成。&lt;/li>
&lt;li>開頭只能使用字母或底線。&lt;/li>
&lt;li>識別字是有&lt;strong>大小寫&lt;/strong>之分的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>舉例
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>Shift_reg_b (Valid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_bus123 (Valid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$error_condition (Invalid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NT$899 (Valid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3_bit_data (Invalid)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="132-關鍵字keywords">1.3.2 關鍵字(keywords)&lt;/h3>
&lt;ul>
&lt;li>描述電路語法所保留的一組特殊名稱的標記&lt;/li>
&lt;li>定義語言的結構來描述電路
&lt;ul>
&lt;li>輸入(input)、輸出(output)&lt;/li>
&lt;li>資料型態、電路行為&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>所有關鍵字都必須使用小寫表示&lt;/li>
&lt;li>不可當作識別字使用&lt;/li>
&lt;li>常見關鍵字
\(\begin{array}{|l|l|l|l|l|l|}\hline
\text{always}&amp;amp;\text{and}&amp;amp;\text{assign}&amp;amp;\text{begin}&amp;amp;\text{buf}&amp;amp;\text{bufif0}\\\hline
\text{bufif1}&amp;amp;\text{case}&amp;amp;\text{casex}&amp;amp;\text{casez}&amp;amp;\text{cmos}&amp;amp;\text{default}\\\hline
\text{defparam}&amp;amp;\text{else}&amp;amp;\text{end}&amp;amp;\text{endcase}&amp;amp;\text{endfunction}&amp;amp;\text{endmodule}\\\hline
\text{endtask}&amp;amp;\text{event}&amp;amp;\text{for}&amp;amp;\text{forever}&amp;amp;\text{fork}&amp;amp;\text{function}\\\hline
\text{highz0}&amp;amp;\text{highz1}&amp;amp;\text{if}&amp;amp;\text{initial}&amp;amp;\text{inout}&amp;amp;\text{input}\\\hline
\text{integer}&amp;amp;\text{join}&amp;amp;\text{module}&amp;amp;\text{nand}&amp;amp;\text{negedge}&amp;amp;\text{nmos}\\\hline
\text{nor}&amp;amp;\text{not}&amp;amp;\text{notif0}&amp;amp;\text{notif1}&amp;amp;\text{or}&amp;amp;\text{output}\\\hline
\text{parameter}&amp;amp;\text{pmos}&amp;amp;\text{posedge}&amp;amp;\text{pull0}&amp;amp;\text{pull1}&amp;amp;\text{pulldown}\\\hline
\text{pullup}&amp;amp;\text{rcmos}&amp;amp;\text{real}&amp;amp;\text{realtime}&amp;amp;\text{reg}&amp;amp;\text{repeat}\\\hline
\text{rnmos}&amp;amp;\text{rpmos}&amp;amp;\text{rtran}&amp;amp;\text{rtranif0}&amp;amp;\text{rtranif1}&amp;amp;\text{strong0}\\\hline
\text{string1}&amp;amp;\text{supply0}&amp;amp;\text{supply1}&amp;amp;\text{task}&amp;amp;\text{time}&amp;amp;\text{tran}\\\hline
\text{tranif0}&amp;amp;\text{tranif1}&amp;amp;\text{tri}&amp;amp;\text{tri0}&amp;amp;\text{tri1}&amp;amp;\text{triand}\\\hline
\text{trior}&amp;amp;\text{trireg}&amp;amp;\text{wait}&amp;amp;\text{wand}&amp;amp;\text{weak0}&amp;amp;\text{weak1}\\\hline
\text{while}&amp;amp;\text{wire}&amp;amp;\text{wor}&amp;amp;\text{xnor}&amp;amp;\text{xor}\\\hline
\end{array}\)&lt;/li>
&lt;/ul>
&lt;h3 id="133-字串strings">1.3.3 字串(strings)&lt;/h3>
&lt;ul>
&lt;li>一連串字元(character)組成的單一個體&lt;/li>
&lt;li>可含有字母、數字、及一些特殊字元&lt;/li>
&lt;li>字串的所有字元必須在同一行上，並在&lt;strong>雙引號&lt;/strong>之間&lt;/li>
&lt;/ul>
&lt;h3 id="134-註解comments">1.3.4 註解(comments)&lt;/h3>
&lt;ul>
&lt;li>程式碼中加入說明文字
&lt;ul>
&lt;li>可讀性(readability)&lt;/li>
&lt;li>文件化(documentation)&lt;/li>
&lt;li>版權宣告(license declaration)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>以&lt;code>//&lt;/code>開頭的單行註解(one-line comment)&lt;/li>
&lt;li>以&lt;code>/*&lt;/code>為開頭，並以&lt;code>*/&lt;/code>為結尾的多行註解(multiple-line comment)&lt;/li>
&lt;li>多行註解不支援巢狀結構&lt;/li>
&lt;/ul>
&lt;h3 id="135-空白whitespace">1.3.5 空白(whitespace)&lt;/h3>
&lt;ul>
&lt;li>區隔不同物件&lt;/li>
&lt;li>空格(blank spaces，\b)&lt;/li>
&lt;li>欄位(tabs，\t)&lt;/li>
&lt;li>換行(newlines，\n)&lt;/li>
&lt;li>除字串內空白，註解與空白在編譯與合成時會被忽略&lt;/li>
&lt;/ul>
&lt;h3 id="136-數值numbers">1.3.6 數值(numbers)&lt;/h3>
&lt;ul>
&lt;li>Verilog 有兩種數值表示法
&lt;ul>
&lt;li>固定長度(sized): 定義位元寬度
&lt;ul>
&lt;li>&lt;code>&amp;lt;size&amp;gt;'&amp;lt;bsase format&amp;gt;&amp;lt;number&amp;gt;&lt;/code>
&lt;ul>
&lt;li>&lt;code>&amp;lt;size&amp;gt;&lt;/code>：十進位來表示此數的位元數(bits)&lt;/li>
&lt;li>&lt;code>&amp;lt;base format&amp;gt;&lt;/code>：定義進制
&lt;ul>
&lt;li>&lt;code>'H&lt;/code>|&lt;code>'h&lt;/code>：十六進制&lt;/li>
&lt;li>&lt;code>'D&lt;/code>|&lt;code>'d&lt;/code>：十進制&lt;/li>
&lt;li>&lt;code>'O&lt;/code>|&lt;code>'p&lt;/code>：八進制&lt;/li>
&lt;li>&lt;code>'B&lt;/code>|&lt;code>'b&lt;/code>：二進制&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;lt;number&amp;gt;&lt;/code>：用&lt;code>&amp;lt;base format&amp;gt;&lt;/code>來表示數值&lt;/li>
&lt;li>若為負號，將&lt;code>-&lt;/code>放在&lt;code>&amp;lt;size&amp;gt;&lt;/code>前面&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>舉例：
&lt;ul>
&lt;li>&lt;code>18'h47CB&lt;/code>：18 bits 的十六進位數 47CB&lt;/li>
&lt;li>&lt;code>13'h47CB&lt;/code>：13 bits 的十六進位數(因未給定高位元自動補0) 7CB&lt;/li>
&lt;li>&lt;code>12'd1023&lt;/code>：12 bits 的十進位數 1023&lt;/li>
&lt;li>&lt;code>9'o723&lt;/code>：9 bits 的八進位數 723&lt;/li>
&lt;li>&lt;code>5'b11101&lt;/code>：5bits 的二進位數 11101&lt;/li>
&lt;li>&lt;code>5'b1xx01&lt;/code>：含有 unknown values 的表示法&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>不定長度(unsized): 未定義位元寬度
&lt;ul>
&lt;li>&amp;lsquo;&lt;code>&amp;lt;base format&amp;gt;&amp;lt;number&lt;/code>
&lt;ul>
&lt;li>不使用&lt;code>&amp;lt;size&amp;gt;&lt;/code>規定位元長度&lt;/li>
&lt;li>使用 HDL 編譯器內定的長度(32bit的寬度)&lt;/li>
&lt;li>沒有寫明&lt;code>&amp;lt;base format&amp;gt;&lt;/code>，則&lt;strong>內定為十進制&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>舉例：
&lt;ul>
&lt;li>&lt;code>'h47CB&lt;/code>：32 bits 的十六進位數 47CB&lt;/li>
&lt;li>&lt;code>1023&lt;/code>：32 bits 的十進位數 1023&lt;/li>
&lt;li>&lt;code>'o723&lt;/code>：32 bits 的八進位數 723&lt;/li>
&lt;li>&lt;code>'b11101&lt;/code>：32 bits 的二進位數 11101&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Verilog 有四種數值位準(value level)
&lt;ul>
&lt;li>\(\begin{array}{|c|l|}\hline
\text{數值位準}&amp;amp;\text{實際電路狀態}\\\hline
\text{0}&amp;amp;\text{邏輯0，假(false)，接地}\\\hline
\text{1}&amp;amp;\text{邏輯1，真(true)，接壓電源}\\\hline
\text{x}&amp;amp;\text{不確定值(unknown value)}\\\hline
\text{z}&amp;amp;\text{高阻抗(high impedance)，浮接狀態(floating state)}\\\hline
\end{array}
\)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="14-verilog-資料物件與型態">1.4 Verilog 資料物件與型態&lt;/h2>
&lt;ul>
&lt;li>資料物件(data objects)
&lt;ul>
&lt;li>描述行為過程中所使用的訊號載具&lt;/li>
&lt;li>一個物件經過處理再傳到另一個物件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>資料型態(data type)
&lt;ul>
&lt;li>定義資料物件的類型&lt;/li>
&lt;li>接線、暫存器、參數等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="141-接線nets">1.4.1 接線(Nets)&lt;/h3>
&lt;ul>
&lt;li>接線(nets)是連接實體元件的連接線&lt;/li>
&lt;li>要被驅動才能改變其內部的值&lt;/li>
&lt;li>最主要的關鍵字是 &lt;code>wire&lt;/code>
&lt;ul>
&lt;li>一個位元的純量(scalar)&lt;/li>
&lt;li>多位元長度的向量(vector)&lt;/li>
&lt;li>內定值為 &lt;code>z&lt;/code>(高阻抗、浮接)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>宣告方式
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Verilog" data-lang="Verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> w; &lt;span style="color:#75715e">// 宣告一條接線，命名為w，內定預設值為z
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">wire&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b0&lt;/span>; &lt;span style="color:#75715e">// 宣告一條接線，命名為x，並指定x為邏輯0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">wire&lt;/span> a, b, c &lt;span style="color:#75715e">// 宣告三條接線，命名為a, b, c
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="142-暫存器registers">1.4.2 暫存器(Registers)&lt;/h3>
&lt;ul>
&lt;li>抽象的資料儲存物件(有別於實體暫存器 D flip-flop)&lt;/li>
&lt;li>保留一個數值直到下一次指定新值為止&lt;/li>
&lt;li>觀念類似 C 語言中的變數&lt;/li>
&lt;li>主要的關鍵字是 &lt;code>reg&lt;/code>
&lt;ul>
&lt;li>一個位元的純量(scalar)&lt;/li>
&lt;li>多位元長度的向量(vector)&lt;/li>
&lt;li>內定值為 &lt;code>x&lt;/code>(未知)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>\(\begin{array}{|l|l|}\hline
\text{reg}&amp;amp;\text{可變動位元寬度的無號整數(unsigned integer variable)}\\\hline
\text{integer}&amp;amp;\text{32位元寬度的有號整數(signed 32-bit integer variable)，}\\
&amp;amp;\text{算術運算產生2補數結果(2&amp;rsquo;s complement results))}\\\hline
\text{real}&amp;amp;\text{雙倍精確度之有號浮點數}\\
&amp;amp;\text{(signed floating-point variable with double precision)}\\\hline
\text{time}&amp;amp;\text{64位元寬度的無號整數(unsigned 64-bit integer variable)}\\\hline
\end{array}\)
&lt;ul>
&lt;li>設計電路請以&lt;code>reg&lt;/code>為主，其他類型合成器可能不支援。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>宣告方式
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Verilog" data-lang="Verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> a; &lt;span style="color:#75715e">// 宣告 1 個 1 位元暫存器為 a，定位值為 1 位元的 x
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">reg&lt;/span> x, y; &lt;span style="color:#75715e">// 宣告 2 個宣存器，命名為 x, y
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">integer&lt;/span> count; &lt;span style="color:#75715e">// 宣告 1 個整數為 count，值可以為正負
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">real&lt;/span> fraction; &lt;span style="color:#75715e">// 宣告 1 個浮點數為 fraction，值含小數點
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="143-純量與向量scalar-and-vector">1.4.3 純量與向量(scalar and vector)&lt;/h3>
&lt;ul>
&lt;li>純量(scalar)
&lt;ul>
&lt;li>一個位元的物件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>向量(vector)
&lt;ul>
&lt;li>多個位元的物件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>接線(ex. wire) 與 reg
&lt;ul>
&lt;li>內定一位元&lt;/li>
&lt;li>&lt;code>[大數字:小數字]&lt;/code>、&lt;code>[小數字:大數字]&lt;/code>→&lt;code>[MSB:LSB]&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>宣告方式
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Verilog" data-lang="Verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> a; &lt;span style="color:#75715e">// 宣告 1 個 1-bits 接線
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] x; &lt;span style="color:#75715e">// 宣告 1 個 5-bits 接線
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">reg&lt;/span> b; &lt;span style="color:#75715e">// 宣告 1 個 1-bits 暫存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">reg&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">7&lt;/span>] y; &lt;span style="color:#75715e">// 宣告 1 個 8-bits 暫存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">reg&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] z; &lt;span style="color:#75715e">// 宣告 1 個 32-bits 暫存器
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="144-陣列array">1.4.4 陣列(Array)&lt;/h3>
&lt;ul>
&lt;li>多個暫存器、接線的聚合體&lt;/li>
&lt;li>索引值(index)定義聚合體中的個別物件&lt;/li>
&lt;li>支援多維度的陣列&lt;/li>
&lt;li>記憶體(memory)、暫存器檔案(register file)&lt;/li>
&lt;li>陣列中暫存器、接線的個數
&lt;ul>
&lt;li>&lt;code>[大數字:小數字]&lt;/code>、&lt;code>[小數字:大數字]&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>宣告方式
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Verilog" data-lang="Verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// mem_block 是一個包含 128 個暫存器的陣列，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 每個暫存器皆為 32 位元寬
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">reg&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] mem_block [&lt;span style="color:#ae81ff">127&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// mem_2D 是一個 2 維 4x64 的暫存器陣列，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 每個暫存器皆為 8 位元寬
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">reg&lt;/span> [&lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] mem_2D [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>][&lt;span style="color:#ae81ff">63&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="145-參數parameter">1.4.5 參數(parameter)&lt;/h2>
&lt;ul>
&lt;li>定義編譯合成電路時的常數&lt;/li>
&lt;li>每次編譯合成前更改，編譯合成器會根據參數值產生相對應的電路&lt;/li>
&lt;li>重複使用&lt;/li>
&lt;li>關鍵字 &lt;code>parameter&lt;/code>&lt;/li>
&lt;li>宣告方式
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Verilog" data-lang="Verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">parameter&lt;/span> width &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [width&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] a, b; &lt;span style="color:#75715e">// 接線 a 和 b 的位元寬度，會隨著參數值的改變而變動
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">reg&lt;/span> [width&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] y; &lt;span style="color:#75715e">// 暫存器 y 的位元寬度，會隨著參數值的改變而變動
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="15-模組module埠port">1.5 模組(Module)、埠(Port)&lt;/h2>
&lt;h3 id="151-模組module">1.5.1 模組(Module)&lt;/h3>
&lt;ul>
&lt;li>一個電路區塊、可以由其他模組組成&lt;/li>
&lt;li>連接模組時
&lt;ul>
&lt;li>考慮模組的輸入與輸出介面&lt;/li>
&lt;li>不需要考慮模組內部的詳細電路&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>電路設計時
&lt;ul>
&lt;li>只修改模組內部電路&lt;/li>
&lt;li>不會改變電路外部及周遭的模組&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>模組內部的電路描述可包含
&lt;ul>
&lt;li>訊號資料型態宣告&lt;/li>
&lt;li>引用其他模組(邏輯閘)&lt;/li>
&lt;li>&lt;code>assign&lt;/code> 資料處理模型之描述&lt;/li>
&lt;li>&lt;code>always&lt;/code> 行為模型之描述&lt;/li>
&lt;li>&lt;strong>函數(function)&lt;/strong> 與 &lt;strong>任務(task)&lt;/strong>&lt;/li>
&lt;li>除訊號宣告需先描述，其他部分撰寫的順序，不影響電路行為&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>模組宣告
&lt;ul>
&lt;li>以關鍵字 &lt;code>module&lt;/code> 為開頭，在其後加一個識別用的模組名稱(module name)&lt;/li>
&lt;li>再來是&lt;strong>輸入與輸出埠列&lt;/strong>(module terminal list)和埠列宣告，接著是模組內部關於電路的描述&lt;/li>
&lt;li>以關鍵字 &lt;code>endmodule&lt;/code> 做為模組結尾&lt;/li>
&lt;li>支援階層`式的設計概念&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Verilog" data-lang="Verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> module_name(terminal_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>port_declaration(...)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>param_declaration(optional)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data_type_declaration(&lt;span style="color:#66d9ef">wire&lt;/span>, &lt;span style="color:#66d9ef">reg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>other_module(logic_gate)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> data_flow_model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> behavior_model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span>, &lt;span style="color:#66d9ef">task&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="152-埠port">1.5.2 埠(port)&lt;/h3>
&lt;ul>
&lt;li>終端點、模組與外界溝通的介面接點(門)&lt;/li>
&lt;li>一個模組通常是經由一串的輸入輸出埠稱為埠列(terminal list)來與外界溝通&lt;/li>
&lt;li>若模組與外界不需要溝通，則埠列也就不存在(封閉系統)
&lt;ul>
&lt;li>測試環境(test bench)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>埠的宣告
&lt;ul>
&lt;li>埠的宣告可分為輸入埠(input)、輸出埠(output)、雙向埠(inout)三種。&lt;/li>
&lt;li>埠的宣告型態內定為接線(net)的 &lt;code>wire&lt;/code>，若需要將訊號儲存起來則埠號型態須宣告成暫存器 &lt;code>reg&lt;/code>。&lt;/li>
&lt;li>輸入埠和雙向埠只能是接線(net)，&lt;strong>不可宣告成暫存器&lt;/strong>。&lt;/li>
&lt;li>輸出埠可以宣告成接線(net)或暫存器。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Verilog" data-lang="Verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> full_adder(a, b, carry, sum); &lt;span style="color:#75715e">// 埠列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] a, b; &lt;span style="color:#75715e">// 輸入埠(4位元向量)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">input&lt;/span> carry &lt;span style="color:#75715e">// 輸入埠(1位元純量)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">output&lt;/span> [&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] sum; &lt;span style="color:#75715e">// 輸出埠(5位元向量)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">reg&lt;/span> [&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] sum; &lt;span style="color:#75715e">// 因輸出sum需儲存資料，故宣告成暫存器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="16-邏輯閘層次模型">1.6 邏輯閘層次模型&lt;/h2>
&lt;ul>
&lt;li>利用關鍵字即可引用基本的邏輯閘元件&lt;/li>
&lt;li>基本的邏輯閘關鍵字
&lt;ul>
&lt;li>&lt;code>and&lt;/code>&lt;/li>
&lt;li>&lt;code>nand&lt;/code>&lt;/li>
&lt;li>&lt;code>or&lt;/code>&lt;/li>
&lt;li>&lt;code>nor&lt;/code>&lt;/li>
&lt;li>&lt;code>not&lt;/code>&lt;/li>
&lt;li>&lt;code>xor&lt;/code>&lt;/li>
&lt;li>&lt;code>xnor&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="161-多個輸入邏輯閘multiple-input-gates">1.6.1 多個輸入邏輯閘(Multiple-Input Gates)&lt;/h3>
&lt;ul>
&lt;li>&lt;code>and&lt;/code>、&lt;code>nand&lt;/code>、&lt;code>or&lt;/code>、&lt;code>nor&lt;/code>、&lt;code>xor&lt;/code>、&lt;code>xnor&lt;/code>&lt;/li>
&lt;li>具有多個純量(scalar)的輸入，但是只有一個純量的輸出&lt;/li>
&lt;li>&lt;strong>多個輸入邏輯閘的輸出總是放在埠列(post list)的第一個位置，而輸入則是跟在輸出的後面&lt;/strong>
輸出必須透過接線(wire)連接，輸入無規定&lt;/li>
&lt;li>多個輸入邏輯閘的別名可以加或是不加&lt;/li>
&lt;li>使用方法
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Verilog" data-lang="Verilog">&lt;span style="display:flex;">&lt;span>gate_type instance(out, in_1, in_2, in_3, ..., in_n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gate_type inst_1(out_1, in1_1, in1_2, in1_3, ..., in1_n),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inst_2(out_2, in2_1, in2_2, in2_3, ..., in2_n),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inst_3(out_3, in3_1, in3_2, in3_3, ..., in3_n),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inst_m(out_m, in_m1, in_m2, in_m3, ..., in_mn);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>\(\begin{array}{ccc}
\underbrace{\text{a, b, c, d}}_{\text{輸入}}
\rightarrow
\boxed{\text{Multiple-Input Gate}}
\rightarrow
\underbrace{\text{e}} _{\text{輸出}}
\end{array}
\)&lt;/li>
&lt;li>\(\text{and\quad a1(}
\underbrace{\text{e}}_{\text{輸出}}
\text{, }
\underbrace{\text{a, b, c, d}} _{\text{輸入}}
\text{);}
\)&lt;/li>
&lt;/ul>
&lt;h3 id="162-多個輸出邏輯閘multiple-output-gates">1.6.2 多個輸出邏輯閘(Multiple-Output Gates)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>not&lt;/code>、&lt;code>buf&lt;/code>&lt;/p></description></item><item><title>[Logic Design] Lec 01 - 數字系統與轉換</title><link>https://intervalrain.github.io/logicdesign/lec1/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec1/</guid><description>Introduction to number systems in computer</description></item><item><title>[Logic Design] Lec 02 - 布林代數</title><link>https://intervalrain.github.io/logicdesign/lec2/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec2/</guid><description>Boolean Algebra operation and theory</description></item><item><title>[Logic Design] Lec 03 - Minterm 與 Maxterm 展開</title><link>https://intervalrain.github.io/logicdesign/lec3/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec3/</guid><description>Minterm and Maxterm expression</description></item><item><title>[Logic Design] Lec 04 - 卡諾圖 Karnaugh Maps</title><link>https://intervalrain.github.io/logicdesign/lec4/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec4/</guid><description>Simplify Boolean function with K-map</description></item><item><title>[Logic Design] Lec 05 - Quine-McClusky Method</title><link>https://intervalrain.github.io/logicdesign/lec5/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec5/</guid><description>Quine-McClusky method - systematic method to simplify boolean algebra for computer.</description></item><item><title>[Logic Design] Lec 06 - Multi-Level Gate Circuits / NAND and NOR Gates</title><link>https://intervalrain.github.io/logicdesign/lec6/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec6/</guid><description>Multi-level gate circuits. nand gates and nor gates introduction.</description></item><item><title>[Logic Design] Lec 07 - 組合電路設計與模擬</title><link>https://intervalrain.github.io/logicdesign/lec7/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec7/</guid><description>Combinational Circuit Design and Simulation Using Gates</description></item><item><title>[Logic Design] Lec 08 - 多工器、編碼器、可程式化邏輯元件</title><link>https://intervalrain.github.io/logicdesign/lec8/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec8/</guid><description>Combinational Circuit Design and Simulation</description></item><item><title>[Logic Design] Lec 09 - Flips-FLops</title><link>https://intervalrain.github.io/logicdesign/lec9/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec9/</guid><description>Flips-Flops</description></item><item><title>[Logic Design] Lec 10 - 暫存器與計數器</title><link>https://intervalrain.github.io/logicdesign/lec10/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec10/</guid><description>Registers and Counters</description></item><item><title>[Logic Design] Lec 11 - 創建圖表與設計電路</title><link>https://intervalrain.github.io/logicdesign/lec11/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec11/</guid><description>Derivation of State Graph and Table</description></item><item><title>[Logic Design] Lec 12 - 電路實現與簡化</title><link>https://intervalrain.github.io/logicdesign/lec12/</link><pubDate>Sat, 18 Sep 2021 03:11:35 +0800</pubDate><guid>https://intervalrain.github.io/logicdesign/lec12/</guid><description>Reduction of State Table/State Assignment</description></item></channel></rss>